module CommTCP
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   references	= "see the CommStreams documentation for details on the semantics of this driver module"
	   changes	= "##=>
	   
	   - 20070130, bh, Winsock replaced by WinNet
	   - 20151013, center #78, fixing type of WinNet.hostent.h_addr_list
	   - 20151028, center #81, supporting empty localAdr in CommTCP
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import SYSTEM, WinApi, WinNet, Strings, Dialog, CommStreams
	
	const 
		hostSpecificError = -1 // host-specific error codes
		INVALID_SOCKET = WinNet.INVALID_SOCKET
		SOCKET_ERROR = WinNet.SOCKET_ERROR
		
		FIONREAD = WinNet.IOC_OUT + 00040000h + ash(ord("f"), 8) + 127 // get # bytes to read
		FIONBIO = WinNet.IOC_IN + 00040000h + ash(ord("f"), 8) + 126 // set/clear non-blocking i/o
		FIOASYNC = WinNet.IOC_IN + 00040000h + ash(ord("f"), 8) + 125 // set/clear async i/o
		
		localhost = "127.0.0.1"
	
	type 
		Stream = pointer to record (CommStreams.Stream) 
				sock: WinNet.SOCKET // socket must be in non-blocking mode, otherwise recv() or send() could block
				remoteAdr: CommStreams.Adr  // remoteAdr # NIL
			end 
		
		Listener = pointer to record (CommStreams.Listener) 
				sock: WinNet.SOCKET
				localAdr: CommStreams.Adr  // localAdr # NIL
			end 
	
	var 
		winSockInstalled: boolean // WinSockets API successfully initialized?
		debug*: boolean
	
	
	// auxiliary procedures
	
	proc CopyOfAdrString(a: CommStreams.Adr): CommStreams.Adr
		var 
			b: CommStreams.Adr
	begin 
		new(b, len(a))
		b^ := a
		return b
	end CopyOfAdrString
	
	proc Error(msg: array of char; errno: integer)
		var 
			s: array 128 of char
			errnostr: array 8 of char
	begin 
		if debug then
			case errno of 
				WinNet.WSASYSNOTREADY: 
					s := "WSASYSNOTREADY, network subsystem is unavailable" 
				| WinNet.WSAVERNOTSUPPORTED: 
					s := "WSAVERNOTSUPPORTED, WINSOCK.DLL version out of range" 
				| WinNet.WSAEINVAL: 
					s := "WSAEINVAL, invalid argument" 
				| WinNet.WSAETIMEDOUT: 
					s := "WSAETIMEDOUT, connection timed out" 
				| WinNet.WSAECONNREFUSED: 
					s := "WSAECONNREFUSED, connection refused" 
				| WinNet.WSAEADDRNOTAVAIL: 
					s := "WSAEADDRNOTAVAIL, cannot assign requested address" 
			else 
				s := "(please look up the error number in the WinNet symbol file and in the Microsoft documentation)" 
			end 
			Strings.IntToString(errno, errnostr)
			Dialog.ShowParamMsg("^0: error ^1 (^2)", msg, errnostr, s) 
		end 
	end Error
	
	proc IsIPAddress(name: array of char): boolean
		// returns TRUE iff name only contains decimal digits and "." characters
		var 
			i: integer
	begin 
		i := 0
		while ("0" <= name[i]) & (name[i] <= "9") or (name[i] = ".") do 
			inc(i) 
		end 
		return name[i] = 0x
	end IsIPAddress
	
	proc ParseAdr(adr: array of char; var addr: array of char; var port: integer; var ok: boolean)
		// parse address specification with syntax addr [ ":" portnumber ]
		var 
			i, j, res: integer
			portstr: array 16 of char
	begin 
		i := 0
		j := 0
		port := 0
		ok := true
		while (adr[i] # 0x) & (adr[i] # ":") do 
			if j < len(addr) - 1 then
				addr[j] := adr[i]
				inc(j) 
			end 
			inc(i) 
		end 
		ok := i = j
		addr[j] := 0x
		if ok & (adr[i] = ":") then
			inc(i)
			j := 0
			while adr[i] # 0x do 
				portstr[j] := adr[i]
				inc(i)
				if j < len(portstr) - 1 then
					inc(j) 
				end  
			end 
			portstr[j] := 0x
			Strings.StringToInt(portstr, port, res)
			ok := res = 0 
		end 
	end ParseAdr
	
	proc ParseLocalAdr(in adr: array of char
		var peername: array of char; var port: integer; var ok: boolean
		)
		var 
			i, res: integer
	begin 
		if adr = "" then
			port := 0 // default port number 0 means 'don't care which port is used'
			peername := localhost
			ok := true 
		else 
			i := 0
			while (adr[i] # 0x) & ((adr[i] >= "0") & (adr[i] <= "9")) or (adr[i] = " ") do 
				inc(i) 
			end 
			if adr[i] # 0x then
				ParseAdr(adr, peername, port, ok) 
			else 
				Strings.StringToInt(adr, port, res)
				peername := localhost
				ok := res = 0 
			end  
		end 
	end ParseLocalAdr
	
	proc NameToAdr(in peername: array of char; var inaddr: WinNet.in_addr; var ok: boolean)
		var 
			hostentry: WinNet.Ptrhostent
			shortPName: array 64 of char
	begin 
		shortPName := short(peername)
		if IsIPAddress(peername) then
			inaddr.S_un.S_addr := WinNet.inet_addr(shortPName)
			ok := inaddr.S_un.S_addr # WinNet.INADDR_NONE 
		else 
			hostentry := WinNet.gethostbyname(shortPName)
			ok := hostentry # nil
			if ok then
				inaddr := SYSTEM.VAL(WinNet.in_addr, hostentry.h_addr_list^[0]^) 
			else 
				Error("gethostbyname()", WinNet.WSAGetLastError()) 
			end  
		end 
	end NameToAdr
	
	proc MakeAdr(adr: WinNet.sockaddr_in; var s: CommStreams.Adr)
		var 
			ipadr, n: integer
			temp, buf: array 64 of char
	begin 
		ipadr := adr.sin_addr.S_un.S_addr
		temp := ""
		if ipadr # 0 then
			n := ipadr mod 256
			Strings.IntToString(n, temp)
			n := SYSTEM.LSH(ipadr, -8)
			n := n mod 256
			Strings.IntToString(n, buf)
			temp := temp + "." + buf
			n := SYSTEM.LSH(ipadr, -16)
			n := n mod 256
			Strings.IntToString(n, buf)
			temp := temp + "." + buf
			n := SYSTEM.LSH(ipadr, -24)
			n := n mod 256
			Strings.IntToString(n, buf)
			temp := temp + "." + buf + ":" 
		end 
		n := (adr.sin_port mod 256) * 256 + (adr.sin_port div 256) mod 256
		Strings.IntToString(n, buf)
		temp := temp + buf
		new(s, len(temp) + 1)
		s^ := temp
	end MakeAdr
	
	proc MakeFdSet(socket: WinNet.SOCKET; var set_: WinNet.fd_set)
	begin 
		set_.fd_count := 1
		set_.fd_array[0] := socket
	end MakeFdSet
	
	// Listener
	
	proc (l: Listener) LocalAdr(): CommStreams.Adr
	begin 
		return CopyOfAdrString(l.localAdr)
	end LocalAdr
	
	proc (l: Listener) Accept(var s: CommStreams.Stream)
		var 
			timeout: WinNet.timeval
			set_: WinNet.fd_set
			res, namelen: integer
			sock: WinNet.SOCKET
			tcpstream: Stream
			inadr: WinNet.sockaddr_in
	begin 
		timeout.tv_sec := 0
		timeout.tv_usec := 0
		MakeFdSet(l.sock, set_)
		res := WinNet.select(0, set_, nil, nil, timeout)
		assert(res # SOCKET_ERROR, 100)
		if res > 0 then
			namelen := size(WinNet.sockaddr_in)
			sock := WinNet.accept(l.sock, SYSTEM.VAL(WinNet.sockaddr, inadr), namelen)
			assert(sock # INVALID_SOCKET, 101)
			namelen := 1 // = 'true'
			res := WinNet.ioctlsocket(sock, FIONBIO, namelen) // set to non-blocking mode
			assert(res = 0, 102)
			new(tcpstream)
			tcpstream.sock := sock
			MakeAdr(inadr, tcpstream.remoteAdr)
			s := tcpstream 
		end 
	end Accept
	
	proc (l: Listener) Close
		var 
			res: integer
	begin 
		if l.sock # INVALID_SOCKET then
			res := WinNet.closesocket(l.sock)
			l.sock := INVALID_SOCKET 
		end 
	end Close
	
	proc (l: Listener) FINALIZE-
	begin 
		with l: Listener do 
			if l.sock # INVALID_SOCKET then
				l.Close 
			end  
		end 
	end FINALIZE
	
	proc NewListener*(localAdr: array of char; var l: CommStreams.Listener; var res: integer)
		// localAdr must contain a port number
		const  // use default length of listener backlog queue
			SOMAXCONN = 5
		var 
			portnr, namelen: integer
			ok: boolean
			tcplistener: Listener
			adr: WinNet.sockaddr_in
			sock: WinNet.SOCKET
			peername: array 64 of char
	begin 
		l := nil
		if winSockInstalled then
			ParseLocalAdr(localAdr, peername, portnr, ok)
			if ok & (portnr >= 0) then // only non-negative port numbers are legal
				sock := WinNet.socket(WinNet.PF_INET, WinNet.SOCK_STREAM, WinNet.IPPROTO_TCP)
				assert(sock # INVALID_SOCKET, 100)
				adr.sin_family := WinNet.PF_INET
				adr.sin_port := WinNet.htons(short(portnr))
				NameToAdr(peername, adr.sin_addr, ok)
				if ok then
					res := WinNet.bind(sock, SYSTEM.VAL(WinNet.sockaddr, adr), size(WinNet.sockaddr_in))
					if res = 0 then
						res := WinNet.listen(sock, SOMAXCONN)
						assert(res = 0, 102)
						new(tcplistener)
						tcplistener.sock := sock
						namelen := size(WinNet.sockaddr_in)
						res := WinNet.getsockname(sock, SYSTEM.VAL(WinNet.sockaddr, adr), namelen)
						assert(res = 0, 103)
						MakeAdr(adr, tcplistener.localAdr)
						l := tcplistener
						res := CommStreams.done 
					else 
						res := CommStreams.localAdrInUse 
					end  
				else 
					res := WinNet.closesocket(sock)
					res := CommStreams.invalidLocalAdr 
				end  
			else 
				res := CommStreams.invalidLocalAdr 
			end  
		else 
			res := CommStreams.networkDown 
		end 
	end NewListener
	
	
	// Stream
	
	proc (s: Stream) RemoteAdr(): CommStreams.Adr
	begin 
		return CopyOfAdrString(s.remoteAdr)
	end RemoteAdr
	
	proc (s: Stream) IsConnected(): boolean
		// Give an educated guess on whether the peer has closed the connection.
		// This is not a guarantee that data sent on s will arrive at the peer.
		var 
			timeout: WinNet.timeval
			set_: WinNet.fd_set
			n, res, avail: integer
	begin 
		if s.sock = INVALID_SOCKET then
			return false 
		else 
			timeout.tv_sec := 0
			timeout.tv_usec := 0
			MakeFdSet(s.sock, set_)
			n := WinNet.select(0, set_, nil, nil, timeout)
			assert(n # SOCKET_ERROR, 100)
			if n = 1 then // a recv on s.sock would not block; find out whether there is data queued
				res := WinNet.ioctlsocket(s.sock, FIONREAD, avail)
				assert(res = 0, 101)
				(* if there is data queued, we assume the socket is still open.
				   if no data is queued, then we know that a recv can only return with zero bytes
				   read, telling us that the socket has been closed. *)
				return avail > 0 
			else  // a recv on s.sock would block, so the peer has not closed the socket yet or the connect failed entirely
				timeout.tv_sec := 0
				timeout.tv_usec := 0
				MakeFdSet(s.sock, set_)
				n := WinNet.select(0, nil, nil, set_, timeout)
				assert(n # SOCKET_ERROR, 102)
				if n = 1 then
					s.Close 
				end 
				return n = 0 
			end  
		end 
	end IsConnected
	
	proc (s: Stream) WriteBytes(in x: array of byte; beg, len_: integer; var written: integer)
		var 
			res: integer
	begin 
		assert(beg >= 0, 20)
		assert(len_ > 0, 21)
		assert(len(x) >= beg + len_, 22)
		written := WinNet.send(s.sock, SYSTEM.VAL(WinApi.PtrSTR, SYSTEM.ADR(x) + beg), len_, {})
		if written = SOCKET_ERROR then
			res := WinNet.WSAGetLastError()
			if (res # WinNet.WSAEWOULDBLOCK) & (res # WinNet.WSAENOTCONN) then
				Error("send()", res) 
			end 
			written := 0 
		end 
	end WriteBytes
	
	proc (s: Stream) ReadBytes(var x: array of byte; beg, len_: integer; var read: integer)
		var 
			res: integer
	begin 
		assert(beg >= 0, 20)
		assert(len_ > 0, 21)
		assert(len(x) >= beg + len_, 22)
		read := WinNet.recv(s.sock, SYSTEM.VAL(WinApi.PtrSTR, SYSTEM.ADR(x) + beg), len_, {})
		if read = SOCKET_ERROR then
			res := WinNet.WSAGetLastError()
			if (res = WinNet.WSAEWOULDBLOCK) or (res = WinNet.WSAENOTCONN) then
				read := 0  // there is nothing to be read
			elsif res = WinNet.WSAECONNRESET then 
				read := 0
				s.Close  // prevent trap
			else 
				Error("recv()", res)
				read := 0
				s.Close 
			end  
		end 
	end ReadBytes
	
	proc (s: Stream) Close
		var 
			res: integer
	begin 
		res := WinNet.closesocket(s.sock)
		s.sock := INVALID_SOCKET
	end Close
	
	proc (s: Stream) FINALIZE-
	begin 
		if s.sock # INVALID_SOCKET then
			s.Close 
		end 
	end FINALIZE
	
	proc CreateStream(
		var s: CommStreams.Stream; sock: WinNet.SOCKET; in remoteAdr: array of char
		)
		var 
			stream: Stream
	begin 
		new(stream)
		stream.sock := sock
		new(stream.remoteAdr, len(remoteAdr) + 1)
		stream.remoteAdr^ := remoteAdr
		s := stream
	end CreateStream
	
	proc NewStream*(
		localAdr, remoteAdr: array of char; var s: CommStreams.Stream; var res: integer
		)
		// localAdr may contain a port number
		// remoteAdr must contain an address in the format  ( ip-address | hostname ) [ ":" portnumber ]
		var 
			adr: WinNet.sockaddr_in
			rpeername, lpeername: array 64 of char
			inaddr: WinNet.in_addr
			lport, rport: integer
			ok: boolean
			sock: WinNet.SOCKET
	begin 
		s := nil
		if winSockInstalled then
			ParseAdr(remoteAdr, rpeername, rport, ok)
			if ok then
				sock := WinNet.socket(WinNet.PF_INET, WinNet.SOCK_STREAM, WinNet.IPPROTO_TCP)
				if sock # INVALID_SOCKET then
					ParseLocalAdr(localAdr, lpeername, lport, ok)
					if ok & (lport >= 0) then // only non-negative port numbers are legal
						adr.sin_family := WinNet.PF_INET
						adr.sin_port := WinNet.htons(short(lport))
						NameToAdr(lpeername, adr.sin_addr, ok)
						res := WinNet.bind(sock, SYSTEM.VAL(WinNet.sockaddr, adr), size(WinNet.sockaddr_in))
						if res = 0 then
							NameToAdr(rpeername, inaddr, ok)
							if ok then
								adr.sin_family := WinNet.PF_INET
								adr.sin_port := WinNet.htons(short(rport))
								adr.sin_addr := inaddr
								res := 1 // = 'true'
								res := WinNet.ioctlsocket(sock, FIONBIO, res) // set to non-blocking mode
								assert(res = 0, 101)
								res := WinNet.connect(sock, SYSTEM.VAL(WinNet.sockaddr, adr), size(WinNet.sockaddr_in))
								if res = 0 then
									CreateStream(s, sock, remoteAdr)
									res := CommStreams.done 
								else 
									res := WinNet.WSAGetLastError()
									if res = WinNet.WSAEWOULDBLOCK then
										CreateStream(s, sock, remoteAdr)
										res := CommStreams.done 
									else 
										Error("connect()", res)
										res := WinNet.closesocket(sock)
										res := hostSpecificError 
									end  
								end  
							else 
								res := WinNet.closesocket(sock)
								res := CommStreams.invalidRemoteAdr 
							end  
						else 
							res := WinNet.closesocket(sock)
							res := CommStreams.invalidLocalAdr 
						end  
					else 
						res := CommStreams.invalidLocalAdr 
					end  
				else 
					Error("socket()", WinNet.WSAGetLastError())
					res := hostSpecificError 
				end  
			else 
				res := CommStreams.invalidRemoteAdr 
			end  
		else 
			res := CommStreams.networkDown 
		end 
	end NewStream
	
	proc Init
		const 
			version = 00000101h
		var 
			data: WinNet.WSADATA
			ret: integer
	begin 
		debug := true
		winSockInstalled := false
		ret := WinNet.WSAStartup(version, data)
		if ret = 0 then
			winSockInstalled := true 
		else 
			Error("WSAStartup()", ret) 
		end 
		debug := false
	end Init
	
	proc Close
		var 
			ret: integer
	begin 
		ret := WinNet.WSACleanup()
	end Close

begin
	Init
(* CLOSE
	Close *) 
end CommTCP
