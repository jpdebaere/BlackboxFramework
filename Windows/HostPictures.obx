module HostPictures
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20070201, bh, Unicode support
	   - 20141215, center #23, fixing bugs in WinApi plus some refinements and extensions
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import 
		SYSTEM, COM, WinApi, WinOle, 
		Files, Fonts, Ports, Stores, Models, Views, Controllers, Properties, Dialog, Converters, 
		HostPorts, HostWindows, HostClipboard
	
	const 
		clip = 0x // modes
		fit = 1x
		approximate = 2x
		macPict = 0 // types
		winPict = 1
		minVersion = 0
		maxVersion = 0
	
	type 
		Model = pointer to record 
				file: Files.File
				pos, len_: integer
				ref: WinApi.HANDLE
				data: pointer to array of byte 
			end 
		
		StdView = pointer to record (Views.View) 
				model: Model
				unit: integer
				w, h: integer
				mode: char
				type_: byte 
			end 
	
	
	// Mac Pictures
	
	proc ReadWord(rd: Files.Reader; var x: integer) 
		var 
			b: byte
	begin 
		rd.ReadByte(b)
		x := 256 * (b mod 256)
		rd.ReadByte(b)
		x := x + b mod 256
	end ReadWord
	
	proc ReadByte(rd: Files.Reader; var x: integer) 
		var 
			b: byte
	begin 
		rd.ReadByte(b)
		x := b
	end ReadByte
	
	proc Skip(rd: Files.Reader; n: integer) 
	begin 
		rd.SetPos(rd.Pos() + n)
	end Skip
	
	proc DrawMacPicture(v: StdView; f: Views.Frame; w, h: integer) 
		var 
			rd: Files.Reader
			res, end_, len_, x, y, z, l, t, r, b, u: integer
			op: integer
			v2, clipped: boolean
			fgnd, bgnd: Ports.Color
			str: array 256 of wchar
			size_, style: integer
			p: HostPorts.Port
			dc: WinApi.HANDLE
			poly: array 512 of WinApi.POINT
			bt: byte
			rl, rt, rr, rb, dl, dt, dr, db, ol, ot, or_, ob, al, at, ar, ab, as, aa, gl, gt, gr, gb, ow, oh, lx, ly, tx, ty, plen: integer
			actPen, actBrush, nullPen, nullBrush, fillBrush, bgndBrush, bitmap, font: WinApi.HANDLE
		
		proc Point(var x, y: integer) 
		begin 
			ReadWord(rd, y)
			y := (y + 32768) mod 65536 - 32768
			ReadWord(rd, x)
			x := (x + 32768) mod 65536 - 32768
		end Point
		
		proc Data(n: integer) 
			var 
				b: byte
		begin 
			while n > 0 do 
				rd.ReadByte(b)
				dec(n) 
			end 
		end Data
		
		proc Region(var l, t, r, b: integer) 
			var 
				len_: integer
		begin 
			ReadWord(rd, len_)
			ReadWord(rd, t)
			ReadWord(rd, l)
			ReadWord(rd, b)
			ReadWord(rd, r)
			Data(len_ - 10)
		end Region
		
		proc Poly(var poly: array of WinApi.POINT; var len_: integer) 
			var 
				i: integer
		begin 
			ReadWord(rd, len_)
			len_ := (len_ - 10) div 4
			ReadWord(rd, i)
			ReadWord(rd, i)
			ReadWord(rd, i)
			ReadWord(rd, i)
			i := 0
			while i < len_ do 
				Point(poly[i].x, poly[i].y)
				inc(i) 
			end 
		end Poly
		
		proc Pattern(var brush: WinApi.HANDLE) 
			var 
				pat: array 8 of shortint
				i: integer
				b: byte
		begin 
			res := WinApi.SelectObject(dc, nullBrush)
			res := WinApi.DeleteObject(brush)
			res := WinApi.DeleteObject(bitmap)
			i := 0
			while i < 8 do 
				rd.ReadByte(b)
				pat[i] := short(255 - b mod 256)
				inc(i) 
			end 
			bitmap := WinApi.CreateBitmap(8, 8, 1, 1, SYSTEM.ADR(pat))
			brush := WinApi.CreatePatternBrush(bitmap)
		end Pattern
		
		proc Pen(x, y: integer) 
		begin 
			if x < y then
				x := y 
			end 
			res := WinApi.SelectObject(dc, nullPen)
			res := WinApi.DeleteObject(actPen)
			if x = 0 then
				actPen := nullPen 
			else 
				actPen := WinApi.CreatePen(6, x, Ports.black) 
			end 
		end Pen
		
		proc String(var s: array of wchar; var len_: integer) 
			var 
				b: byte
				i: integer
		begin 
			rd.ReadByte(b)
			len_ := b mod 256
			i := 0
			while i < len_ do 
				rd.ReadByte(b)
				// mac to windows
				if b >= ord(" ") then
					s[i] := chr(b mod 256)
					inc(i) 
				else 
					dec(len_) 
				end  
			end 
			s[i] := 0x
		end String
		
		proc PixMap(var rowBytes, height: integer; var v2: boolean) 
			var 
				x: integer
		begin 
			ReadWord(rd, rowBytes)
			v2 := rowBytes >= 32768
			ReadWord(rd, x)
			height := x
			ReadWord(rd, x)
			ReadWord(rd, x)
			height := x - height
			ReadWord(rd, x)
			if v2 then
				dec(rowBytes, 32768)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				Point(x, y)
				Point(x, y)
				Point(x, y)
				Point(x, y)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x) 
			end 
		end PixMap
		
		proc ColorTab
			var 
				x, n: integer
		begin 
			ReadWord(rd, x)
			ReadWord(rd, x)
			ReadWord(rd, x)
			ReadWord(rd, n)
			while n >= 0 do 
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x)
				dec(n) 
			end 
		end ColorTab
		
		proc PixData(rowBytes, height: integer; v2: boolean) 
			var 
				n, m: integer
				b: byte
		begin 
			if rowBytes < 8 then
				Skip(rd, rowBytes * height) 
			elsif v2 then 
				while height > 0 do 
					if rowBytes > 250 then
						ReadWord(rd, n) 
					else 
						rd.ReadByte(b)
						n := b mod 256 
					end 
					repeat 
						ReadByte(rd, m)
						dec(n)
						if m >= 0 then
							while m >= 0 do 
								rd.ReadByte(b)
								dec(n)
								dec(m) 
							end  
						else 
							assert(m # -128, 100)
							rd.ReadByte(b)
							dec(n) 
						end  
					until n <= 0 
					dec(height) 
				end  
			else 
				while height > 0 do 
					if rowBytes > 250 then
						ReadWord(rd, n) 
					else 
						rd.ReadByte(b)
						n := b mod 256 
					end 
					Skip(rd, n)
					dec(height) 
				end  
			end 
		end PixData
		
		proc BitMap(isRegion: boolean) 
			var 
				x, y, w, h, l, t, r, b: integer
				v2: boolean
		begin 
			PixMap(w, h, v2)
			if v2 then
				ColorTab 
			end 
			Point(x, y)
			Point(x, y)
			Point(x, y)
			Point(x, y)
			ReadWord(rd, x)
			if isRegion then
				Region(l, t, r, b) 
			end 
			PixData(w, h, v2)
		end BitMap
		
		proc PixPattern
			var 
				type_, x, w, h: integer
				v2: boolean
		begin 
			ReadWord(rd, type_)
			Data(8)
			if type_ = 1 then
				PixMap(w, h, v2)
				ColorTab
				PixData(w, h, v2) 
			elsif type_ = 2 then 
				ReadWord(rd, x)
				ReadWord(rd, x)
				ReadWord(rd, x) 
			else 
				halt(100) 
			end 
		end PixPattern
		
		proc Setup
		begin 
			case op mod 8 of 
				| 0: 
					res := WinApi.SelectObject(dc, nullBrush)
					res := WinApi.SelectObject(dc, actPen) 
				| 1: 
					res := WinApi.SelectObject(dc, actBrush)
					res := WinApi.SelectObject(dc, nullPen) 
				| 2: 
					res := WinApi.SelectObject(dc, bgndBrush)
					res := WinApi.SelectObject(dc, nullPen) 
				| 4: 
					res := WinApi.SelectObject(dc, fillBrush)
					res := WinApi.SelectObject(dc, nullPen) 
				| 3, 5 .. 7: 
					res := WinApi.SelectObject(dc, nullBrush)
					res := WinApi.SelectObject(dc, nullPen) 
			end 
		end Setup
		
		proc SetLn
		begin 
			res := WinApi.SelectObject(dc, actPen)
		end SetLn
		
		proc NewFont
			var 
				res, weight: integer
				old: WinApi.HANDLE
		begin 
			if odd(style) then
				weight := 700 
			else 
				weight := 400 
			end 
			old := font
			font := WinApi.CreateFontW(
				-size_, 0, 0, 0, weight, style div 2 mod 2, style div 4 mod 2, 0, 0, 3, 2, 1, 6, "Arial")
			res := WinApi.SelectObject(dc, font)
			res := WinApi.DeleteObject(old)
		end NewFont
		
		proc LineTo(x, y: integer) 
			var 
				res: integer
		begin 
			if ~clipped then
				res := WinApi.LineTo(dc, lx, ly) 
			else 
				res := WinApi.MoveToEx(dc, lx, ly, nil) 
			end 
		end LineTo
		
		proc Text(x, y: integer) 
			var 
				res, len_: integer
				str: array 256 of wchar
		begin 
			String(str, len_)
			if ~clipped then
				res := WinApi.TextOutW(dc, x, y, str, len_) 
			end 
		end Text
		
		proc Rectangle(l, t, r, b: integer) 
			var 
				res: integer
		begin 
			if ~clipped then
				res := WinApi.Rectangle(dc, l, t, r, b) 
			end 
		end Rectangle
		
		proc RoundRect(l, t, r, b, w, h: integer) 
			var 
				res: integer
		begin 
			if ~clipped then
				res := WinApi.RoundRect(dc, l, t, r, b, w, h) 
			end 
		end RoundRect
		
		proc Ellipse(l, t, r, b: integer) 
			var 
				res: integer
		begin 
			if ~clipped then
				res := WinApi.Ellipse(dc, l, t, r, b) 
			end 
		end Ellipse
		
		proc Polyline(var poly: array of WinApi.POINT; len_: integer) 
			var 
				res: integer
		begin 
			if ~clipped then
				res := WinApi.Polyline(dc, poly, len_) 
			end 
		end Polyline
		
		proc Polygon(var poly: array of WinApi.POINT; len_: integer) 
			var 
				res: integer
		begin 
			if ~clipped then
				res := WinApi.Polygon(dc, poly, len_) 
			end 
		end Polygon
	
	begin 
		rd := v.model.file.NewReader(nil)
		rd.SetPos(v.model.pos)
		end_ := v.model.pos + v.model.len_
		ReadWord(rd, x)
		Point(l, t)
		Point(r, b)
		v.w := r - l
		v.h := b - t
		v2 := false
		p := f.rider(HostPorts.Rider).port
		p.CloseBuffer
		dc := p.dc
		u := p.unit
		res := WinApi.SaveDC(dc)
		res := WinApi.SelectClipRgn(dc, 0)
		f.rider.GetRect(rl, rt, rr, rb)
		res := WinApi.IntersectClipRect(dc, rl, rt, rr, rb)
		res := WinApi.SetMapMode(dc, 8) // anisotropic
		res := WinApi.SetViewportOrgEx(dc, f.gx div u, f.gy div u, nil)
		res := WinApi.SetViewportExtEx(dc, w div u, h div u, nil)
		res := WinApi.SetWindowOrgEx(dc, l, t, nil)
		res := WinApi.SetWindowExtEx(dc, r - l, b - t, nil)
		res := WinApi.SetBkColor(dc, Ports.white)
		res := WinApi.SetTextColor(dc, Ports.black)
		f.rider(HostPorts.Rider).FixOrigin
		nullPen := WinApi.GetStockObject(WinApi.NULL_PEN)
		nullBrush := WinApi.GetStockObject(WinApi.NULL_BRUSH)
		actPen := WinApi.CreatePen(6, 1, Ports.black)
		actBrush := WinApi.GetStockObject(WinApi.BLACK_BRUSH)
		fillBrush := WinApi.GetStockObject(WinApi.BLACK_BRUSH)
		bgndBrush := WinApi.GetStockObject(WinApi.WHITE_BRUSH)
		bitmap := 0
		font := 0
		tx := 0
		ty := 0
		lx := 0
		ly := 0
		size_ := 10
		style := 0
		NewFont
		clipped := false
		repeat 
			rd.ReadByte(bt)
			op := bt mod 256
			if v2 then
				rd.ReadByte(bt)
				op := 256 * op + bt mod 256 
			end 
			case op of 
				| 0:   // nop
				| 1:  // clip
					Region(l, t, r, b)
					clipped := (l = 0) & (t = 0) & (r = 0) & (b = 0) 
				| 2:  // bgnd pattern
					Pattern(bgndBrush) 
				| 3:  // text font
					ReadWord(rd, x) 
				| 4:  // text face
					rd.ReadByte(bt)
					style := bt
					NewFont 
				| 5:  // text mode
					ReadWord(rd, x) 
				| 6:  // space extra
					Point(x, y) 
				| 7:  // pen size
					Point(x, y)
					Pen(x, y) 
				| 8:  // pen mode
					ReadWord(rd, x) 
				| 9:  // pen pattern
					Pattern(actBrush) 
				| 0ah:  // fill pattern
					Pattern(fillBrush) 
				| 0bh:  // oval size
					Point(ow, oh) 
				| 0ch:  // origin
					Point(x, y) 
				| 0dh:  // text size
					ReadWord(rd, size_)
					NewFont 
				| 0eh:  // foreground
					ReadWord(rd, x)
					ReadWord(rd, y)
					fgnd := x * 65536 + y 
				| 0fh:  // background
					ReadWord(rd, x)
					ReadWord(rd, y)
					bgnd := x * 65536 + y 
				| 10h:  // text ratio
					Point(x, y)
					Point(x, y) 
				| 11h:  // version
					rd.ReadByte(bt)
					v2 := bt = 2 
				| 12h:  // bg pix pattern
					PixPattern 
				| 13h:  // pen pix pattern
					PixPattern 
				| 14h:  // fill pix pattern
					PixPattern 
				| 15h:  // fract pen pos
					ReadWord(rd, x) 
				| 16h:  // char extra
					ReadWord(rd, x) 
				| 17h .. 19h:   // ???
				| 1ah:  // rgb fg col
					ReadWord(rd, x)
					ReadWord(rd, y)
					ReadWord(rd, z) 
				| 1bh:  // rgb bg col
					ReadWord(rd, x)
					ReadWord(rd, y)
					ReadWord(rd, z) 
				| 1ch:   // hilite mode
				| 1dh:  // rgb hl col
					ReadWord(rd, x)
					ReadWord(rd, y)
					ReadWord(rd, z) 
				| 1eh:   // def hilite
				| 1fh:  // rgb op col
					ReadWord(rd, x)
					ReadWord(rd, y)
					ReadWord(rd, z) 
				| 20h:  // line
					Point(lx, ly)
					res := WinApi.MoveToEx(dc, lx, ly, nil)
					Point(lx, ly)
					SetLn
					LineTo(lx, ly) 
				| 21h:  // line from
					Point(lx, ly)
					SetLn
					LineTo(lx, ly) 
				| 22h:  // short line
					Point(lx, ly)
					res := WinApi.MoveToEx(dc, lx, ly, nil)
					ReadByte(rd, z)
					inc(lx, z)
					ReadByte(rd, z)
					inc(ly, z)
					SetLn
					LineTo(lx, ly) 
				| 23h:  // short line from
					ReadByte(rd, z)
					inc(lx, z)
					ReadByte(rd, z)
					inc(ly, z)
					SetLn
					LineTo(lx, ly) 
				| 24h .. 27h:  // ???
					ReadWord(rd, len_)
					Data(len_) 
				| 28h:  // long text
					Point(tx, ty)
					Text(tx, ty) 
				| 29h:  // dh text
					rd.ReadByte(bt)
					inc(tx, bt mod 256)
					Text(tx, ty) 
				| 2ah:  // dv text
					rd.ReadByte(bt)
					inc(ty, bt mod 256)
					Text(tx, ty) 
				| 2bh:  // dhv text
					rd.ReadByte(bt)
					inc(tx, bt mod 256)
					rd.ReadByte(bt)
					inc(ty, bt mod 256)
					Text(tx, ty) 
				| 2ch:  // font typeface ?
					ReadWord(rd, len_)
					ReadWord(rd, x)
					String(str, z) 
				| 2dh .. 2fh:  // ???
					ReadWord(rd, len_)
					Data(len_) 
				| 30h .. 37h:  // rect
					Point(rl, rt)
					Point(rr, rb)
					Setup
					Rectangle(rl, rt, rr, rb) 
				| 38h .. 3fh:  // same rect
					Setup
					Rectangle(rl, rt, rr, rb) 
				| 40h .. 47h:  // rrect
					Point(dl, dt)
					Point(dr, db)
					Setup
					RoundRect(dl, dt, dr, db, ow, oh) 
				| 48h .. 4fh:  // same rrect
					Setup
					RoundRect(dl, dt, dr, db, ow, oh) 
				| 50h .. 57h:  // oval
					Point(ol, ot)
					Point(or_, ob)
					Setup
					Ellipse(ol, ot, or_, ob) 
				| 58h .. 5fh:  // same oval
					Setup
					Ellipse(ol, ot, or_, ob) 
				| 60h .. 67h:  // arc
					Point(al, at)
					Point(ar, ab)
					Point(aa, as) 
				| 68h .. 6fh:  // same arc
					Point(aa, as) 
				| 70h:  // poly
					Poly(poly, plen)
					SetLn
					Polyline(poly, plen) 
				| 71h .. 77h:  // poly
					Poly(poly, plen)
					Setup
					Polygon(poly, plen) 
				| 78h:  // same poly
					SetLn
					Polyline(poly, plen) 
				| 79h .. 7fh:  // same poly
					Setup
					Polygon(poly, plen) 
				| 80h .. 87h:  // rgn
					Region(gl, gt, gr, gb) 
				| 88h .. 8fh:   // same rgn
				| 90h:  // bits rect
					BitMap(false) 
				| 91h:  // bits rgn
					BitMap(true) 
				| 92h .. 97h:  // ???
					ReadWord(rd, len_)
					Data(len_) 
				| 98h:  // packed bits rect
					BitMap(false) 
				| 99h:  // packed bits rgn
					BitMap(true) 
				| 9ah .. 9fh:  // ???
					ReadWord(rd, len_)
					Data(len_) 
				| 0a0h:  // short comment
					ReadWord(rd, x) 
				| 0a1h:  // long comment
					ReadWord(rd, x)
					ReadWord(rd, len_)
					Data(len_) 
				| 0a2h .. 0afh:  // ???
					ReadWord(rd, len_)
					Data(len_) 
				| 0b0h .. 0cfh:   // ???
				| 0d0h .. 0feh:  // ???
					ReadWord(rd, x)
					ReadWord(rd, len_)
					Data(x * 65536 + len_) 
				| 0ffh:   // end
			else 
				if op < 8000h then // ???
					Data(op div 256 * 2) 
				elsif op < 8100h then   // ???
				else  // ???
					ReadWord(rd, x)
					ReadWord(rd, len_)
					Data(x * 65536 + len_) 
				end  
			end 
			if v2 & odd(rd.Pos() - v.model.pos) then
				rd.ReadByte(bt) 
			end  
		until (op = 0ffh) or (rd.Pos() >= end_) 
		res := WinApi.RestoreDC(dc, -1)
		res := WinApi.DeleteObject(actPen)
		res := WinApi.DeleteObject(actBrush)
		res := WinApi.DeleteObject(fillBrush)
		res := WinApi.DeleteObject(bgndBrush)
		res := WinApi.DeleteObject(bitmap)
		res := WinApi.DeleteObject(font)
	end DrawMacPicture
	
	(* PROCEDURE Dump (v: StdView);
	   VAR rd: Files.Reader; op, end, len, x, y: INTEGER; v2: BOOLEAN; b: BYTE;
	   
	   PROCEDURE Point;
	   VAR x: INTEGER;
	   BEGIN
	   ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x)
	   END Point;
	   
	   PROCEDURE Data (n: INTEGER);
	   BEGIN
	   WHILE n > 0 DO
	   rd.ReadByte(b); DEC(n);
	   Sub.Char(" "); Sub.IntForm(b, 16, 2, "0", FALSE);
	   END
	   END Data;
	   
	   PROCEDURE Region;
	   VAR len: INTEGER;
	   BEGIN
	   ReadWord(rd, len);
	   Point; Point;
	   Data(len - 10)
	   END Region;
	   
	   PROCEDURE Text;
	   VAR b: BYTE; len: INTEGER;
	   BEGIN
	   rd.ReadByte(b); len := b MOD 256;
	   Sub.String(' "');
	   WHILE len > 0 DO rd.ReadByte(b); Sub.Char(CHR(b MOD 256)); DEC(len) END;
	   Sub.Char('"')
	   END Text;
	   
	   PROCEDURE PixMap (VAR rowBytes, height: INTEGER; VAR v2: BOOLEAN);
	   VAR x: INTEGER;
	   BEGIN
	   ReadWord(rd, rowBytes); v2 := rowBytes >= 32768;
	   Sub.Int(rowBytes);
	   ReadWord(rd, x); Sub.Int(x); height := x;
	   ReadWord(rd, x); Sub.Int(x);
	   ReadWord(rd, x); Sub.Int(x); height := x - height;
	   ReadWord(rd, x); Sub.Int(x);
	   IF v2 THEN
	   DEC(rowBytes, 32768);
	   ReadWord(rd, x); ReadWord(rd, x); ReadWord(rd, x); ReadWord(rd, x);
	   Point; Point;
	   Point; Point;
	   ReadWord(rd, x);
	   ReadWord(rd, x);
	   ReadWord(rd, x);
	   ReadWord(rd, x);
	   ReadWord(rd, x);
	   ReadWord(rd, x)
	   END
	   END PixMap;
	   
	   PROCEDURE ColorTab;
	   VAR x, n: INTEGER;
	   BEGIN
	   ReadWord(rd, x); ReadWord(rd, x); ReadWord(rd, x); ReadWord(rd, n); Sub.Int(n);
	   WHILE n >= 0 DO
	   ReadWord(rd, x); ReadWord(rd, x); ReadWord(rd, x); ReadWord(rd, x);
	   DEC(n)
	   END
	   END ColorTab;
	   
	   PROCEDURE PixData (rowBytes, height: INTEGER; v2: BOOLEAN);
	   VAR n, m, k: INTEGER; b: BYTE;
	   BEGIN
	   IF rowBytes < 8 THEN
	   Skip(rd, rowBytes * height)
	   ELSIF v2 THEN
	   WHILE height > 0 DO
	   IF rowBytes > 250 THEN ReadWord(rd, n) ELSE rd.ReadByte(b); n := b MOD 256 END;
	   k := 0;
	   REPEAT
	   rd.ReadByte(b); DEC(n); m := b;
	   IF m >= 0 THEN
	   WHILE m >= 0 DO rd.ReadByte(b); DEC(n); DEC(m); INC(k) END
	   ELSE
	   ASSERT(m # -128, 100);
	   rd.ReadByte(b); DEC(n); INC(k, 1 - m)
	   END
	   UNTIL n <= 0;
	   ASSERT(n = 0, 101);
	   ASSERT(k = rowBytes, 102);
	   (* Skip(rd, n); *) DEC(height)
	   END
	   ELSE
	   WHILE height > 0 DO
	   IF rowBytes > 250 THEN ReadWord(rd, n) ELSE rd.ReadByte(b); n := b MOD 256 END;
	   Skip(rd, n); DEC(height)
	   END
	   END
	   END PixData;
	   
	   PROCEDURE PixPattern;
	   VAR type, w, h: INTEGER; v2: BOOLEAN;
	   BEGIN
	   ReadWord(rd, type); Data(8);
	   IF type = 1 THEN
	   PixMap(w, h, v2); ColorTab; PixData(w, h, v2)
	   ELSIF type = 2 THEN
	   ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x)
	   ELSE HALT(100)
	   END
	   END PixPattern;
	   
	   PROCEDURE Bits (region: BOOLEAN);
	   VAR w, h: INTEGER; v2: BOOLEAN;
	   BEGIN
	   PixMap(w, h, v2);
	   IF v2 THEN ColorTab END;
	   Point; Point; Point; Point; ReadWord(rd, x); Sub.Int(x);
	   IF region THEN Region END;
	   PixData(w, h, v2)
	   END Bits;
	   
	   BEGIN
	   rd := v.model.file.NewReader(NIL);
	   rd.SetPos(v.model.pos); end := v.model.pos + v.model.len;
	   ReadWord(rd, x); Sub.Int(x); Point; Point; Sub.Ln; v2 := FALSE;
	   REPEAT
	   Sub.Int(rd.Pos()); Sub.Char(" ");
	   rd.ReadByte(b); op := b MOD 256;
	   IF v2 THEN rd.ReadByte(b); op := 256 * op + b MOD 256 END;
	   Sub.IntForm(op, 16, 4, "0", FALSE); Sub.Char(" ");
	   CASE op OF
	   | 0: Sub.String("nop")
	   | 1: Sub.String("clip "); Region
	   | 2: Sub.String("bkd pattern "); Data(8)
	   | 3: Sub.String("text font "); ReadWord(rd, x); Sub.Int(x)
	   | 4: Sub.String("text face "); rd.ReadByte(b); Sub.Int(b MOD 256)
	   | 5: Sub.String("text mode "); ReadWord(rd, x);  Sub.Int(x)
	   | 6: Sub.String("space extra "); Point
	   | 7: Sub.String("pen size "); Point
	   | 8: Sub.String("pen mode "); ReadWord(rd, x); Sub.Int(x)
	   | 9: Sub.String("pen pattern "); Data(8)
	   | 0AH: Sub.String("pen pattern "); Data(8)
	   | 0BH: Sub.String("oval size "); Point
	   | 0CH: Sub.String("origin "); Point
	   | 0DH: Sub.String("text size "); ReadWord(rd, x); Sub.Int(x)
	   | 0EH: Sub.String("foreground "); ReadWord(rd, x); ReadWord(rd, y); Sub.Int(x * 65536 + y)
	   | 0FH: Sub.String("background "); ReadWord(rd, x); ReadWord(rd, y); Sub.Int(x * 65536 + y)
	   | 10H: Sub.String("text ratio "); Point; Point
	   | 11H: Sub.String("version "); rd.ReadByte(b); Sub.Int(b MOD 256); v2 := b = 2
	   | 12H: Sub.String("bg pix pattern "); PixPattern
	   | 13H: Sub.String("pen pix pattern "); PixPattern
	   | 14H: Sub.String("fill pix pattern "); PixPattern
	   | 15H: Sub.String("fract pen pos "); ReadWord(rd, x); Sub.Int(x)
	   | 16H: Sub.String("char extra "); ReadWord(rd, x); Sub.Int(x)
	   | 17H..19H: Sub.String("???")
	   | 1AH: Sub.String("rgb fg col ");
	   ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x)
	   | 1BH: Sub.String("rgb bg col ");
	   ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x)
	   | 1CH: Sub.String("hilite mode")
	   | 1DH: Sub.String("rgb hl col ");
	   ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x)
	   | 1EH: Sub.String("def hilite")
	   | 1FH: Sub.String("rgb op col ");
	   ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x); ReadWord(rd, x); Sub.Int(x)
	   | 20H: Sub.String("line "); Point; Point
	   | 21H: Sub.String("line from "); Point
	   | 22H: Sub.String("short line ");
	   Point; rd.ReadByte(b); Sub.Int(b MOD 256); rd.ReadByte(b); Sub.Int(b MOD 256)
	   | 23H: Sub.String("short line from ");
	   rd.ReadByte(b); Sub.Int(b MOD 256); rd.ReadByte(b); Sub.Int(b MOD 256)
	   | 24H..27H: Sub.String("??? "); ReadWord(rd, len); Data(len)
	   | 28H: Sub.String("long text "); Point; Text
	   | 29H: Sub.String("dh text "); rd.ReadByte(b); Sub.Int(b MOD 256); Text
	   | 2AH: Sub.String("dv text "); rd.ReadByte(b); Sub.Int(b MOD 256); Text
	   | 2BH: Sub.String("dhv text ");
	   rd.ReadByte(b); Sub.Int(b MOD 256); rd.ReadByte(b); Sub.Int(b MOD 256); Text
	   | 2CH..2FH: Sub.String("??? "); ReadWord(rd, len); Data(len)
	   | 30H..37H: Sub.String("rect "); Point; Point
	   | 38H..3FH: Sub.String("same rect")
	   | 40H..47H: Sub.String("rrect "); Point; Point
	   | 48H..4FH: Sub.String("same rrect")
	   | 50H..57H: Sub.String("oval "); Point; Point
	   | 58H..5FH: Sub.String("same oval")
	   | 60H..67H: Sub.String("arc "); Point; Point; Point
	   | 68H..6FH: Sub.String("same arc "); Point
	   | 70H..77H: Sub.String("poly "); Region
	   | 78H..7FH: Sub.String("same poly")
	   | 80H..87H: Sub.String("rgn "); Region
	   | 88H..8FH: Sub.String("same rgn")
	   | 90H: Sub.String("bits rect "); Bits(FALSE)
	   | 91H: Sub.String("bits rgn "); Bits(TRUE)
	   | 92H..97H: Sub.String("??? "); ReadWord(rd, len); Data(len)
	   | 98H: Sub.String("packed bits rect "); Bits(FALSE)
	   | 99H: Sub.String("packed bits rgn "); Bits(TRUE)
	   | 9AH..9FH: Sub.String("??? "); ReadWord(rd, len); Data(len)
	   | 0A0H: Sub.String("short comment "); ReadWord(rd, x); Sub.Int(x)
	   | 0A1H: Sub.String("long comment "); ReadWord(rd, x); Sub.Int(x); ReadWord(rd, len); Data(len)
	   | 0A2H..0AFH: Sub.String("??? "); ReadWord(rd, len); Data(len)
	   | 0B0H..0CFH: Sub.String("???")
	   | 0D0H..0FEH: Sub.String("??? "); ReadWord(rd, x); ReadWord(rd, len); Data(x * 65536 + len)
	   | 0FFH: Sub.String("end")
	   ELSE
	   IF op < 8000H THEN Sub.String("??? "); Data(op DIV 256 * 2)
	   ELSIF op < 8100H THEN Sub.String("???")
	   ELSE Sub.String("??? "); ReadWord(rd, x); ReadWord(rd, len); Data(x * 65536 + len)
	   END
	   END;
	   IF v2 & ODD(rd.Pos() - v.model.pos) THEN rd.ReadByte(b) END;
	   Sub.Ln
	   UNTIL (op = 0FFH) OR (rd.Pos() >= end)
	   END Dump; *)
	
	
	
	proc Evaluate(v: StdView) 
		var 
			len_, adr: integer
			rd: Files.Reader
	begin 
		len_ := v.model.len_
		if v.model.data = nil then
			rd := v.model.file.NewReader(nil)
			rd.SetPos(v.model.pos)
			new(v.model.data, len_)
			rd.ReadBytes(v.model.data^, 0, len_) 
		end 
		v.model.ref := WinApi.SetMetaFileBitsEx(len_, v.model.data)
		assert(v.model.ref # 0, 100)
	end Evaluate
	
	
	// Model
	
	proc (m: Model) FINALIZE
		var 
			res: integer
	begin 
		if m.ref # 0 then
			res := WinApi.DeleteMetaFile(m.ref)
			m.ref := 0 
		end 
	end FINALIZE
	
	
	// View
	
	proc (v: StdView) Internalize(var rd: Stores.Reader) 
		var 
			m: Model
			thisVersion: integer
	begin 
		v.Internalize^(rd)
		if rd.cancelled then
			return  
		end 
		rd.ReadVersion(minVersion, maxVersion, thisVersion)
		if rd.cancelled then
			return  
		end 
		rd.ReadByte(v.type_)
		if (v.type_ # winPict) & (v.type_ # macPict) then
			rd.TurnIntoAlien(Stores.alienComponent)
			return  
		end 
		rd.ReadInt(v.unit)
		rd.ReadInt(v.w)
		rd.ReadInt(v.h)
		rd.ReadSChar(v.mode)
		new(m)
		m.file := rd.rider.Base()
		rd.ReadInt(m.len_)
		m.pos := rd.Pos()
		m.ref := 0 // lazy allocation of metafile
		v.model := m
		rd.SetPos(m.pos + m.len_)
	end Internalize
	
	proc (v: StdView) Externalize(var wr: Stores.Writer) 
		var 
			len_, res: integer
			r: Files.Reader
			b: byte
	begin 
		v.Externalize^(wr)
		wr.WriteVersion(maxVersion)
		wr.WriteByte(v.type_)
		wr.WriteInt(v.unit)
		wr.WriteInt(v.w)
		wr.WriteInt(v.h)
		wr.WriteSChar(v.mode)
		len_ := v.model.len_
		wr.WriteInt(len_)
		if v.model.data # nil then
			wr.rider.WriteBytes(v.model.data^, 0, len_) 
		elsif v.model.file # nil then 
			r := v.model.file.NewReader(nil)
			r.SetPos(v.model.pos)
			while len_ # 0 do 
				r.ReadByte(b)
				wr.WriteSChar(short(chr(b)))
				dec(len_) 
			end  
		else 
			assert(v.model.ref # 0, 100)
			new(v.model.data, len_)
			res := WinApi.GetMetaFileBitsEx(v.model.ref, len_, v.model.data)
			wr.rider.WriteBytes(v.model.data^, 0, len_) 
		end 
	end Externalize
	
	proc (v: StdView) ThisModel(): Models.Model 
	begin 
		return nil
	end ThisModel
	
	proc (v: StdView) CopyFromSimpleView(source: Views.View) 
	begin 
		// v.CopyFrom^(source);
		with source: StdView do 
			v.model := source.model
			v.type_ := source.type_
			v.mode := source.mode
			v.w := source.w
			v.h := source.h
			v.unit := source.unit 
		end 
	end CopyFromSimpleView
	
	proc (v: StdView) Restore(f: Views.Frame; l, t, r, b: integer) 
		var 
			rd: HostPorts.Rider
			res, u, w, h: integer
	begin 
		assert(v.model # nil, 20)
		v.context.GetSize(w, h)
		if v.type_ = winPict then
			if v.model.ref = 0 then
				Evaluate(v) 
			end 
			f.rider(HostPorts.Rider).DrawMetafile(v.model.ref, ord(v.mode), f.gx, f.gy, w, h) 
		elsif v.type_ = macPict then 
			DrawMacPicture(v, f, w, h) 
		end 
	end Restore
	
	proc (v: StdView) GetBkgndFor(
		f: Views.Frame; var col: Ports.Color; var homogeneous: boolean
		)  // new
	begin 
		col := Ports.background
	end GetBkgndFor
	
	proc (v: StdView) HandlePropMsg(var msg: Properties.Message) 
	begin 
		with msg: Properties.SizePref do 
			if (msg.w > Views.undefined) & (msg.h > Views.undefined) then
				if (v.type_ = macPict) & (v.w # 0) & (v.h # 0) or (v.mode = 7x) then // isotropic mode
					Properties.ProportionalConstraint(abs(v.w), abs(v.h), msg.fixedW, msg.fixedH, msg.w, msg.h) 
				end  
			else 
				if (v.w > 0) & (v.h > 0) then // default sizes
					msg.w := abs(v.w)
					msg.h := abs(v.h) 
				end  
			end  
		else  
		end 
	end HandlePropMsg
	
	(* PROCEDURE (v: StdView) HandleCtrlMsg (f: Views.Frame; VAR msg: Controllers.Message;
	   VAR focus: Views.View);
	   BEGIN
	   WITH msg: Controllers.TrackMsg DO
	   IF v.type = macPict THEN Dump(v) END
	   ELSE
	   END
	   END HandleCtrlMsg; *)
	
	
	
	proc GenMetafileMedium(
		mf: WinApi.HMETAFILEPICT; unk: COM.IUnknown; var sm: WinOle.STGMEDIUM
		) 
	begin 
		sm.tymed := WinOle.TYMED_MFPICT
		sm.u.hMetaFilePict := mf
		sm.pUnkForRelease := unk
	end GenMetafileMedium
	
	proc MediumMetafile(var sm: WinOle.STGMEDIUM): WinApi.HMETAFILEPICT 
	begin 
		assert(sm.tymed = WinOle.TYMED_MFPICT, 20)
		return sm.u.hMetaFilePict
	end MediumMetafile
	
	
	proc ImportDPict*(
		var med: WinOle.STGMEDIUM; var v: Views.View; var w, h: integer; var isSingle: boolean
		) 
		var 
			sv: StdView
			res, len_, sw, sh, u, mode: integer
			mf: WinApi.HMETAFILE
			hm: WinApi.HMETAFILEPICT
			mp: WinApi.PtrMETAFILEPICT
	begin 
		hm := MediumMetafile(med)
		assert(hm # 0, 20)
		mp := SYSTEM.VAL(WinApi.PtrMETAFILEPICT, WinApi.GlobalLock(hm))
		new(sv)
		sv.type_ := winPict
		mode := mp.mm
		case mode of 
			| 1: 
				u := HostWindows.unit 
			| 2: 
				u := Ports.point div 20 
			| 3: 
				u := Ports.mm div 100 
			| 4: 
				u := Ports.inch div 100 
			| 5: 
				u := Ports.inch div 1000 
			| 6: 
				u := Ports.mm div 10 
			| 7: 
				u := Ports.mm div 100 
			| 8: 
				u := Ports.mm div 100 
		end 
		sw := mp.xExt
		sh := mp.yExt
		mf := mp.hMF
		sv.w := sw * u
		sv.h := sh * u
		sv.unit := u
		sv.mode := short(chr(mode))
		new(sv.model)
		len_ := WinApi.GetMetaFileBitsEx(mf, 0, nil)
		new(sv.model.data, len_)
		res := WinApi.GetMetaFileBitsEx(mf, len_, sv.model.data^)
		sv.model.len_ := len_
		res := WinApi.GlobalUnlock(hm)
		v := sv
		w := abs(sv.w)
		h := abs(sv.h)
		isSingle := false
	end ImportDPict
	
	proc ExportDPict*(
		v: Views.View; w, h, x, y: integer; isSingle: boolean; var med: WinOle.STGMEDIUM
		) 
		var 
			res, u: integer
			mf: WinApi.HMETAFILE
			hm: WinApi.HMETAFILEPICT
			mp: WinApi.PtrMETAFILEPICT
	begin 
		assert(v # nil, 20)
		with v: StdView do 
			if v.type_ = winPict then
				if v.model.ref = 0 then
					Evaluate(v) 
				end 
				hm := WinApi.GlobalAlloc({1, 13}, size(WinApi.METAFILEPICT)) // movable, sharable
				if hm # 0 then
					mp := SYSTEM.VAL(WinApi.PtrMETAFILEPICT, WinApi.GlobalLock(hm))
					case ord(v.mode) of 
						| 1: 
							u := HostWindows.unit 
						| 2: 
							u := Ports.point div 20 
						| 3: 
							u := Ports.mm div 100 
						| 4: 
							u := Ports.inch div 100 
						| 5: 
							u := Ports.inch div 1000 
						| 6: 
							u := Ports.mm div 10 
						| 7: 
							u := Ports.mm div 100 
						| 8: 
							u := Ports.mm div 100 
					end 
					mp.mm := ord(v.mode)
					mp.xExt := v.w div u
					mp.yExt := v.h div u
					mp.hMF := WinApi.SetMetaFileBitsEx(v.model.len_, v.model.data^)
					res := WinApi.GlobalUnlock(hm)
					GenMetafileMedium(hm, nil, med) 
				end  
			end  
		else  
		end 
	end ExportDPict
	
	(* PROCEDURE ImportCBPict*;
	   VAR v: StdView; res, len, adr, w, h, u, mode: LONGINT; ref, hnd: WinApi.Handle;
	   BEGIN
	   hnd := WinApi.GetClipboardData(HostClipboard.metafile);
	   ASSERT(hnd # 0, 20);
	   adr := WinApi.GlobalLock(hnd);
	   NEW(v); v.type := winPict;
	   SYSTEM.GET(adr, mode); INC(adr, 4);
	   SYSTEM.GET(adr, w); INC(adr, 4);
	   SYSTEM.GET(adr, h); INC(adr, 4);
	   SYSTEM.GET(adr, ref);
	   CASE mode OF
	   | 1: u := HostWindows.unit
	   | 2: u := Ports.point DIV 20
	   | 3: u := Ports.mm DIV 100
	   | 4: u := Ports.inch DIV 100
	   | 5: u := Ports.inch DIV 1000
	   | 6: u := Ports.mm DIV 10
	   | 7: u := Ports.mm DIV 100
	   | 8: u := Ports.mm DIV 100
	   END;
	   v.w := w * u; v.h := h * u;
	   v.mode := CHR(mode);
	   NEW(v.model);
	   len := WinApi.GetMetaFileBitsEx(ref, 0, NIL);
	   NEW(v.model.data, len);
	   res := WinApi.GetMetaFileBitsEx(ref, len, v.model.data^);
	   v.model.len := len;
	   res := WinApi.GlobalUnlock(hnd);
	   HostClipboard.RegisterImp(v)
	   END ImportCBPict;
	   
	   PROCEDURE ImportC*;
	   VAR v: StdView; pic: MemoryMgr.Handle; s, d, len: LONGINT; ch: CHAR;
	   BEGIN
	   len := HostClipboard.len;
	   pic := MemoryMgr.NewHandle(len); MemoryMgr.HLock(pic);
	   s := HostClipboard.adr; d := SYSTEM.ADR(pic^);
	   WHILE len # 0 DO
	   SYSTEM.GET(s, ch); SYSTEM.PUT(d, ch); INC(s); INC(d); DEC(len)
	   END;
	   NEW(v); v.Init;
	   v.model := NewModel(SYSTEM.VAL(QuickDraw.PicHandle, pic));
	   HostClipboard.view := v
	   END ImportC;
	   
	   PROCEDURE ExportC*;
	   VAR v: StdView; s, d, len: LONGINT; scrap: MemoryMgr.Ptr; ch: CHAR;
	   BEGIN
	   IF HostClipboard.view IS StdView THEN
	   v := HostClipboard.view(StdView);
	   ASSERT(v.model.picture # NIL, 20);
	   len := v.model.len;
	   scrap := MemoryMgr.NewPtr(len);
	   IF MemoryMgr.err = 0 THEN
	   HostClipboard.adr := SYSTEM.VAL(LONGINT, scrap);
	   HostClipboard.len := len;
	   s := SYSTEM.ADR(v.model.picture^); d := HostClipboard.adr;
	   WHILE len # 0 DO
	   SYSTEM.GET(s, ch); SYSTEM.PUT(d, ch); INC(s); INC(d); DEC(len)
	   END
	   END
	   END
	   END ExportC;
	   
	   PROCEDURE ImportF*;
	   VAR v: StdView; pic: MemoryMgr.Handle; r: Files.Reader; d, len: LONGINT; ch: CHAR;
	   BEGIN
	   ASSERT(Converters.file # NIL, 20);
	   len := Converters.file.Length() - 512;
	   pic := MemoryMgr.NewHandle(len); ASSERT(pic # NIL, 21);
	   MemoryMgr.HLock(pic);
	   d := SYSTEM.ADR(pic^);
	   r := Converters.file.NewReader(NIL); r.SetPos(512);
	   WHILE len # 0 DO
	   r.ReadByte(ch); SYSTEM.PUT(d, ch); INC(d); DEC(len)
	   END;
	   NEW(v); v.Init;
	   v.model := NewModel(SYSTEM.VAL(QuickDraw.PicHandle, pic));
	   Converters.store := v
	   END ImportF; *)
	
	
	
	proc PictType*(v: Views.View): integer 
	begin 
		with v: StdView do 
			return v.type_ 
		else 
			return -1 
		end 
	end PictType

end HostPictures
