definition WinApi


	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20070130, bh, RtlUnwind added
	   - 20070130, bh, EnumFont callbacks corrected added
	   - 20070510, mf, RegSetValueExW corrected
	   - 20141215, center #23, fixing bugs in WinApi plus some refinements and extensions
	   - 20170321, center #156, adding Coroutines to BlackBox
	   - 20170321, center #166, adding SendInput to WinApi
	   - 20171023, center #179, fixing the value of WinApi.WM_MOUSELAST
	   - 20171106, center #181, fixing error handling of HostDialog.OpenExternal
	   - 20180515, center #187, adding a run-time debugger to BlackBox
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import SYSTEM, COM
	
	type  // base types
		PtrVoid = integer
		PtrSTR = unsafe pointer to carray of char
		PtrWSTR = unsafe pointer to carray of wchar
		DATE = longreal
		CY = longint
		ACCESS_MASK = set
		SECURITY_INFORMATION = set
	
	const 
		HKEY_CLASSES_ROOT = 80000000h
		HKEY_CURRENT_USER = 80000001h
		HKEY_LOCAL_MACHINE = 80000002h
		HKEY_USERS = 80000003h
		HKEY_PERFORMANCE_DATA = 80000004h
		HKEY_CURRENT_CONFIG = 80000005h
	
	const  // macros
		INVALID_HANDLE_VALUE = -1
		MAX_PATH = 260 // {2, 8}
		NULL = 0 // {}
		FALSE_ = 0 // {}
		TRUE_ = 1 // {0}
		ANYSIZE_ARRAY = 1 // {0}
		APPLICATION_ERROR_MASK = 536870912 // {29}
		ERROR_SEVERITY_SUCCESS = 0 // {}
		ERROR_SEVERITY_INFORMATIONAL = 1073741824 // {30}
		ERROR_SEVERITY_WARNING = 80000000h
		ERROR_SEVERITY_ERROR = -1073741824 // {30, 31}
		CLASS_E_NOTLICENSED = -2147221230
		CONNECT_E_FIRST = -2147220992
		CONNECT_E_LAST = -2147220977
		CONNECT_S_FIRST = 262656
		CONNECT_S_LAST = 262671
		CONNECT_E_NOCONNECTION = -2147220992
		CONNECT_E_ADVISELIMIT = -2147220991
		CONNECT_E_CANNOTCONNECT = -2147220990
		CONNECT_E_OVERRIDDEN = -2147220989
		SELFREG_E_FIRST = -2147220992
		SELFREG_E_LAST = -2147220977
		SELFREG_S_FIRST = 262656
		SELFREG_S_LAST = 262671
		SELFREG_E_TYPELIB = -2147220992
		SELFREG_E_CLASS = -2147220991
		PERPROP_E_FIRST = -2147220992
		PERPROP_E_LAST = -2147220977
		PERPROP_S_FIRST = 262656
		PERPROP_S_LAST = 262671
		PERPROP_E_NOPAGEAVAILABLE = -2147220992
		UNICODE_NULL = 0 // {}
		MINCHAR = 128 // {7}
		MAXCHAR = 127 // {0..6}
		MINSHORT = 32768 // {15}
		MAXSHORT = 32767 // {0..14}
		MINLONG = 80000000h
		MAXLONG = 2147483647 // {0..30}
		MAXBYTE = 255 // {0..7}
		MAXWORD = 65535 // {0..15}
		MAXDWORD = -1 // {0..31}
		LANG_NEUTRAL = 0 // {}
		LANG_BULGARIAN = 2 // {1}
		LANG_CHINESE = 4 // {2}
		LANG_CROATIAN = 26 // {1, 3, 4}
		LANG_CZECH = 5 // {0, 2}
		LANG_DANISH = 6 // {1, 2}
		LANG_DUTCH = 19 // {0, 1, 4}
		LANG_ENGLISH = 9 // {0, 3}
		LANG_FINNISH = 11 // {0, 1, 3}
		LANG_FRENCH = 12 // {2, 3}
		LANG_GERMAN = 7 // {0..2}
		LANG_GREEK = 8 // {3}
		LANG_HUNGARIAN = 14 // {1..3}
		LANG_ICELANDIC = 15 // {0..3}
		LANG_ITALIAN = 16 // {4}
		LANG_JAPANESE = 17 // {0, 4}
		LANG_KOREAN = 18 // {1, 4}
		LANG_NORWEGIAN = 20 // {2, 4}
		LANG_POLISH = 21 // {0, 2, 4}
		LANG_PORTUGUESE = 22 // {1, 2, 4}
		LANG_ROMANIAN = 24 // {3, 4}
		LANG_RUSSIAN = 25 // {0, 3, 4}
		LANG_SLOVAK = 27 // {0, 1, 3, 4}
		LANG_SLOVENIAN = 36 // {2, 5}
		LANG_SPANISH = 10 // {1, 3}
		LANG_SWEDISH = 29 // {0, 2..4}
		LANG_TURKISH = 31 // {0..4}
		SUBLANG_NEUTRAL = 0 // {}
		SUBLANG_DEFAULT = 1 // {0}
		SUBLANG_SYS_DEFAULT = 2 // {1}
		SUBLANG_CHINESE_TRADITIONAL = 1 // {0}
		SUBLANG_CHINESE_SIMPLIFIED = 2 // {1}
		SUBLANG_CHINESE_HONGKONG = 3 // {0, 1}
		SUBLANG_CHINESE_SINGAPORE = 4 // {2}
		SUBLANG_DUTCH = 1 // {0}
		SUBLANG_DUTCH_BELGIAN = 2 // {1}
		SUBLANG_ENGLISH_US = 1 // {0}
		SUBLANG_ENGLISH_UK = 2 // {1}
		SUBLANG_ENGLISH_AUS = 3 // {0, 1}
		SUBLANG_ENGLISH_CAN = 4 // {2}
		SUBLANG_ENGLISH_NZ = 5 // {0, 2}
		SUBLANG_ENGLISH_EIRE = 6 // {1, 2}
		SUBLANG_FRENCH = 1 // {0}
		SUBLANG_FRENCH_BELGIAN = 2 // {1}
		SUBLANG_FRENCH_CANADIAN = 3 // {0, 1}
		SUBLANG_FRENCH_SWISS = 4 // {2}
		SUBLANG_GERMAN = 1 // {0}
		SUBLANG_GERMAN_SWISS = 2 // {1}
		SUBLANG_GERMAN_AUSTRIAN = 3 // {0, 1}
		SUBLANG_ITALIAN = 1 // {0}
		SUBLANG_ITALIAN_SWISS = 2 // {1}
		SUBLANG_NORWEGIAN_BOKMAL = 1 // {0}
		SUBLANG_NORWEGIAN_NYNORSK = 2 // {1}
		SUBLANG_PORTUGUESE = 2 // {1}
		SUBLANG_PORTUGUESE_BRAZILIAN = 1 // {0}
		SUBLANG_SPANISH = 1 // {0}
		SUBLANG_SPANISH_MEXICAN = 2 // {1}
		SUBLANG_SPANISH_MODERN = 3 // {0, 1}
		SORT_DEFAULT = 0 // {}
		SORT_JAPANESE_XJIS = 0 // {}
		SORT_JAPANESE_UNICODE = 1 // {0}
		SORT_CHINESE_BIG5 = 0 // {}
		SORT_CHINESE_PRCP = 0 // {}
		SORT_CHINESE_UNICODE = 1 // {0}
		SORT_CHINESE_PRC = 2 // {1}
		SORT_KOREAN_KSC = 0 // {}
		SORT_KOREAN_UNICODE = 1 // {0}
		SORT_GERMAN_PHONE_BOOK = 1 // {0}
		NLS_VALID_LOCALE_MASK = 1048575 // {0..19}
		LANG_SYSTEM_DEFAULT = 2048 // {11}
		LANG_USER_DEFAULT = 1024 // {10}
		LOCALE_SYSTEM_DEFAULT = 2048 // {11}
		LOCALE_USER_DEFAULT = 1024 // {10}
		LOCALE_NEUTRAL = 0 // {}
		STATUS_WAIT_0 = 0 // {}
		STATUS_ABANDONED_WAIT_0 = 128 // {7}
		STATUS_USER_APC = 192 // {6, 7}
		STATUS_TIMEOUT = 258 // {1, 8}
		STATUS_PENDING = 259 // {0, 1, 8}
		STATUS_SEGMENT_NOTIFICATION = 1073741829 // {0, 2, 30}
		STATUS_GUARD_PAGE_VIOLATION = -2147483647 // {0, 31}
		STATUS_DATATYPE_MISALIGNMENT = -2147483646 // {1, 31}
		STATUS_BREAKPOINT = -2147483645 // {0, 1, 31}
		STATUS_SINGLE_STEP = -2147483644 // {2, 31}
		STATUS_ACCESS_VIOLATION = -1073741819 // {0, 2, 30, 31}
		STATUS_IN_PAGE_ERROR = -1073741818 // {1, 2, 30, 31}
		STATUS_NO_MEMORY = -1073741801 // {0..2, 4, 30, 31}
		STATUS_ILLEGAL_INSTRUCTION = -1073741795 // {0, 2..4, 30, 31}
		STATUS_NONCONTINUABLE_EXCEPTION = -1073741787 // {0, 2, 5, 30, 31}
		STATUS_INVALID_DISPOSITION = -1073741786 // {1, 2, 5, 30, 31}
		STATUS_ARRAY_BOUNDS_EXCEEDED = -1073741684 // {2, 3, 7, 30, 31}
		STATUS_FLOAT_DENORMAL_OPERAND = -1073741683 // {0, 2, 3, 7, 30, 31}
		STATUS_FLOAT_DIVIDE_BY_ZERO = -1073741682 // {1..3, 7, 30, 31}
		STATUS_FLOAT_INEXACT_RESULT = -1073741681 // {0..3, 7, 30, 31}
		STATUS_FLOAT_INVALID_OPERATION = -1073741680 // {4, 7, 30, 31}
		STATUS_FLOAT_OVERFLOW = -1073741679 // {0, 4, 7, 30, 31}
		STATUS_FLOAT_STACK_CHECK = -1073741678 // {1, 4, 7, 30, 31}
		STATUS_FLOAT_UNDERFLOW = -1073741677 // {0, 1, 4, 7, 30, 31}
		STATUS_INTEGER_DIVIDE_BY_ZERO = -1073741676 // {2, 4, 7, 30, 31}
		STATUS_INTEGER_OVERFLOW = -1073741675 // {0, 2, 4, 7, 30, 31}
		STATUS_PRIVILEGED_INSTRUCTION = -1073741674 // {1, 2, 4, 7, 30, 31}
		STATUS_STACK_OVERFLOW = -1073741571 // {0, 2..7, 30, 31}
		STATUS_CONTROL_C_EXIT = -1073741510 // {1, 3..5, 8, 30, 31}
		MAXIMUM_WAIT_OBJECTS = 64 // {6}
		MAXIMUM_SUSPEND_COUNT = 127 // {0..6}
		SIZE_OF_80387_REGISTERS = 80 // {4, 6}
		CONTEXT_i386 = {16}
		CONTEXT_i486 = {16}
		CONTEXT_CONTROL = {0, 16}
		CONTEXT_INTEGER = {1, 16}
		CONTEXT_SEGMENTS = {2, 16}
		CONTEXT_FLOATING_POINT = {3, 16}
		CONTEXT_DEBUG_REGISTERS = {4, 16}
		CONTEXT_FULL = {0..2, 16}
		EXCEPTION_NONCONTINUABLE = {0}
		EXCEPTION_MAXIMUM_PARAMETERS = 15 // {0..3}
		PROCESS_TERMINATE = {0}
		PROCESS_CREATE_THREAD = {1}
		PROCESS_VM_OPERATION = {3}
		PROCESS_VM_READ = {4}
		PROCESS_VM_WRITE = {5}
		PROCESS_DUP_HANDLE = {6}
		PROCESS_CREATE_PROCESS = {7}
		PROCESS_SET_QUOTA = {8}
		PROCESS_SET_INFORMATION = {9}
		PROCESS_QUERY_INFORMATION = {10}
		PROCESS_ALL_ACCESS = {0..11, 16..20}
		MAXIMUM_PROCESSORS = 32 // {5}
		THREAD_TERMINATE = {0}
		THREAD_SUSPEND_RESUME = {1}
		THREAD_GET_CONTEXT = {3}
		THREAD_SET_CONTEXT = {4}
		THREAD_SET_INFORMATION = {5}
		THREAD_QUERY_INFORMATION = {6}
		THREAD_SET_THREAD_TOKEN = {7}
		THREAD_IMPERSONATE = {8}
		THREAD_DIRECT_IMPERSONATION = {9}
		THREAD_ALL_ACCESS = 2032639 // {0..9, 16..20}
		TLS_MINIMUM_AVAILABLE = 64 // {6}
		THREAD_BASE_PRIORITY_LOWRT = 15 // {0..3}
		THREAD_BASE_PRIORITY_MAX = 2 // {1}
		THREAD_BASE_PRIORITY_MIN = -2 // {1..31}
		THREAD_BASE_PRIORITY_IDLE = -15 // {0, 4..31}
		EVENT_MODIFY_STATE = 2 // {1}
		EVENT_ALL_ACCESS = 2031619 // {0, 1, 16..20}
		MUTANT_QUERY_STATE = 1 // {0}
		MUTANT_ALL_ACCESS = 2031617 // {0, 16..20}
		SEMAPHORE_MODIFY_STATE = 2 // {1}
		SEMAPHORE_ALL_ACCESS = 2031619 // {0, 1, 16..20}
		TIME_ZONE_ID_UNKNOWN = {}
		TIME_ZONE_ID_STANDARD = {0}
		TIME_ZONE_ID_DAYLIGHT = {1}
		PROCESSOR_INTEL_386 = 386 // {1, 7, 8}
		PROCESSOR_INTEL_486 = 486 // {1, 2, 5..8}
		PROCESSOR_INTEL_PENTIUM = 586 // {1, 3, 6, 9}
		PROCESSOR_MIPS_R4000 = 4000 // {5, 7..11}
		PROCESSOR_ALPHA_21064 = 21064 // {3, 6, 9, 12, 14}
		PROCESSOR_ARCHITECTURE_INTEL = 0 // {}
		PROCESSOR_ARCHITECTURE_MIPS = 1 // {0}
		PROCESSOR_ARCHITECTURE_ALPHA = 2 // {1}
		PROCESSOR_ARCHITECTURE_PPC = 3 // {0, 1}
		PROCESSOR_ARCHITECTURE_UNKNOWN = 65535 // {0..15}
		SECTION_QUERY = {0}
		SECTION_MAP_WRITE = {1}
		SECTION_MAP_READ = {2}
		SECTION_MAP_EXECUTE = {3}
		SECTION_EXTEND_SIZE = {4}
		SECTION_ALL_ACCESS = {0..4, 16..19}
		PAGE_NOACCESS = {0}
		PAGE_READONLY = {1}
		PAGE_READWRITE = {2}
		PAGE_WRITECOPY = {3}
		PAGE_EXECUTE = {4}
		PAGE_EXECUTE_READ = {5}
		PAGE_EXECUTE_READWRITE = {6}
		PAGE_EXECUTE_WRITECOPY = {7}
		PAGE_GUARD = {8}
		PAGE_NOCACHE = {9}
		MEM_COMMIT = {12}
		MEM_RESERVE = {13}
		MEM_DECOMMIT = {14}
		MEM_RELEASE = {15}
		MEM_FREE = {16}
		MEM_PRIVATE = {17}
		MEM_MAPPED = {18}
		MEM_RESET = {19}
		MEM_TOP_DOWN = {20}
		SEC_FILE = {23}
		SEC_IMAGE = {24}
		SEC_RESERVE = {26}
		SEC_COMMIT = {27}
		SEC_NOCACHE = {28}
		MEM_IMAGE = {24}
		FILE_READ_DATA = {0}
		FILE_LIST_DIRECTORY = {0}
		FILE_WRITE_DATA = {1}
		FILE_ADD_FILE = {1}
		FILE_APPEND_DATA = {2}
		FILE_ADD_SUBDIRECTORY = {2}
		FILE_CREATE_PIPE_INSTANCE = {2}
		FILE_READ_EA = {3}
		FILE_WRITE_EA = {4}
		FILE_EXECUTE = {5}
		FILE_TRAVERSE = {5}
		FILE_DELETE_CHILD = {6}
		FILE_READ_ATTRIBUTES = {7}
		FILE_WRITE_ATTRIBUTES = {8}
		FILE_ALL_ACCESS = {0..8, 16..20}
		FILE_GENERIC_READ = {0, 3, 7, 17, 20}
		FILE_GENERIC_WRITE = {1, 2, 4, 8, 17, 20}
		FILE_GENERIC_EXECUTE = {5, 7, 17, 20}
		FILE_SHARE_READ = {0}
		FILE_SHARE_WRITE = {1}
		FILE_SHARE_DELETE = {2}
		FILE_ATTRIBUTE_READONLY = {0}
		FILE_ATTRIBUTE_HIDDEN = {1}
		FILE_ATTRIBUTE_SYSTEM = {2}
		FILE_ATTRIBUTE_DIRECTORY = {4}
		FILE_ATTRIBUTE_ARCHIVE = {5}
		FILE_ATTRIBUTE_NORMAL = {7}
		FILE_ATTRIBUTE_TEMPORARY = {8}
		FILE_ATTRIBUTE_COMPRESSED = {11}
		FILE_NOTIFY_CHANGE_FILE_NAME = {0}
		FILE_NOTIFY_CHANGE_DIR_NAME = {1}
		FILE_NOTIFY_CHANGE_ATTRIBUTES = {2}
		FILE_NOTIFY_CHANGE_SIZE = {3}
		FILE_NOTIFY_CHANGE_LAST_WRITE = {4}
		FILE_NOTIFY_CHANGE_LAST_ACCESS = {5}
		FILE_NOTIFY_CHANGE_CREATION = {6}
		FILE_NOTIFY_CHANGE_SECURITY = {8}
		FILE_ACTION_ADDED = {0}
		FILE_ACTION_REMOVED = {1}
		FILE_ACTION_MODIFIED = {0, 1}
		FILE_ACTION_RENAMED_OLD_NAME = {2}
		FILE_ACTION_RENAMED_NEW_NAME = {0, 2}
		MAILSLOT_NO_MESSAGE = -1 // {0..31}
		MAILSLOT_WAIT_FOREVER = -1 // {0..31}
		FILE_CASE_SENSITIVE_SEARCH = {0}
		FILE_CASE_PRESERVED_NAMES = {1}
		FILE_UNICODE_ON_DISK = {2}
		FILE_PERSISTENT_ACLS = {3}
		FILE_FILE_COMPRESSION = {4}
		FILE_VOLUME_IS_COMPRESSED = {15}
		IO_COMPLETION_MODIFY_STATE = 2 // {1}
		IO_COMPLETION_ALL_ACCESS = 2031619 // {0, 1, 16..20}
		DUPLICATE_CLOSE_SOURCE = 1 // {0}
		DUPLICATE_SAME_ACCESS = 2 // {1}
		DELETE = 65536 // {16}
		READ_CONTROL = 131072 // {17}
		WRITE_DAC = 262144 // {18}
		WRITE_OWNER = 524288 // {19}
		SYNCHRONIZE = {20}
		STANDARD_RIGHTS_REQUIRED = 983040 // {16..19}
		STANDARD_RIGHTS_READ = 131072 // {17}
		STANDARD_RIGHTS_WRITE = 131072 // {17}
		STANDARD_RIGHTS_EXECUTE = 131072 // {17}
		STANDARD_RIGHTS_ALL = 2031616 // {16..20}
		SPECIFIC_RIGHTS_ALL = 65535 // {0..15}
		ACCESS_SYSTEM_SECURITY = 16777216 // {24}
		MAXIMUM_ALLOWED = 33554432 // {25}
		GENERIC_READ = {31}
		GENERIC_WRITE = {30}
		GENERIC_EXECUTE = {29}
		GENERIC_ALL = {28}
		SID_REVISION = 1 // {0}
		SID_MAX_SUB_AUTHORITIES = 15 // {0..3}
		SID_RECOMMENDED_SUB_AUTHORITIES = 1 // {0}
		SECURITY_NULL_RID = 0 // {}
		SECURITY_WORLD_RID = 0 // {}
		SECURITY_LOCAL_RID = 0 // {}
		SECURITY_CREATOR_OWNER_RID = 0 // {}
		SECURITY_CREATOR_GROUP_RID = 1 // {0}
		SECURITY_CREATOR_OWNER_SERVER_RID = 2 // {1}
		SECURITY_CREATOR_GROUP_SERVER_RID = 3 // {0, 1}
		SECURITY_DIALUP_RID = 1 // {0}
		SECURITY_NETWORK_RID = 2 // {1}
		SECURITY_BATCH_RID = 3 // {0, 1}
		SECURITY_INTERACTIVE_RID = 4 // {2}
		SECURITY_SERVICE_RID = 6 // {1, 2}
		SECURITY_ANONYMOUS_LOGON_RID = 7 // {0..2}
		SECURITY_PROXY_RID = 8 // {3}
		SECURITY_LOGON_IDS_RID = 5 // {0, 2}
		SECURITY_LOGON_IDS_RID_COUNT = 3 // {0, 1}
		SECURITY_LOCAL_SYSTEM_RID = 18 // {1, 4}
		SECURITY_NT_NON_UNIQUE = 21 // {0, 2, 4}
		SECURITY_BUILTIN_DOMAIN_RID = 32 // {5}
		DOMAIN_USER_RID_ADMIN = 500 // {2, 4..8}
		DOMAIN_USER_RID_GUEST = 501 // {0, 2, 4..8}
		DOMAIN_GROUP_RID_ADMINS = 512 // {9}
		DOMAIN_GROUP_RID_USERS = 513 // {0, 9}
		DOMAIN_GROUP_RID_GUESTS = 514 // {1, 9}
		DOMAIN_ALIAS_RID_ADMINS = 544 // {5, 9}
		DOMAIN_ALIAS_RID_USERS = 545 // {0, 5, 9}
		DOMAIN_ALIAS_RID_GUESTS = 546 // {1, 5, 9}
		DOMAIN_ALIAS_RID_POWER_USERS = 547 // {0, 1, 5, 9}
		DOMAIN_ALIAS_RID_ACCOUNT_OPS = 548 // {2, 5, 9}
		DOMAIN_ALIAS_RID_SYSTEM_OPS = 549 // {0, 2, 5, 9}
		DOMAIN_ALIAS_RID_PRINT_OPS = 550 // {1, 2, 5, 9}
		DOMAIN_ALIAS_RID_BACKUP_OPS = 551 // {0..2, 5, 9}
		DOMAIN_ALIAS_RID_REPLICATOR = 552 // {3, 5, 9}
		SE_GROUP_MANDATORY = {0}
		SE_GROUP_ENABLED_BY_DEFAULT = {1}
		SE_GROUP_ENABLED = {2}
		SE_GROUP_OWNER = {3}
		SE_GROUP_LOGON_ID = {30, 31}
		ACL_REVISION = 2 // {1}
		ACL_REVISION1 = 1 // {0}
		ACL_REVISION2 = 2 // {1}
		ACL_REVISION3 = 3 // {0, 1}
		ACCESS_ALLOWED_ACE_TYPE = 0 // {}
		ACCESS_DENIED_ACE_TYPE = 1 // {0}
		SYSTEM_AUDIT_ACE_TYPE = 2 // {1}
		SYSTEM_ALARM_ACE_TYPE = 3 // {0, 1}
		ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 4 // {2}
		OBJECT_INHERIT_ACE = 1 // {0}
		CONTAINER_INHERIT_ACE = 2 // {1}
		NO_PROPAGATE_INHERIT_ACE = 4 // {2}
		INHERIT_ONLY_ACE = 8 // {3}
		VALID_INHERIT_FLAGS = 15 // {0..3}
		SUCCESSFUL_ACCESS_ACE_FLAG = 64 // {6}
		FAILED_ACCESS_ACE_FLAG = 128 // {7}
		COMPOUND_ACE_IMPERSONATION = 1 // {0}
		SECURITY_DESCRIPTOR_REVISION = 1 // {0}
		SECURITY_DESCRIPTOR_REVISION1 = 1 // {0}
		SECURITY_DESCRIPTOR_MIN_LENGTH = 20 // {2, 4}
		SE_OWNER_DEFAULTED = 1 // {0}
		SE_GROUP_DEFAULTED = {1}
		SE_DACL_PRESENT = 4 // {2}
		SE_DACL_DEFAULTED = 8 // {3}
		SE_SACL_PRESENT = 16 // {4}
		SE_SACL_DEFAULTED = 32 // {5}
		SE_DACL_UNTRUSTED = 64 // {6}
		SE_SERVER_SECURITY = 128 // {7}
		SE_SELF_RELATIVE = 32768 // {15}
		SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1 // {0}
		SE_PRIVILEGE_ENABLED = 2 // {1}
		SE_PRIVILEGE_USED_FOR_ACCESS = 80000000h
		PRIVILEGE_SET_ALL_NECESSARY = 1 // {0}
		SE_CREATE_TOKEN_NAME = "SeCreateTokenPrivilege"
		SE_ASSIGNPRIMARYTOKEN_NAME = "SeAssignPrimaryTokenPrivilege"
		SE_LOCK_MEMORY_NAME = "SeLockMemoryPrivilege"
		SE_INCREASE_QUOTA_NAME = "SeIncreaseQuotaPrivilege"
		SE_UNSOLICITED_INPUT_NAME = "SeUnsolicitedInputPrivilege"
		SE_MACHINE_ACCOUNT_NAME = "SeMachineAccountPrivilege"
		SE_TCB_NAME = "SeTcbPrivilege"
		SE_SECURITY_NAME = "SeSecurityPrivilege"
		SE_TAKE_OWNERSHIP_NAME = "SeTakeOwnershipPrivilege"
		SE_LOAD_DRIVER_NAME = "SeLoadDriverPrivilege"
		SE_SYSTEM_PROFILE_NAME = "SeSystemProfilePrivilege"
		SE_SYSTEMTIME_NAME = "SeSystemtimePrivilege"
		SE_PROF_SINGLE_PROCESS_NAME = "SeProfileSingleProcessPrivilege"
		SE_INC_BASE_PRIORITY_NAME = "SeIncreaseBasePriorityPrivilege"
		SE_CREATE_PAGEFILE_NAME = "SeCreatePagefilePrivilege"
		SE_CREATE_PERMANENT_NAME = "SeCreatePermanentPrivilege"
		SE_BACKUP_NAME = "SeBackupPrivilege"
		SE_RESTORE_NAME = "SeRestorePrivilege"
		SE_SHUTDOWN_NAME = "SeShutdownPrivilege"
		SE_DEBUG_NAME = "SeDebugPrivilege"
		SE_AUDIT_NAME = "SeAuditPrivilege"
		SE_SYSTEM_ENVIRONMENT_NAME = "SeSystemEnvironmentPrivilege"
		SE_CHANGE_NOTIFY_NAME = "SeChangeNotifyPrivilege"
		SE_REMOTE_SHUTDOWN_NAME = "SeRemoteShutdownPrivilege"
		SECURITY_MAX_IMPERSONATION_LEVEL = 3 // {0, 1}
		DEFAULT_IMPERSONATION_LEVEL = 2 // {1}
		TOKEN_ASSIGN_PRIMARY = {0}
		TOKEN_DUPLICATE = {1}
		TOKEN_IMPERSONATE = {2}
		TOKEN_QUERY = {3}
		TOKEN_QUERY_SOURCE = {4}
		TOKEN_ADJUST_PRIVILEGES = {5}
		TOKEN_ADJUST_GROUPS = {6}
		TOKEN_ADJUST_DEFAULT = {7}
		TOKEN_ALL_ACCESS = {0..7, 16..19}
		TOKEN_READ = {3, 17}
		TOKEN_WRITE = {5..7, 17}
		TOKEN_EXECUTE = {17}
		TOKEN_SOURCE_LENGTH = {3}
		SECURITY_DYNAMIC_TRACKING = 1 // {0}
		SECURITY_STATIC_TRACKING = 0 // {}
		OWNER_SECURITY_INFORMATION = {0}
		GROUP_SECURITY_INFORMATION = {1}
		DACL_SECURITY_INFORMATION = {2}
		SACL_SECURITY_INFORMATION = {3}
		IMAGE_DOS_SIGNATURE = 23117 // {0, 2, 3, 6, 9, 11, 12, 14}
		IMAGE_OS2_SIGNATURE = 17742 // {1..3, 6, 8, 10, 14}
		IMAGE_OS2_SIGNATURE_LE = 17740 // {2, 3, 6, 8, 10, 14}
		IMAGE_VXD_SIGNATURE = 17740 // {2, 3, 6, 8, 10, 14}
		IMAGE_NT_SIGNATURE = 17744 // {4, 6, 8, 10, 14}
		IMAGE_SIZEOF_FILE_HEADER = 20 // {2, 4}
		IMAGE_FILE_RELOCS_STRIPPED = {0}
		IMAGE_FILE_EXECUTABLE_IMAGE = {1}
		IMAGE_FILE_LINE_NUMS_STRIPPED = {2}
		IMAGE_FILE_LOCAL_SYMS_STRIPPED = {3}
		IMAGE_FILE_BYTES_REVERSED_LO = {7}
		IMAGE_FILE_32BIT_MACHINE = {8}
		IMAGE_FILE_DEBUG_STRIPPED = {9}
		IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = {10}
		IMAGE_FILE_NET_RUN_FROM_SWAP = {11}
		IMAGE_FILE_SYSTEM = {12}
		IMAGE_FILE_DLL = {13}
		IMAGE_FILE_UP_SYSTEM_ONLY = {14}
		IMAGE_FILE_BYTES_REVERSED_HI = {15}
		IMAGE_FILE_MACHINE_UNKNOWN = 0 // {}
		IMAGE_FILE_MACHINE_I386 = 332 // {2, 3, 6, 8}
		IMAGE_FILE_MACHINE_R3000 = 354 // {1, 5, 6, 8}
		IMAGE_FILE_MACHINE_R4000 = 358 // {1, 2, 5, 6, 8}
		IMAGE_FILE_MACHINE_R10000 = 360 // {3, 5, 6, 8}
		IMAGE_FILE_MACHINE_ALPHA = 388 // {2, 7, 8}
		IMAGE_FILE_MACHINE_POWERPC = 496 // {4..8}
		IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16 // {4}
		IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 56 // {3..5}
		IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 28 // {2..4}
		IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 224 // {5..7}
		IMAGE_NT_OPTIONAL_HDR_MAGIC = 267 // {0, 1, 3, 8}
		IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263 // {0..2, 8}
		IMAGE_SUBSYSTEM_UNKNOWN = 0 // {}
		IMAGE_SUBSYSTEM_NATIVE = 1 // {0}
		IMAGE_SUBSYSTEM_WINDOWS_GUI = 2 // {1}
		IMAGE_SUBSYSTEM_WINDOWS_CUI = 3 // {0, 1}
		IMAGE_SUBSYSTEM_OS2_CUI = 5 // {0, 2}
		IMAGE_SUBSYSTEM_POSIX_CUI = 7 // {0..2}
		IMAGE_SUBSYSTEM_RESERVED8 = 8 // {3}
		IMAGE_DIRECTORY_ENTRY_EXPORT = 0 // {}
		IMAGE_DIRECTORY_ENTRY_IMPORT = 1 // {0}
		IMAGE_DIRECTORY_ENTRY_RESOURCE = 2 // {1}
		IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3 // {0, 1}
		IMAGE_DIRECTORY_ENTRY_SECURITY = 4 // {2}
		IMAGE_DIRECTORY_ENTRY_BASERELOC = 5 // {0, 2}
		IMAGE_DIRECTORY_ENTRY_DEBUG = 6 // {1, 2}
		IMAGE_DIRECTORY_ENTRY_COPYRIGHT = 7 // {0..2}
		IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8 // {3}
		IMAGE_DIRECTORY_ENTRY_TLS = 9 // {0, 3}
		IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10 // {1, 3}
		IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11 // {0, 1, 3}
		IMAGE_DIRECTORY_ENTRY_IAT = 12 // {2, 3}
		IMAGE_SIZEOF_SHORT_NAME = 8 // {3}
		IMAGE_SIZEOF_SECTION_HEADER = 40 // {3, 5}
		IMAGE_SCN_TYPE_NO_PAD = {3}
		IMAGE_SCN_CNT_CODE = {5}
		IMAGE_SCN_CNT_INITIALIZED_DATA = {6}
		IMAGE_SCN_CNT_UNINITIALIZED_DATA = {7}
		IMAGE_SCN_LNK_OTHER = {8}
		IMAGE_SCN_LNK_INFO = {9}
		IMAGE_SCN_LNK_REMOVE = {11}
		IMAGE_SCN_LNK_COMDAT = {12}
		IMAGE_SCN_MEM_FARDATA = {15}
		IMAGE_SCN_MEM_PURGEABLE = {17}
		IMAGE_SCN_MEM_16BIT = {17}
		IMAGE_SCN_MEM_LOCKED = {18}
		IMAGE_SCN_MEM_PRELOAD = {19}
		IMAGE_SCN_ALIGN_1BYTES = {20}
		IMAGE_SCN_ALIGN_2BYTES = {21}
		IMAGE_SCN_ALIGN_4BYTES = {20, 21}
		IMAGE_SCN_ALIGN_8BYTES = {22}
		IMAGE_SCN_ALIGN_16BYTES = {20, 22}
		IMAGE_SCN_ALIGN_32BYTES = {21, 22}
		IMAGE_SCN_ALIGN_64BYTES = {20..22}
		IMAGE_SCN_LNK_NRELOC_OVFL = {24}
		IMAGE_SCN_MEM_DISCARDABLE = {25}
		IMAGE_SCN_MEM_NOT_CACHED = {26}
		IMAGE_SCN_MEM_NOT_PAGED = {27}
		IMAGE_SCN_MEM_SHARED = {28}
		IMAGE_SCN_MEM_EXECUTE = {29}
		IMAGE_SCN_MEM_READ = {30}
		IMAGE_SCN_MEM_WRITE = {31}
		IMAGE_SIZEOF_SYMBOL = 18 // {1, 4}
		IMAGE_SYM_UNDEFINED = 0 // {}
		IMAGE_SYM_ABSOLUTE = -1 // {0..31}
		IMAGE_SYM_DEBUG = -2 // {1..31}
		IMAGE_SYM_TYPE_NULL = 0 // {}
		IMAGE_SYM_TYPE_VOID = 1 // {0}
		IMAGE_SYM_TYPE_CHAR = 2 // {1}
		IMAGE_SYM_TYPE_SHORT = 3 // {0, 1}
		IMAGE_SYM_TYPE_INT = 4 // {2}
		IMAGE_SYM_TYPE_LONG = 5 // {0, 2}
		IMAGE_SYM_TYPE_FLOAT = 6 // {1, 2}
		IMAGE_SYM_TYPE_DOUBLE = 7 // {0..2}
		IMAGE_SYM_TYPE_STRUCT = 8 // {3}
		IMAGE_SYM_TYPE_UNION = 9 // {0, 3}
		IMAGE_SYM_TYPE_ENUM = 10 // {1, 3}
		IMAGE_SYM_TYPE_MOE = 11 // {0, 1, 3}
		IMAGE_SYM_TYPE_BYTE = 12 // {2, 3}
		IMAGE_SYM_TYPE_WORD = 13 // {0, 2, 3}
		IMAGE_SYM_TYPE_UINT = 14 // {1..3}
		IMAGE_SYM_TYPE_DWORD = 15 // {0..3}
		IMAGE_SYM_TYPE_PCODE = 32768 // {15}
		IMAGE_SYM_DTYPE_NULL = 0 // {}
		IMAGE_SYM_DTYPE_POINTER = 1 // {0}
		IMAGE_SYM_DTYPE_FUNCTION = 2 // {1}
		IMAGE_SYM_DTYPE_ARRAY = 3 // {0, 1}
		IMAGE_SYM_CLASS_END_OF_FUNCTION = -1 // {0..31}
		IMAGE_SYM_CLASS_NULL = 0 // {}
		IMAGE_SYM_CLASS_AUTOMATIC = 1 // {0}
		IMAGE_SYM_CLASS_EXTERNAL = 2 // {1}
		IMAGE_SYM_CLASS_STATIC = 3 // {0, 1}
		IMAGE_SYM_CLASS_REGISTER = 4 // {2}
		IMAGE_SYM_CLASS_EXTERNAL_DEF = 5 // {0, 2}
		IMAGE_SYM_CLASS_LABEL = 6 // {1, 2}
		IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7 // {0..2}
		IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8 // {3}
		IMAGE_SYM_CLASS_ARGUMENT = 9 // {0, 3}
		IMAGE_SYM_CLASS_STRUCT_TAG = 10 // {1, 3}
		IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11 // {0, 1, 3}
		IMAGE_SYM_CLASS_UNION_TAG = 12 // {2, 3}
		IMAGE_SYM_CLASS_TYPE_DEFINITION = 13 // {0, 2, 3}
		IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14 // {1..3}
		IMAGE_SYM_CLASS_ENUM_TAG = 15 // {0..3}
		IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16 // {4}
		IMAGE_SYM_CLASS_REGISTER_PARAM = 17 // {0, 4}
		IMAGE_SYM_CLASS_BIT_FIELD = 18 // {1, 4}
		IMAGE_SYM_CLASS_FAR_EXTERNAL = 68 // {2, 6}
		IMAGE_SYM_CLASS_BLOCK = 100 // {2, 5, 6}
		IMAGE_SYM_CLASS_FUNCTION = 101 // {0, 2, 5, 6}
		IMAGE_SYM_CLASS_END_OF_STRUCT = 102 // {1, 2, 5, 6}
		IMAGE_SYM_CLASS_FILE = 103 // {0..2, 5, 6}
		IMAGE_SYM_CLASS_SECTION = 104 // {3, 5, 6}
		IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105 // {0, 3, 5, 6}
		N_BTMASK = {0..3}
		N_TMASK = {4, 5}
		N_TMASK1 = {6, 7}
		N_TMASK2 = {4..7}
		N_BTSHFT = {2}
		N_TSHIFT = {1}
		IMAGE_SIZEOF_AUX_SYMBOL = 18 // {1, 4}
		IMAGE_COMDAT_SELECT_NODUPLICATES = 1 // {0}
		IMAGE_COMDAT_SELECT_ANY = 2 // {1}
		IMAGE_COMDAT_SELECT_SAME_SIZE = 3 // {0, 1}
		IMAGE_COMDAT_SELECT_EXACT_MATCH = 4 // {2}
		IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5 // {0, 2}
		IMAGE_COMDAT_SELECT_LARGEST = 6 // {1, 2}
		IMAGE_COMDAT_SELECT_NEWEST = 7 // {0..2}
		IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1 // {0}
		IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2 // {1}
		IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3 // {0, 1}
		IMAGE_SIZEOF_RELOCATION = 10 // {1, 3}
		IMAGE_REL_I386_ABSOLUTE = 0 // {}
		IMAGE_REL_I386_DIR16 = 1 // {0}
		IMAGE_REL_I386_REL16 = 2 // {1}
		IMAGE_REL_I386_DIR32 = 6 // {1, 2}
		IMAGE_REL_I386_DIR32NB = 7 // {0..2}
		IMAGE_REL_I386_SEG12 = 9 // {0, 3}
		IMAGE_REL_I386_SECTION = 10 // {1, 3}
		IMAGE_REL_I386_SECREL = 11 // {0, 1, 3}
		IMAGE_REL_I386_REL32 = 20 // {2, 4}
		IMAGE_REL_MIPS_ABSOLUTE = 0 // {}
		IMAGE_REL_MIPS_REFHALF = 1 // {0}
		IMAGE_REL_MIPS_REFWORD = 2 // {1}
		IMAGE_REL_MIPS_JMPADDR = 3 // {0, 1}
		IMAGE_REL_MIPS_REFHI = 4 // {2}
		IMAGE_REL_MIPS_REFLO = 5 // {0, 2}
		IMAGE_REL_MIPS_GPREL = 6 // {1, 2}
		IMAGE_REL_MIPS_LITERAL = 7 // {0..2}
		IMAGE_REL_MIPS_SECTION = 10 // {1, 3}
		IMAGE_REL_MIPS_SECREL = 11 // {0, 1, 3}
		IMAGE_REL_MIPS_SECRELLO = 12 // {2, 3}
		IMAGE_REL_MIPS_SECRELHI = 13 // {0, 2, 3}
		IMAGE_REL_MIPS_REFWORDNB = 34 // {1, 5}
		IMAGE_REL_MIPS_PAIR = 37 // {0, 2, 5}
		IMAGE_REL_ALPHA_ABSOLUTE = 0 // {}
		IMAGE_REL_ALPHA_REFLONG = 1 // {0}
		IMAGE_REL_ALPHA_REFQUAD = 2 // {1}
		IMAGE_REL_ALPHA_GPREL32 = 3 // {0, 1}
		IMAGE_REL_ALPHA_LITERAL = 4 // {2}
		IMAGE_REL_ALPHA_LITUSE = 5 // {0, 2}
		IMAGE_REL_ALPHA_GPDISP = 6 // {1, 2}
		IMAGE_REL_ALPHA_BRADDR = 7 // {0..2}
		IMAGE_REL_ALPHA_HINT = 8 // {3}
		IMAGE_REL_ALPHA_INLINE_REFLONG = 9 // {0, 3}
		IMAGE_REL_ALPHA_REFHI = 10 // {1, 3}
		IMAGE_REL_ALPHA_REFLO = 11 // {0, 1, 3}
		IMAGE_REL_ALPHA_PAIR = 12 // {2, 3}
		IMAGE_REL_ALPHA_MATCH = 13 // {0, 2, 3}
		IMAGE_REL_ALPHA_SECTION = 14 // {1..3}
		IMAGE_REL_ALPHA_SECREL = 15 // {0..3}
		IMAGE_REL_ALPHA_REFLONGNB = 16 // {4}
		IMAGE_REL_ALPHA_SECRELLO = 17 // {0, 4}
		IMAGE_REL_ALPHA_SECRELHI = 18 // {1, 4}
		IMAGE_REL_PPC_ABSOLUTE = 0 // {}
		IMAGE_REL_PPC_ADDR64 = 1 // {0}
		IMAGE_REL_PPC_ADDR32 = 2 // {1}
		IMAGE_REL_PPC_ADDR24 = 3 // {0, 1}
		IMAGE_REL_PPC_ADDR16 = 4 // {2}
		IMAGE_REL_PPC_ADDR14 = 5 // {0, 2}
		IMAGE_REL_PPC_REL24 = 6 // {1, 2}
		IMAGE_REL_PPC_REL14 = 7 // {0..2}
		IMAGE_REL_PPC_TOCREL16 = 8 // {3}
		IMAGE_REL_PPC_TOCREL14 = 9 // {0, 3}
		IMAGE_REL_PPC_ADDR32NB = 10 // {1, 3}
		IMAGE_REL_PPC_SECREL = 11 // {0, 1, 3}
		IMAGE_REL_PPC_SECTION = 12 // {2, 3}
		IMAGE_REL_PPC_IFGLUE = 13 // {0, 2, 3}
		IMAGE_REL_PPC_IMGLUE = 14 // {1..3}
		IMAGE_REL_PPC_SECREL16 = 15 // {0..3}
		IMAGE_REL_PPC_REFHI = 16 // {4}
		IMAGE_REL_PPC_REFLO = 17 // {0, 4}
		IMAGE_REL_PPC_PAIR = 18 // {1, 4}
		IMAGE_REL_PPC_TYPEMASK = 255 // {0..7}
		IMAGE_REL_PPC_NEG = 256 // {8}
		IMAGE_REL_PPC_BRTAKEN = 512 // {9}
		IMAGE_REL_PPC_BRNTAKEN = 1024 // {10}
		IMAGE_REL_PPC_TOCDEFN = 2048 // {11}
		IMAGE_SIZEOF_BASE_RELOCATION = 8 // {3}
		IMAGE_REL_BASED_ABSOLUTE = 0 // {}
		IMAGE_REL_BASED_HIGH = 1 // {0}
		IMAGE_REL_BASED_LOW = 2 // {1}
		IMAGE_REL_BASED_HIGHLOW = 3 // {0, 1}
		IMAGE_REL_BASED_HIGHADJ = 4 // {2}
		IMAGE_REL_BASED_MIPS_JMPADDR = 5 // {0, 2}
		IMAGE_SIZEOF_LINENUMBER = 6 // {1, 2}
		IMAGE_ARCHIVE_START_SIZE = 8 // {3}
		IMAGE_ARCHIVE_START = "!<arch> 0AX "
		IMAGE_ARCHIVE_END = "` 0AX "
		IMAGE_ARCHIVE_PAD = " 0AX "
		IMAGE_ARCHIVE_LINKER_MEMBER = "/               "
		IMAGE_ARCHIVE_LONGNAMES_MEMBER = "//              "
		IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60 // {2..5}
		IMAGE_ORDINAL_FLAG = 80000000h
		IMAGE_RESOURCE_NAME_IS_STRING = 80000000h
		IMAGE_RESOURCE_DATA_IS_DIRECTORY = 80000000h
		IMAGE_DEBUG_TYPE_UNKNOWN = 0 // {}
		IMAGE_DEBUG_TYPE_COFF = 1 // {0}
		IMAGE_DEBUG_TYPE_CODEVIEW = 2 // {1}
		IMAGE_DEBUG_TYPE_FPO = 3 // {0, 1}
		IMAGE_DEBUG_TYPE_MISC = 4 // {2}
		IMAGE_DEBUG_TYPE_EXCEPTION = 5 // {0, 2}
		IMAGE_DEBUG_TYPE_FIXUP = 6 // {1, 2}
		IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7 // {0..2}
		IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8 // {3}
		IMAGE_DEBUG_TYPE_OMAP_MISC = 9 // {0, 3}
		FRAME_FPO = 0 // {}
		FRAME_TRAP = 1 // {0}
		FRAME_TSS = 2 // {1}
		FRAME_NONFPO = 3 // {0, 1}
		SIZEOF_RFPO_DATA = 16 // {4}
		IMAGE_DEBUG_MISC_EXENAME = 1 // {0}
		IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756 // {2, 6, 8, 11, 14}
		IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768 // {15}
		IMAGE_SEPARATE_DEBUG_MISMATCH = 32768 // {15}
		HEAP_NO_SERIALIZE = {0}
		HEAP_GROWABLE = {1}
		HEAP_GENERATE_EXCEPTIONS = {2}
		HEAP_ZERO_MEMORY = {3}
		HEAP_REALLOC_IN_PLACE_ONLY = {4}
		HEAP_TAIL_CHECKING_ENABLED = {5}
		HEAP_FREE_CHECKING_ENABLED = {6}
		HEAP_DISABLE_COALESCE_ON_FREE = {7}
		HEAP_CREATE_ALIGN_16 = {16}
		HEAP_CREATE_ENABLE_TRACING = {17}
		HEAP_MAXIMUM_TAG = {0..11}
		HEAP_PSEUDO_TAG_FLAG = {15}
		HEAP_TAG_SHIFT = {4}
		IS_TEXT_UNICODE_ASCII16 = {0}
		IS_TEXT_UNICODE_REVERSE_ASCII16 = {4}
		IS_TEXT_UNICODE_STATISTICS = {1}
		IS_TEXT_UNICODE_REVERSE_STATISTICS = {5}
		IS_TEXT_UNICODE_CONTROLS = {2}
		IS_TEXT_UNICODE_REVERSE_CONTROLS = {6}
		IS_TEXT_UNICODE_SIGNATURE = {3}
		IS_TEXT_UNICODE_REVERSE_SIGNATURE = {7}
		IS_TEXT_UNICODE_ILLEGAL_CHARS = {8}
		IS_TEXT_UNICODE_ODD_LENGTH = {9}
		IS_TEXT_UNICODE_DBCS_LEADBYTE = {10}
		IS_TEXT_UNICODE_NULL_BYTES = {12}
		IS_TEXT_UNICODE_UNICODE_MASK = {0..3}
		IS_TEXT_UNICODE_REVERSE_MASK = {4..7}
		IS_TEXT_UNICODE_NOT_UNICODE_MASK = {8..11}
		IS_TEXT_UNICODE_NOT_ASCII_MASK = {12..15}
		COMPRESSION_FORMAT_NONE = 0 // {}
		COMPRESSION_FORMAT_DEFAULT = 1 // {0}
		COMPRESSION_FORMAT_LZNT1 = 2 // {1}
		COMPRESSION_ENGINE_STANDARD = 0 // {}
		COMPRESSION_ENGINE_MAXIMUM = 256 // {8}
		MESSAGE_RESOURCE_UNICODE = 1 // {0}
		RTL_CRITSECT_TYPE = 0 // {}
		RTL_RESOURCE_TYPE = 1 // {0}
		DLL_PROCESS_ATTACH = {0}
		DLL_THREAD_ATTACH = {1}
		DLL_THREAD_DETACH = {0, 1}
		DLL_PROCESS_DETACH = {}
		EVENTLOG_SEQUENTIAL_READ = {0}
		EVENTLOG_SEEK_READ = {1}
		EVENTLOG_FORWARDS_READ = {2}
		EVENTLOG_BACKWARDS_READ = {3}
		EVENTLOG_SUCCESS = {}
		EVENTLOG_ERROR_TYPE = {0}
		EVENTLOG_WARNING_TYPE = {1}
		EVENTLOG_INFORMATION_TYPE = {2}
		EVENTLOG_AUDIT_SUCCESS = {3}
		EVENTLOG_AUDIT_FAILURE = {4}
		EVENTLOG_START_PAIRED_EVENT = {0}
		EVENTLOG_END_PAIRED_EVENT = {1}
		EVENTLOG_END_ALL_PAIRED_EVENTS = {2}
		EVENTLOG_PAIRED_EVENT_ACTIVE = {3}
		EVENTLOG_PAIRED_EVENT_INACTIVE = {4}
		DBG_CONTINUE = {1, 16}
		DBG_TERMINATE_THREAD = {0, 1, 16, 30}
		DBG_TERMINATE_PROCESS = {2, 16, 30}
		DBG_CONTROL_C = {0, 2, 16, 30}
		DBG_CONTROL_BREAK = {3, 16, 30}
		DBG_EXCEPTION_NOT_HANDLED = {0, 16, 31}
		KEY_QUERY_VALUE = {0}
		KEY_SET_VALUE = {1}
		KEY_CREATE_SUB_KEY = {2}
		KEY_ENUMERATE_SUB_KEYS = {3}
		KEY_NOTIFY = {4}
		KEY_CREATE_LINK = {5}
		KEY_READ = {0, 3, 4, 17}
		KEY_WRITE = {1, 2, 17}
		KEY_EXECUTE = {0, 3, 4, 17}
		KEY_ALL_ACCESS = {0..5, 16..19}
		REG_OPTION_RESERVED = {}
		REG_OPTION_NON_VOLATILE = {}
		REG_OPTION_VOLATILE = {0}
		REG_OPTION_CREATE_LINK = {1}
		REG_OPTION_BACKUP_RESTORE = {2}
		REG_LEGAL_OPTION = 7 // {0..2}
		REG_CREATED_NEW_KEY = 1 // {0}
		REG_OPENED_EXISTING_KEY = 2 // {1}
		REG_WHOLE_HIVE_VOLATILE = 1 // {0}
		REG_REFRESH_HIVE = 2 // {1}
		REG_NOTIFY_CHANGE_NAME = {0}
		REG_NOTIFY_CHANGE_ATTRIBUTES = {1}
		REG_NOTIFY_CHANGE_LAST_SET = {2}
		REG_NOTIFY_CHANGE_SECURITY = {3}
		REG_LEGAL_CHANGE_FILTER = {0..3}
		REG_NONE = 0 // {}
		REG_SZ = 1 // {0}
		REG_EXPAND_SZ = 2 // {1}
		REG_BINARY = 3 // {0, 1}
		REG_DWORD = 4 // {2}
		REG_DWORD_LITTLE_ENDIAN = 4 // {2}
		REG_DWORD_BIG_ENDIAN = 5 // {0, 2}
		REG_LINK = 6 // {1, 2}
		REG_MULTI_SZ = 7 // {0..2}
		REG_RESOURCE_LIST = 8 // {3}
		REG_FULL_RESOURCE_DESCRIPTOR = 9 // {0, 3}
		REG_RESOURCE_REQUIREMENTS_LIST = 10 // {1, 3}
		REG_QWORD = 11 // not supported under Windows XP; limited support  from Vista on; see http://msdn.microsoft.com/en-us/library/windows/desktop/ms724884(v=vs.85).aspx
		SERVICE_KERNEL_DRIVER = {0}
		SERVICE_FILE_SYSTEM_DRIVER = {1}
		SERVICE_ADAPTER = {2}
		SERVICE_RECOGNIZER_DRIVER = {3}
		SERVICE_DRIVER = {0, 1, 3}
		SERVICE_WIN32_OWN_PROCESS = {4}
		SERVICE_WIN32_SHARE_PROCESS = {5}
		SERVICE_WIN32 = {4, 5}
		SERVICE_INTERACTIVE_PROCESS = {8}
		SERVICE_TYPE_ALL = {0..5, 8}
		SERVICE_BOOT_START = 0 // {}
		SERVICE_SYSTEM_START = 1 // {0}
		SERVICE_AUTO_START = 2 // {1}
		SERVICE_DEMAND_START = 3 // {0, 1}
		SERVICE_DISABLED = 4 // {2}
		SERVICE_ERROR_IGNORE = 0 // {}
		SERVICE_ERROR_NORMAL = 1 // {0}
		SERVICE_ERROR_SEVERE = 2 // {1}
		SERVICE_ERROR_CRITICAL = 3 // {0, 1}
		TAPE_ERASE_SHORT = 0 // {}
		TAPE_ERASE_LONG = 1 // {0}
		TAPE_LOAD = 0 // {}
		TAPE_UNLOAD = 1 // {0}
		TAPE_TENSION = 2 // {1}
		TAPE_LOCK = 3 // {0, 1}
		TAPE_UNLOCK = 4 // {2}
		TAPE_FORMAT = 5 // {0, 2}
		TAPE_SETMARKS = 0 // {}
		TAPE_FILEMARKS = 1 // {0}
		TAPE_SHORT_FILEMARKS = 2 // {1}
		TAPE_LONG_FILEMARKS = 3 // {0, 1}
		TAPE_ABSOLUTE_POSITION = 0 // {}
		TAPE_LOGICAL_POSITION = 1 // {0}
		TAPE_PSEUDO_LOGICAL_POSITION = 2 // {1}
		TAPE_REWIND = 0 // {}
		TAPE_ABSOLUTE_BLOCK = 1 // {0}
		TAPE_LOGICAL_BLOCK = 2 // {1}
		TAPE_PSEUDO_LOGICAL_BLOCK = 3 // {0, 1}
		TAPE_SPACE_END_OF_DATA = 4 // {2}
		TAPE_SPACE_RELATIVE_BLOCKS = 5 // {0, 2}
		TAPE_SPACE_FILEMARKS = 6 // {1, 2}
		TAPE_SPACE_SEQUENTIAL_FMKS = 7 // {0..2}
		TAPE_SPACE_SETMARKS = 8 // {3}
		TAPE_SPACE_SEQUENTIAL_SMKS = 9 // {0, 3}
		TAPE_DRIVE_FIXED = {0}
		TAPE_DRIVE_SELECT = {1}
		TAPE_DRIVE_INITIATOR = {2}
		TAPE_DRIVE_ERASE_SHORT = {4}
		TAPE_DRIVE_ERASE_LONG = {5}
		TAPE_DRIVE_ERASE_BOP_ONLY = {6}
		TAPE_DRIVE_ERASE_IMMEDIATE = {7}
		TAPE_DRIVE_TAPE_CAPACITY = {8}
		TAPE_DRIVE_TAPE_REMAINING = {9}
		TAPE_DRIVE_FIXED_BLOCK = {10}
		TAPE_DRIVE_VARIABLE_BLOCK = {11}
		TAPE_DRIVE_WRITE_PROTECT = {12}
		TAPE_DRIVE_EOT_WZ_SIZE = {13}
		TAPE_DRIVE_ECC = {16}
		TAPE_DRIVE_COMPRESSION = {17}
		TAPE_DRIVE_PADDING = {18}
		TAPE_DRIVE_REPORT_SMKS = {19}
		TAPE_DRIVE_GET_ABSOLUTE_BLK = {20}
		TAPE_DRIVE_GET_LOGICAL_BLK = {21}
		TAPE_DRIVE_SET_EOT_WZ_SIZE = {22}
		TAPE_DRIVE_RESERVED_BIT = {31}
		TAPE_DRIVE_LOAD_UNLOAD = {0, 31}
		TAPE_DRIVE_TENSION = {1, 31}
		TAPE_DRIVE_LOCK_UNLOCK = {2, 31}
		TAPE_DRIVE_REWIND_IMMEDIATE = {3, 31}
		TAPE_DRIVE_SET_BLOCK_SIZE = {4, 31}
		TAPE_DRIVE_LOAD_UNLD_IMMED = {5, 31}
		TAPE_DRIVE_TENSION_IMMED = {6, 31}
		TAPE_DRIVE_LOCK_UNLK_IMMED = {7, 31}
		TAPE_DRIVE_SET_ECC = {8, 31}
		TAPE_DRIVE_SET_COMPRESSION = {9, 31}
		TAPE_DRIVE_SET_PADDING = {10, 31}
		TAPE_DRIVE_SET_REPORT_SMKS = {11, 31}
		TAPE_DRIVE_ABSOLUTE_BLK = {12, 31}
		TAPE_DRIVE_ABS_BLK_IMMED = {13, 31}
		TAPE_DRIVE_LOGICAL_BLK = {14, 31}
		TAPE_DRIVE_LOG_BLK_IMMED = {15, 31}
		TAPE_DRIVE_END_OF_DATA = {16, 31}
		TAPE_DRIVE_RELATIVE_BLKS = {17, 31}
		TAPE_DRIVE_FILEMARKS = {18, 31}
		TAPE_DRIVE_SEQUENTIAL_FMKS = {19, 31}
		TAPE_DRIVE_SETMARKS = {20, 31}
		TAPE_DRIVE_SEQUENTIAL_SMKS = {21, 31}
		TAPE_DRIVE_REVERSE_POSITION = {22, 31}
		TAPE_DRIVE_SPACE_IMMEDIATE = {23, 31}
		TAPE_DRIVE_WRITE_SETMARKS = {24, 31}
		TAPE_DRIVE_WRITE_FILEMARKS = {25, 31}
		TAPE_DRIVE_WRITE_SHORT_FMKS = {26, 31}
		TAPE_DRIVE_WRITE_LONG_FMKS = {27, 31}
		TAPE_DRIVE_WRITE_MARK_IMMED = {28, 31}
		TAPE_DRIVE_FORMAT = {29, 31}
		TAPE_DRIVE_FORMAT_IMMEDIATE = {30, 31}
		TAPE_DRIVE_HIGH_FEATURES = {31}
		TAPE_FIXED_PARTITIONS = 0 // {}
		TAPE_SELECT_PARTITIONS = 1 // {0}
		TAPE_INITIATOR_PARTITIONS = 2 // {1}
		DM_UPDATE = {0}
		DM_COPY = {1}
		DM_PROMPT = {2}
		DM_MODIFY = {3}
		DM_IN_BUFFER = {3}
		DM_IN_PROMPT = {2}
		DM_OUT_BUFFER = {1}
		DM_OUT_DEFAULT = {0}
		DC_FIELDS = 1 // {0}
		DC_PAPERS = 2 // {1}
		DC_PAPERSIZE = 3 // {0, 1}
		DC_MINEXTENT = 4 // {2}
		DC_MAXEXTENT = 5 // {0, 2}
		DC_BINS = 6 // {1, 2}
		DC_DUPLEX = 7 // {0..2}
		DC_SIZE = 8 // {3}
		DC_EXTRA = 9 // {0, 3}
		DC_VERSION = 10 // {1, 3}
		DC_DRIVER = 11 // {0, 1, 3}
		DC_BINNAMES = 12 // {2, 3}
		DC_ENUMRESOLUTIONS = 13 // {0, 2, 3}
		DC_FILEDEPENDENCIES = 14 // {1..3}
		DC_TRUETYPE = 15 // {0..3}
		DC_PAPERNAMES = 16 // {4}
		DC_ORIENTATION = 17 // {0, 4}
		DC_COPIES = 18 // {1, 4}
		INVALID_FILE_SIZE = -1 // {0..31}
		FILE_BEGIN = 0 // {}
		FILE_CURRENT = 1 // {0}
		FILE_END = 2 // {1}
		TIME_ZONE_ID_INVALID = {0..31}
		WAIT_FAILED = -1 // {0..31}
		WAIT_OBJECT_0 = 0 // {}
		WAIT_ABANDONED = 128 // {7}
		WAIT_ABANDONED_0 = 128 // {7}
		WAIT_TIMEOUT = 258 // {1, 8}
		WAIT_IO_COMPLETION = 192 // {6, 7}
		STILL_ACTIVE = 259 // {0, 1, 8}
		EXCEPTION_ACCESS_VIOLATION = -1073741819 // {0, 2, 30, 31}
		EXCEPTION_DATATYPE_MISALIGNMENT = -2147483646 // {1, 31}
		EXCEPTION_BREAKPOINT = -2147483645 // {0, 1, 31}
		EXCEPTION_SINGLE_STEP = -2147483644 // {2, 31}
		EXCEPTION_ARRAY_BOUNDS_EXCEEDED = -1073741684 // {2, 3, 7, 30, 31}
		EXCEPTION_FLT_DENORMAL_OPERAND = -1073741683 // {0, 2, 3, 7, 30, 31}
		EXCEPTION_FLT_DIVIDE_BY_ZERO = -1073741682 // {1..3, 7, 30, 31}
		EXCEPTION_FLT_INEXACT_RESULT = -1073741681 // {0..3, 7, 30, 31}
		EXCEPTION_FLT_INVALID_OPERATION = -1073741680 // {4, 7, 30, 31}
		EXCEPTION_FLT_OVERFLOW = -1073741679 // {0, 4, 7, 30, 31}
		EXCEPTION_FLT_STACK_CHECK = -1073741678 // {1, 4, 7, 30, 31}
		EXCEPTION_FLT_UNDERFLOW = -1073741677 // {0, 1, 4, 7, 30, 31}
		EXCEPTION_INT_DIVIDE_BY_ZERO = -1073741676 // {2, 4, 7, 30, 31}
		EXCEPTION_INT_OVERFLOW = -1073741675 // {0, 2, 4, 7, 30, 31}
		EXCEPTION_PRIV_INSTRUCTION = -1073741674 // {1, 2, 4, 7, 30, 31}
		EXCEPTION_IN_PAGE_ERROR = -1073741818 // {1, 2, 30, 31}
		EXCEPTION_ILLEGAL_INSTRUCTION = -1073741795 // {0, 2..4, 30, 31}
		EXCEPTION_NONCONTINUABLE_EXCEPTION = {0, 2, 5, 30, 31}
		EXCEPTION_STACK_OVERFLOW = -1073741571 // {0, 2..7, 30, 31}
		EXCEPTION_INVALID_DISPOSITION = -1073741786 // {1, 2, 5, 30, 31}
		EXCEPTION_GUARD_PAGE = -2147483647 // {0, 31}
		CONTROL_C_EXIT = -1073741510 // {1, 3..5, 8, 30, 31}
		FILE_FLAG_WRITE_THROUGH = {31}
		FILE_FLAG_OVERLAPPED = {30}
		FILE_FLAG_NO_BUFFERING = {29}
		FILE_FLAG_RANDOM_ACCESS = {28}
		FILE_FLAG_SEQUENTIAL_SCAN = {27}
		FILE_FLAG_DELETE_ON_CLOSE = {26}
		FILE_FLAG_BACKUP_SEMANTICS = {25}
		FILE_FLAG_POSIX_SEMANTICS = {24}
		CREATE_NEW = 1 // {0}
		CREATE_ALWAYS = 2 // {1}
		OPEN_EXISTING = 3 // {0, 1}
		OPEN_ALWAYS = 4 // {2}
		TRUNCATE_EXISTING = 5 // {0, 2}
		PROGRESS_CONTINUE = 0 // {}
		PROGRESS_CANCEL = 1 // {0}
		PROGRESS_STOP = 2 // {1}
		PROGRESS_QUIET = 3 // {0, 1}
		CALLBACK_CHUNK_FINISHED = 0 // {}
		CALLBACK_STREAM_SWITCH = 1 // {0}
		COPY_FILE_FAIL_IF_EXISTS = 1 // {0}
		COPY_FILE_RESTARTABLE = 2 // {1}
		PIPE_ACCESS_INBOUND = 1 // {0}
		PIPE_ACCESS_OUTBOUND = 2 // {1}
		PIPE_ACCESS_DUPLEX = 3 // {0, 1}
		PIPE_CLIENT_END = 0 // {}
		PIPE_SERVER_END = 1 // {0}
		PIPE_WAIT = 0 // {}
		PIPE_NOWAIT = 1 // {0}
		PIPE_READMODE_BYTE = 0 // {}
		PIPE_READMODE_MESSAGE = 2 // {1}
		PIPE_TYPE_BYTE = 0 // {}
		PIPE_TYPE_MESSAGE = 4 // {2}
		PIPE_UNLIMITED_INSTANCES = 255 // {0..7}
		SECURITY_ANONYMOUS = {}
		SECURITY_IDENTIFICATION = {16}
		SECURITY_IMPERSONATION = {17}
		SECURITY_DELEGATION = {16, 17}
		SECURITY_CONTEXT_TRACKING = {18}
		SECURITY_EFFECTIVE_ONLY = {19}
		SECURITY_SQOS_PRESENT = {20}
		SECURITY_VALID_SQOS_FLAGS = {16..20}
		MUTEX_MODIFY_STATE = {0}
		MUTEX_ALL_ACCESS = {0, 16..20}
		SP_SERIALCOMM = {0}
		PST_UNSPECIFIED = 0 // {}
		PST_RS232 = 1 // {0}
		PST_PARALLELPORT = 2 // {1}
		PST_RS422 = 3 // {0, 1}
		PST_RS423 = 4 // {2}
		PST_RS449 = 5 // {0, 2}
		PST_MODEM = 6 // {1, 2}
		PST_FAX = 33 // {0, 5}
		PST_SCANNER = 34 // {1, 5}
		PST_NETWORK_BRIDGE = 256 // {8}
		PST_LAT = 257 // {0, 8}
		PST_TCPIP_TELNET = 258 // {1, 8}
		PST_X25 = 259 // {0, 1, 8}
		PCF_DTRDSR = {0}
		PCF_RTSCTS = {1}
		PCF_RLSD = {2}
		PCF_PARITY_CHECK = {3}
		PCF_XONXOFF = {4}
		PCF_SETXCHAR = {5}
		PCF_TOTALTIMEOUTS = {6}
		PCF_INTTIMEOUTS = {7}
		PCF_SPECIALCHARS = {8}
		PCF_16BITMODE = {9}
		SP_PARITY = {0}
		SP_BAUD = {1}
		SP_DATABITS = {2}
		SP_STOPBITS = {3}
		SP_HANDSHAKING = {4}
		SP_PARITY_CHECK = {5}
		SP_RLSD = {6}
		BAUD_075 = {0}
		BAUD_110 = {1}
		BAUD_134_5 = {2}
		BAUD_150 = {3}
		BAUD_300 = {4}
		BAUD_600 = {5}
		BAUD_1200 = {6}
		BAUD_1800 = {7}
		BAUD_2400 = {8}
		BAUD_4800 = {9}
		BAUD_7200 = {10}
		BAUD_9600 = {11}
		BAUD_14400 = {12}
		BAUD_19200 = {13}
		BAUD_38400 = {14}
		BAUD_56K = {15}
		BAUD_128K = {16}
		BAUD_115200 = {17}
		BAUD_57600 = {18}
		BAUD_USER = {28}
		DATABITS_5 = 1 // {0}
		DATABITS_6 = 2 // {1}
		DATABITS_7 = 4 // {2}
		DATABITS_8 = 8 // {3}
		DATABITS_16 = 16 // {4}
		DATABITS_16X = 32 // {5}
		STOPBITS_10 = 1 // {0}
		STOPBITS_15 = 2 // {1}
		STOPBITS_20 = 4 // {2}
		PARITY_NONE = 256 // {8}
		PARITY_ODD = 512 // {9}
		PARITY_EVEN = 1024 // {10}
		PARITY_MARK = 2048 // {11}
		PARITY_SPACE = 4096 // {12}
		COMMPROP_INITIALIZED = -415435474 // {1..3, 5, 8, 10, 12..15, 18..21, 24..26, 29..31}
		DTR_CONTROL_DISABLE = 0 // {}
		DTR_CONTROL_ENABLE = 1 // {0}
		DTR_CONTROL_HANDSHAKE = 2 // {1}
		RTS_CONTROL_DISABLE = 0 // {}
		RTS_CONTROL_ENABLE = 1 // {0}
		RTS_CONTROL_HANDSHAKE = 2 // {1}
		RTS_CONTROL_TOGGLE = 3 // {0, 1}
		GMEM_FIXED = {}
		GMEM_MOVEABLE = {1}
		GMEM_NOCOMPACT = {4}
		GMEM_NODISCARD = {5}
		GMEM_ZEROINIT = {6}
		GMEM_MODIFY = {7}
		GMEM_DISCARDABLE = {8}
		GMEM_NOT_BANKED = {12}
		GMEM_SHARE = {13}
		GMEM_DDESHARE = {13}
		GMEM_NOTIFY = {14}
		GMEM_LOWER = {12}
		GMEM_VALID_FLAGS = {1, 4..6, 8..14}
		GMEM_INVALID_HANDLE = {15}
		GHND = {1, 6}
		GPTR = {6}
		GMEM_DISCARDED = {14}
		GMEM_LOCKCOUNT = {0..7}
		LMEM_FIXED = {}
		LMEM_MOVEABLE = {1}
		LMEM_NOCOMPACT = {4}
		LMEM_NODISCARD = {5}
		LMEM_ZEROINIT = {6}
		LMEM_MODIFY = {7}
		LMEM_DISCARDABLE = {8..11}
		LMEM_VALID_FLAGS = {1, 4..6, 8..11}
		LMEM_INVALID_HANDLE = {15}
		LHND = {1, 6}
		LPTR = {6}
		NONZEROLHND = {1}
		NONZEROLPTR = {}
		LMEM_DISCARDED = {14}
		LMEM_LOCKCOUNT = {0..7}
		DEBUG_PROCESS = {0}
		DEBUG_ONLY_THIS_PROCESS = {1}
		CREATE_SUSPENDED = {2}
		DETACHED_PROCESS = {3}
		CREATE_NEW_CONSOLE = {4}
		NORMAL_PRIORITY_CLASS = {5}
		IDLE_PRIORITY_CLASS = {6}
		HIGH_PRIORITY_CLASS = {7}
		REALTIME_PRIORITY_CLASS = {8}
		CREATE_NEW_PROCESS_GROUP = {9}
		CREATE_UNICODE_ENVIRONMENT = {10}
		CREATE_SEPARATE_WOW_VDM = {11}
		CREATE_SHARED_WOW_VDM = {12}
		CREATE_DEFAULT_ERROR_MODE = {26}
		CREATE_NO_WINDOW = {27}
		PROFILE_USER = {28}
		PROFILE_KERNEL = {29}
		PROFILE_SERVER = {30}
		THREAD_PRIORITY_LOWEST = -2 // {1..31}
		THREAD_PRIORITY_BELOW_NORMAL = -1 // {0..31}
		THREAD_PRIORITY_NORMAL = 0 // {}
		THREAD_PRIORITY_HIGHEST = 2 // {1}
		THREAD_PRIORITY_ABOVE_NORMAL = 1 // {0}
		THREAD_PRIORITY_ERROR_RETURN = 2147483647 // {0..30}
		THREAD_PRIORITY_TIME_CRITICAL = 15 // {0..3}
		THREAD_PRIORITY_IDLE = -15 // {0, 4..31}
		EXCEPTION_DEBUG_EVENT = 1 // {0}
		CREATE_THREAD_DEBUG_EVENT = 2 // {1}
		CREATE_PROCESS_DEBUG_EVENT = 3 // {0, 1}
		EXIT_THREAD_DEBUG_EVENT = 4 // {2}
		EXIT_PROCESS_DEBUG_EVENT = 5 // {0, 2}
		LOAD_DLL_DEBUG_EVENT = 6 // {1, 2}
		UNLOAD_DLL_DEBUG_EVENT = 7 // {0..2}
		OUTPUT_DEBUG_STRING_EVENT = 8 // {3}
		RIP_EVENT = 9 // {0, 3}
		DRIVE_UNKNOWN = 0 // {}
		DRIVE_NO_ROOT_DIR = 1 // {0}
		DRIVE_REMOVABLE = 2 // {1}
		DRIVE_FIXED = 3 // {0, 1}
		DRIVE_REMOTE = 4 // {2}
		DRIVE_CDROM = 5 // {0, 2}
		DRIVE_RAMDISK = 6 // {1, 2}
		FILE_TYPE_UNKNOWN = 0 // {}
		FILE_TYPE_DISK = 1 // {0}
		FILE_TYPE_CHAR = 2 // {1}
		FILE_TYPE_PIPE = 3 // {0, 1}
		FILE_TYPE_REMOTE = 32768 // {15}
		STD_INPUT_HANDLE = -10 // {1, 2, 4..31}
		STD_OUTPUT_HANDLE = -11 // {0, 2, 4..31}
		STD_ERROR_HANDLE = -12 // {2, 4..31}
		NOPARITY = 0 // {}
		ODDPARITY = 1 // {0}
		EVENPARITY = 2 // {1}
		MARKPARITY = 3 // {0, 1}
		SPACEPARITY = 4 // {2}
		ONESTOPBIT = 0 // {}
		ONE5STOPBITS = 1 // {0}
		TWOSTOPBITS = 2 // {1}
		IGNORE = 0 // {}
		INFINITE = -1 // {0..31}
		CBR_110 = 110 // {1..3, 5, 6}
		CBR_300 = 300 // {2, 3, 5, 8}
		CBR_600 = 600 // {3, 4, 6, 9}
		CBR_1200 = 1200 // {4, 5, 7, 10}
		CBR_2400 = 2400 // {5, 6, 8, 11}
		CBR_4800 = 4800 // {6, 7, 9, 12}
		CBR_9600 = 9600 // {7, 8, 10, 13}
		CBR_14400 = 14400 // {6, 11..13}
		CBR_19200 = 19200 // {8, 9, 11, 14}
		CBR_38400 = 38400 // {9, 10, 12, 15}
		CBR_56000 = 56000 // {6, 7, 9, 11, 12, 14, 15}
		CBR_57600 = 57600 // {8, 13..15}
		CBR_115200 = 115200 // {9, 14..16}
		CBR_128000 = 128000 // {10, 12..16}
		CBR_256000 = 256000 // {11, 13..17}
		CE_RXOVER = {0}
		CE_OVERRUN = {1}
		CE_RXPARITY = {2}
		CE_FRAME = {3}
		CE_BREAK = {4}
		CE_TXFULL = {8}
		CE_PTO = {9}
		CE_IOE = {10}
		CE_DNS = {11}
		CE_OOP = {12}
		CE_MODE = {15}
		IE_BADID = -1 // {0..31}
		IE_OPEN = -2 // {1..31}
		IE_NOPEN = -3 // {0, 2..31}
		IE_MEMORY = -4 // {2..31}
		IE_DEFAULT = -5 // {0, 1, 3..31}
		IE_HARDWARE = -10 // {1, 2, 4..31}
		IE_BYTESIZE = -11 // {0, 2, 4..31}
		IE_BAUDRATE = -12 // {2, 4..31}
		EV_RXCHAR = {0}
		EV_RXFLAG = {1}
		EV_TXEMPTY = {2}
		EV_CTS = {3}
		EV_DSR = {4}
		EV_RLSD = {5}
		EV_BREAK = {6}
		EV_ERR = {7}
		EV_RING = {8}
		EV_PERR = {9}
		EV_RX80FULL = {10}
		EV_EVENT1 = {11}
		EV_EVENT2 = {12}
		SETXOFF = 1 // {0}
		SETXON = 2 // {1}
		SETRTS = 3 // {0, 1}
		CLRRTS = 4 // {2}
		SETDTR = 5 // {0, 2}
		CLRDTR = 6 // {1, 2}
		RESETDEV = 7 // {0..2}
		SETBREAK = 8 // {3}
		CLRBREAK = 9 // {0, 3}
		PURGE_TXABORT = {0}
		PURGE_RXABORT = {1}
		PURGE_TXCLEAR = {2}
		PURGE_RXCLEAR = {3}
		LPTx = {7}
		MS_CTS_ON = {4}
		MS_DSR_ON = {5}
		MS_RING_ON = {6}
		MS_RLSD_ON = {7}
		S_QUEUEEMPTY = 0 // {}
		S_THRESHOLD = 1 // {0}
		S_ALLTHRESHOLD = 2 // {1}
		S_NORMAL = 0 // {}
		S_LEGATO = 1 // {0}
		S_STACCATO = 2 // {1}
		S_PERIOD512 = 0 // {}
		S_PERIOD1024 = 1 // {0}
		S_PERIOD2048 = 2 // {1}
		S_PERIODVOICE = 3 // {0, 1}
		S_WHITE512 = 4 // {2}
		S_WHITE1024 = 5 // {0, 2}
		S_WHITE2048 = 6 // {1, 2}
		S_WHITEVOICE = 7 // {0..2}
		S_SERDVNA = -1 // {0..31}
		S_SEROFM = -2 // {1..31}
		S_SERMACT = -3 // {0, 2..31}
		S_SERQFUL = -4 // {2..31}
		S_SERBDNT = -5 // {0, 1, 3..31}
		S_SERDLN = -6 // {1, 3..31}
		S_SERDCC = -7 // {0, 3..31}
		S_SERDTP = -8 // {3..31}
		S_SERDVL = -9 // {0..2, 4..31}
		S_SERDMD = -10 // {1, 2, 4..31}
		S_SERDSH = -11 // {0, 2, 4..31}
		S_SERDPT = -12 // {2, 4..31}
		S_SERDFQ = -13 // {0, 1, 4..31}
		S_SERDDR = -14 // {1, 4..31}
		S_SERDSR = -15 // {0, 4..31}
		S_SERDST = -16 // {4..31}
		NMPWAIT_WAIT_FOREVER = -1 // {0..31}
		NMPWAIT_NOWAIT = 1 // {0}
		NMPWAIT_USE_DEFAULT_WAIT = 0 // {}
		FS_CASE_IS_PRESERVED = {1}
		FS_CASE_SENSITIVE = {0}
		FS_UNICODE_STORED_ON_DISK = {2}
		FS_PERSISTENT_ACLS = {3}
		FS_VOL_IS_COMPRESSED = {15}
		FS_FILE_COMPRESSION = {4}
		FILE_MAP_COPY = {0}
		FILE_MAP_WRITE = {1}
		FILE_MAP_READ = {2}
		FILE_MAP_ALL_ACCESS = {0..4, 16..19}
		OF_READ = {}
		OF_WRITE = {0}
		OF_READWRITE = {1}
		OF_SHARE_COMPAT = {}
		OF_SHARE_EXCLUSIVE = {4}
		OF_SHARE_DENY_WRITE = {5}
		OF_SHARE_DENY_READ = {4, 5}
		OF_SHARE_DENY_NONE = {6}
		OF_PARSE = {8}
		OF_DELETE = {9}
		OF_VERIFY = {10}
		OF_CANCEL = {11}
		OF_CREATE = {12}
		OF_PROMPT = {13}
		OF_EXIST = {14}
		OF_REOPEN = {15}
		OFS_MAXPATHNAME = 128 // {7}
		MAXINTATOM = 49152 // {14, 15}
		PROCESS_HEAP_REGION = {0}
		PROCESS_HEAP_UNCOMMITTED_RANGE = {1}
		PROCESS_HEAP_ENTRY_BUSY = {2}
		PROCESS_HEAP_ENTRY_MOVEABLE = {4}
		PROCESS_HEAP_ENTRY_DDESHARE = {5}
		SCS_32BIT_BINARY = 0 // {}
		SCS_DOS_BINARY = 1 // {0}
		SCS_WOW_BINARY = 2 // {1}
		SCS_PIF_BINARY = 3 // {0, 1}
		SCS_POSIX_BINARY = 4 // {2}
		SCS_OS216_BINARY = 5 // {0, 2}
		SEM_FAILCRITICALERRORS = {0}
		SEM_NOGPFAULTERRORBOX = {1}
		SEM_NOALIGNMENTFAULTEXCEPT = {2}
		SEM_NOOPENFILEERRORBOX = {15}
		LOCKFILE_FAIL_IMMEDIATELY = {0}
		LOCKFILE_EXCLUSIVE_LOCK = {1}
		HANDLE_FLAG_INHERIT = {0}
		HANDLE_FLAG_PROTECT_FROM_CLOSE = {1}
		HINSTANCE_ERROR = 32 // {5}
		GET_TAPE_MEDIA_INFORMATION = 0 // {}
		GET_TAPE_DRIVE_INFORMATION = 1 // {0}
		SET_TAPE_MEDIA_INFORMATION = 0 // {}
		SET_TAPE_DRIVE_INFORMATION = 1 // {0}
		FORMAT_MESSAGE_ALLOCATE_BUFFER = {8}
		FORMAT_MESSAGE_IGNORE_INSERTS = {9}
		FORMAT_MESSAGE_FROM_STRING = {10}
		FORMAT_MESSAGE_FROM_HMODULE = {11}
		FORMAT_MESSAGE_FROM_SYSTEM = {12}
		FORMAT_MESSAGE_ARGUMENT_ARRAY = {13}
		FORMAT_MESSAGE_MAX_WIDTH_MASK = {0..7}
		TLS_OUT_OF_INDEXES = -1 // {0..31}
		BACKUP_INVALID = 0 // {}
		BACKUP_DATA = 1 // {0}
		BACKUP_EA_DATA = 2 // {1}
		BACKUP_SECURITY_DATA = 3 // {0, 1}
		BACKUP_ALTERNATE_DATA = 4 // {2}
		BACKUP_LINK = 5 // {0, 2}
		BACKUP_PROPERTY_DATA = 6 // {1, 2}
		STREAM_NORMAL_ATTRIBUTE = 0 // {}
		STREAM_MODIFIED_WHEN_READ = 1 // {0}
		STREAM_CONTAINS_SECURITY = 2 // {1}
		STREAM_CONTAINS_PROPERTIES = 4 // {2}
		STARTF_USESHOWWINDOW = {0}
		STARTF_USESIZE = {1}
		STARTF_USEPOSITION = {2}
		STARTF_USECOUNTCHARS = {3}
		STARTF_USEFILLATTRIBUTE = {4}
		STARTF_RUNFULLSCREEN = {5}
		STARTF_FORCEONFEEDBACK = {6}
		STARTF_FORCEOFFFEEDBACK = {7}
		STARTF_USESTDHANDLES = {8}
		STARTF_USEHOTKEY = {9}
		SHUTDOWN_NORETRY = 1 // {0}
		DONT_RESOLVE_DLL_REFERENCES = {0}
		LOAD_LIBRARY_AS_DATAFILE = {1}
		LOAD_WITH_ALTERED_SEARCH_PATH = {3}
		DDD_RAW_TARGET_PATH = {0}
		DDD_REMOVE_DEFINITION = {1}
		DDD_EXACT_MATCH_ON_REMOVE = {2}
		DDD_NO_BROADCAST_SYSTEM = {3}
		FIND_FIRST_EX_CASE_SENSITIVE = {0}
		MOVEFILE_REPLACE_EXISTING = {0}
		MOVEFILE_COPY_ALLOWED = {1}
		MOVEFILE_DELAY_UNTIL_REBOOT = {2}
		MOVEFILE_WRITE_THROUGH = {3}
		MAX_COMPUTERNAME_LENGTH = 15 // {0..3}
		LOGON32_LOGON_INTERACTIVE = 2 // {1}
		LOGON32_LOGON_BATCH = 4 // {2}
		LOGON32_LOGON_SERVICE = 5 // {0, 2}
		LOGON32_PROVIDER_DEFAULT = 0 // {}
		LOGON32_PROVIDER_WINNT35 = 1 // {0}
		LOGON32_PROVIDER_WINNT40 = 2 // {1}
		HW_PROFILE_GUIDLEN = 39 // {0..2, 5}
		MAX_PROFILE_LEN = 80 // {4, 6}
		DOCKINFO_UNDOCKED = 1 // {0}
		DOCKINFO_DOCKED = 2 // {1}
		DOCKINFO_USER_SUPPLIED = 4 // {2}
		DOCKINFO_USER_UNDOCKED = 5 // {0, 2}
		DOCKINFO_USER_DOCKED = 6 // {1, 2}
		VER_PLATFORM_WIN32s = 0 // {}
		VER_PLATFORM_WIN32_WINDOWS = 1 // {0}
		VER_PLATFORM_WIN32_NT = 2 // {1}
		FACILITY_WINDOWS = 8 // {3}
		FACILITY_STORAGE = 3 // {0, 1}
		FACILITY_RPC = 1 // {0}
		FACILITY_WIN32 = 7 // {0..2}
		FACILITY_CONTROL = 10 // {1, 3}
		FACILITY_NULL = 0 // {}
		FACILITY_ITF = 4 // {2}
		FACILITY_DISPATCH = 2 // {1}
		ERROR_SUCCESS = 0 // {}
		NO_ERROR = 0 // {}
		ERROR_INVALID_FUNCTION = 1 // {0}
		ERROR_FILE_NOT_FOUND = 2 // {1}
		ERROR_PATH_NOT_FOUND = 3 // {0, 1}
		ERROR_TOO_MANY_OPEN_FILES = 4 // {2}
		ERROR_ACCESS_DENIED = 5 // {0, 2}
		ERROR_INVALID_HANDLE = 6 // {1, 2}
		ERROR_ARENA_TRASHED = 7 // {0..2}
		ERROR_NOT_ENOUGH_MEMORY = 8 // {3}
		ERROR_INVALID_BLOCK = 9 // {0, 3}
		ERROR_BAD_ENVIRONMENT = 10 // {1, 3}
		ERROR_BAD_FORMAT = 11 // {0, 1, 3}
		ERROR_INVALID_ACCESS = 12 // {2, 3}
		ERROR_INVALID_DATA = 13 // {0, 2, 3}
		ERROR_OUTOFMEMORY = 14 // {1..3}
		ERROR_INVALID_DRIVE = 15 // {0..3}
		ERROR_CURRENT_DIRECTORY = 16 // {4}
		ERROR_NOT_SAME_DEVICE = 17 // {0, 4}
		ERROR_NO_MORE_FILES = 18 // {1, 4}
		ERROR_WRITE_PROTECT = 19 // {0, 1, 4}
		ERROR_BAD_UNIT = 20 // {2, 4}
		ERROR_NOT_READY = 21 // {0, 2, 4}
		ERROR_BAD_COMMAND = 22 // {1, 2, 4}
		ERROR_CRC = 23 // {0..2, 4}
		ERROR_BAD_LENGTH = 24 // {3, 4}
		ERROR_SEEK = 25 // {0, 3, 4}
		ERROR_NOT_DOS_DISK = 26 // {1, 3, 4}
		ERROR_SECTOR_NOT_FOUND = 27 // {0, 1, 3, 4}
		ERROR_OUT_OF_PAPER = 28 // {2..4}
		ERROR_WRITE_FAULT = 29 // {0, 2..4}
		ERROR_READ_FAULT = 30 // {1..4}
		ERROR_GEN_FAILURE = 31 // {0..4}
		ERROR_SHARING_VIOLATION = 32 // {5}
		ERROR_LOCK_VIOLATION = 33 // {0, 5}
		ERROR_WRONG_DISK = 34 // {1, 5}
		ERROR_SHARING_BUFFER_EXCEEDED = 36 // {2, 5}
		ERROR_HANDLE_EOF = 38 // {1, 2, 5}
		ERROR_HANDLE_DISK_FULL = 39 // {0..2, 5}
		ERROR_NOT_SUPPORTED = 50 // {1, 4, 5}
		ERROR_REM_NOT_LIST = 51 // {0, 1, 4, 5}
		ERROR_DUP_NAME = 52 // {2, 4, 5}
		ERROR_BAD_NETPATH = 53 // {0, 2, 4, 5}
		ERROR_NETWORK_BUSY = 54 // {1, 2, 4, 5}
		ERROR_DEV_NOT_EXIST = 55 // {0..2, 4, 5}
		ERROR_TOO_MANY_CMDS = 56 // {3..5}
		ERROR_ADAP_HDW_ERR = 57 // {0, 3..5}
		ERROR_BAD_NET_RESP = 58 // {1, 3..5}
		ERROR_UNEXP_NET_ERR = 59 // {0, 1, 3..5}
		ERROR_BAD_REM_ADAP = 60 // {2..5}
		ERROR_PRINTQ_FULL = 61 // {0, 2..5}
		ERROR_NO_SPOOL_SPACE = 62 // {1..5}
		ERROR_PRINT_CANCELLED = 63 // {0..5}
		ERROR_NETNAME_DELETED = 64 // {6}
		ERROR_NETWORK_ACCESS_DENIED = 65 // {0, 6}
		ERROR_BAD_DEV_TYPE = 66 // {1, 6}
		ERROR_BAD_NET_NAME = 67 // {0, 1, 6}
		ERROR_TOO_MANY_NAMES = 68 // {2, 6}
		ERROR_TOO_MANY_SESS = 69 // {0, 2, 6}
		ERROR_SHARING_PAUSED = 70 // {1, 2, 6}
		ERROR_REQ_NOT_ACCEP = 71 // {0..2, 6}
		ERROR_REDIR_PAUSED = 72 // {3, 6}
		ERROR_FILE_EXISTS = 80 // {4, 6}
		ERROR_CANNOT_MAKE = 82 // {1, 4, 6}
		ERROR_FAIL_I24 = 83 // {0, 1, 4, 6}
		ERROR_OUT_OF_STRUCTURES = 84 // {2, 4, 6}
		ERROR_ALREADY_ASSIGNED = 85 // {0, 2, 4, 6}
		ERROR_INVALID_PASSWORD = 86 // {1, 2, 4, 6}
		ERROR_INVALID_PARAMETER = 87 // {0..2, 4, 6}
		ERROR_NET_WRITE_FAULT = 88 // {3, 4, 6}
		ERROR_NO_PROC_SLOTS = 89 // {0, 3, 4, 6}
		ERROR_TOO_MANY_SEMAPHORES = 100 // {2, 5, 6}
		ERROR_EXCL_SEM_ALREADY_OWNED = 101 // {0, 2, 5, 6}
		ERROR_SEM_IS_SET = 102 // {1, 2, 5, 6}
		ERROR_TOO_MANY_SEM_REQUESTS = 103 // {0..2, 5, 6}
		ERROR_INVALID_AT_INTERRUPT_TIME = 104 // {3, 5, 6}
		ERROR_SEM_OWNER_DIED = 105 // {0, 3, 5, 6}
		ERROR_SEM_USER_LIMIT = 106 // {1, 3, 5, 6}
		ERROR_DISK_CHANGE = 107 // {0, 1, 3, 5, 6}
		ERROR_DRIVE_LOCKED = 108 // {2, 3, 5, 6}
		ERROR_BROKEN_PIPE = 109 // {0, 2, 3, 5, 6}
		ERROR_OPEN_FAILED = 110 // {1..3, 5, 6}
		ERROR_BUFFER_OVERFLOW = 111 // {0..3, 5, 6}
		ERROR_DISK_FULL = 112 // {4..6}
		ERROR_NO_MORE_SEARCH_HANDLES = 113 // {0, 4..6}
		ERROR_INVALID_TARGET_HANDLE = 114 // {1, 4..6}
		ERROR_INVALID_CATEGORY = 117 // {0, 2, 4..6}
		ERROR_INVALID_VERIFY_SWITCH = 118 // {1, 2, 4..6}
		ERROR_BAD_DRIVER_LEVEL = 119 // {0..2, 4..6}
		ERROR_CALL_NOT_IMPLEMENTED = 120 // {3..6}
		ERROR_SEM_TIMEOUT = 121 // {0, 3..6}
		ERROR_INSUFFICIENT_BUFFER = 122 // {1, 3..6}
		ERROR_INVALID_NAME = 123 // {0, 1, 3..6}
		ERROR_INVALID_LEVEL = 124 // {2..6}
		ERROR_NO_VOLUME_LABEL = 125 // {0, 2..6}
		ERROR_MOD_NOT_FOUND = 126 // {1..6}
		ERROR_PROC_NOT_FOUND = 127 // {0..6}
		ERROR_WAIT_NO_CHILDREN = 128 // {7}
		ERROR_CHILD_NOT_COMPLETE = 129 // {0, 7}
		ERROR_DIRECT_ACCESS_HANDLE = 130 // {1, 7}
		ERROR_NEGATIVE_SEEK = 131 // {0, 1, 7}
		ERROR_SEEK_ON_DEVICE = 132 // {2, 7}
		ERROR_IS_JOIN_TARGET = 133 // {0, 2, 7}
		ERROR_IS_JOINED = 134 // {1, 2, 7}
		ERROR_IS_SUBSTED = 135 // {0..2, 7}
		ERROR_NOT_JOINED = 136 // {3, 7}
		ERROR_NOT_SUBSTED = 137 // {0, 3, 7}
		ERROR_JOIN_TO_JOIN = 138 // {1, 3, 7}
		ERROR_SUBST_TO_SUBST = 139 // {0, 1, 3, 7}
		ERROR_JOIN_TO_SUBST = 140 // {2, 3, 7}
		ERROR_SUBST_TO_JOIN = 141 // {0, 2, 3, 7}
		ERROR_BUSY_DRIVE = 142 // {1..3, 7}
		ERROR_SAME_DRIVE = 143 // {0..3, 7}
		ERROR_DIR_NOT_ROOT = 144 // {4, 7}
		ERROR_DIR_NOT_EMPTY = 145 // {0, 4, 7}
		ERROR_IS_SUBST_PATH = 146 // {1, 4, 7}
		ERROR_IS_JOIN_PATH = 147 // {0, 1, 4, 7}
		ERROR_PATH_BUSY = 148 // {2, 4, 7}
		ERROR_IS_SUBST_TARGET = 149 // {0, 2, 4, 7}
		ERROR_SYSTEM_TRACE = 150 // {1, 2, 4, 7}
		ERROR_INVALID_EVENT_COUNT = 151 // {0..2, 4, 7}
		ERROR_TOO_MANY_MUXWAITERS = 152 // {3, 4, 7}
		ERROR_INVALID_LIST_FORMAT = 153 // {0, 3, 4, 7}
		ERROR_LABEL_TOO_LONG = 154 // {1, 3, 4, 7}
		ERROR_TOO_MANY_TCBS = 155 // {0, 1, 3, 4, 7}
		ERROR_SIGNAL_REFUSED = 156 // {2..4, 7}
		ERROR_DISCARDED = 157 // {0, 2..4, 7}
		ERROR_NOT_LOCKED = 158 // {1..4, 7}
		ERROR_BAD_THREADID_ADDR = 159 // {0..4, 7}
		ERROR_BAD_ARGUMENTS = 160 // {5, 7}
		ERROR_BAD_PATHNAME = 161 // {0, 5, 7}
		ERROR_SIGNAL_PENDING = 162 // {1, 5, 7}
		ERROR_MAX_THRDS_REACHED = 164 // {2, 5, 7}
		ERROR_LOCK_FAILED = 167 // {0..2, 5, 7}
		ERROR_BUSY = 170 // {1, 3, 5, 7}
		ERROR_CANCEL_VIOLATION = 173 // {0, 2, 3, 5, 7}
		ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174 // {1..3, 5, 7}
		ERROR_INVALID_SEGMENT_NUMBER = 180 // {2, 4, 5, 7}
		ERROR_INVALID_ORDINAL = 182 // {1, 2, 4, 5, 7}
		ERROR_ALREADY_EXISTS = 183 // {0..2, 4, 5, 7}
		ERROR_INVALID_FLAG_NUMBER = 186 // {1, 3..5, 7}
		ERROR_SEM_NOT_FOUND = 187 // {0, 1, 3..5, 7}
		ERROR_INVALID_STARTING_CODESEG = 188 // {2..5, 7}
		ERROR_INVALID_STACKSEG = 189 // {0, 2..5, 7}
		ERROR_INVALID_MODULETYPE = 190 // {1..5, 7}
		ERROR_INVALID_EXE_SIGNATURE = 191 // {0..5, 7}
		ERROR_EXE_MARKED_INVALID = 192 // {6, 7}
		ERROR_BAD_EXE_FORMAT = 193 // {0, 6, 7}
		ERROR_ITERATED_DATA_EXCEEDS_64k = 194 // {1, 6, 7}
		ERROR_INVALID_MINALLOCSIZE = 195 // {0, 1, 6, 7}
		ERROR_DYNLINK_FROM_INVALID_RING = 196 // {2, 6, 7}
		ERROR_IOPL_NOT_ENABLED = 197 // {0, 2, 6, 7}
		ERROR_INVALID_SEGDPL = 198 // {1, 2, 6, 7}
		ERROR_AUTODATASEG_EXCEEDS_64k = 199 // {0..2, 6, 7}
		ERROR_RING2SEG_MUST_BE_MOVABLE = 200 // {3, 6, 7}
		ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201 // {0, 3, 6, 7}
		ERROR_INFLOOP_IN_RELOC_CHAIN = 202 // {1, 3, 6, 7}
		ERROR_ENVVAR_NOT_FOUND = 203 // {0, 1, 3, 6, 7}
		ERROR_NO_SIGNAL_SENT = 205 // {0, 2, 3, 6, 7}
		ERROR_FILENAME_EXCED_RANGE = 206 // {1..3, 6, 7}
		ERROR_RING2_STACK_IN_USE = 207 // {0..3, 6, 7}
		ERROR_META_EXPANSION_TOO_LONG = 208 // {4, 6, 7}
		ERROR_INVALID_SIGNAL_NUMBER = 209 // {0, 4, 6, 7}
		ERROR_THREAD_1_INACTIVE = 210 // {1, 4, 6, 7}
		ERROR_LOCKED = 212 // {2, 4, 6, 7}
		ERROR_TOO_MANY_MODULES = 214 // {1, 2, 4, 6, 7}
		ERROR_NESTING_NOT_ALLOWED = 215 // {0..2, 4, 6, 7}
		ERROR_BAD_PIPE = 230 // {1, 2, 5..7}
		ERROR_PIPE_BUSY = 231 // {0..2, 5..7}
		ERROR_NO_DATA = 232 // {3, 5..7}
		ERROR_PIPE_NOT_CONNECTED = 233 // {0, 3, 5..7}
		ERROR_MORE_DATA = 234 // {1, 3, 5..7}
		ERROR_VC_DISCONNECTED = 240 // {4..7}
		ERROR_INVALID_EA_NAME = 254 // {1..7}
		ERROR_EA_LIST_INCONSISTENT = 255 // {0..7}
		ERROR_NO_MORE_ITEMS = 259 // {0, 1, 8}
		ERROR_CANNOT_COPY = 266 // {1, 3, 8}
		ERROR_DIRECTORY = 267 // {0, 1, 3, 8}
		ERROR_EAS_DIDNT_FIT = 275 // {0, 1, 4, 8}
		ERROR_EA_FILE_CORRUPT = 276 // {2, 4, 8}
		ERROR_EA_TABLE_FULL = 277 // {0, 2, 4, 8}
		ERROR_INVALID_EA_HANDLE = 278 // {1, 2, 4, 8}
		ERROR_EAS_NOT_SUPPORTED = 282 // {1, 3, 4, 8}
		ERROR_NOT_OWNER = 288 // {5, 8}
		ERROR_TOO_MANY_POSTS = 298 // {1, 3, 5, 8}
		ERROR_PARTIAL_COPY = 299 // {0, 1, 3, 5, 8}
		ERROR_MR_MID_NOT_FOUND = 317 // {0, 2..5, 8}
		ERROR_INVALID_ADDRESS = 487 // {0..2, 5..8}
		ERROR_ARITHMETIC_OVERFLOW = 534 // {1, 2, 4, 9}
		ERROR_PIPE_CONNECTED = 535 // {0..2, 4, 9}
		ERROR_PIPE_LISTENING = 536 // {3, 4, 9}
		ERROR_EA_ACCESS_DENIED = 994 // {1, 5..9}
		ERROR_OPERATION_ABORTED = 995 // {0, 1, 5..9}
		ERROR_IO_INCOMPLETE = 996 // {2, 5..9}
		ERROR_IO_PENDING = 997 // {0, 2, 5..9}
		ERROR_NOACCESS = 998 // {1, 2, 5..9}
		ERROR_SWAPERROR = 999 // {0..2, 5..9}
		ERROR_STACK_OVERFLOW = 1001 // {0, 3, 5..9}
		ERROR_INVALID_MESSAGE = 1002 // {1, 3, 5..9}
		ERROR_CAN_NOT_COMPLETE = 1003 // {0, 1, 3, 5..9}
		ERROR_INVALID_FLAGS = 1004 // {2, 3, 5..9}
		ERROR_UNRECOGNIZED_VOLUME = 1005 // {0, 2, 3, 5..9}
		ERROR_FILE_INVALID = 1006 // {1..3, 5..9}
		ERROR_FULLSCREEN_MODE = 1007 // {0..3, 5..9}
		ERROR_NO_TOKEN = 1008 // {4..9}
		ERROR_BADDB = 1009 // {0, 4..9}
		ERROR_BADKEY = 1010 // {1, 4..9}
		ERROR_CANTOPEN = 1011 // {0, 1, 4..9}
		ERROR_CANTREAD = 1012 // {2, 4..9}
		ERROR_CANTWRITE = 1013 // {0, 2, 4..9}
		ERROR_REGISTRY_RECOVERED = 1014 // {1, 2, 4..9}
		ERROR_REGISTRY_CORRUPT = 1015 // {0..2, 4..9}
		ERROR_REGISTRY_IO_FAILED = 1016 // {3..9}
		ERROR_NOT_REGISTRY_FILE = 1017 // {0, 3..9}
		ERROR_KEY_DELETED = 1018 // {1, 3..9}
		ERROR_NO_LOG_SPACE = 1019 // {0, 1, 3..9}
		ERROR_KEY_HAS_CHILDREN = 1020 // {2..9}
		ERROR_CHILD_MUST_BE_VOLATILE = 1021 // {0, 2..9}
		ERROR_NOTIFY_ENUM_DIR = 1022 // {1..9}
		ERROR_DEPENDENT_SERVICES_RUNNING = 1051 // {0, 1, 3, 4, 10}
		ERROR_INVALID_SERVICE_CONTROL = 1052 // {2..4, 10}
		ERROR_SERVICE_REQUEST_TIMEOUT = 1053 // {0, 2..4, 10}
		ERROR_SERVICE_NO_THREAD = 1054 // {1..4, 10}
		ERROR_SERVICE_DATABASE_LOCKED = 1055 // {0..4, 10}
		ERROR_SERVICE_ALREADY_RUNNING = 1056 // {5, 10}
		ERROR_INVALID_SERVICE_ACCOUNT = 1057 // {0, 5, 10}
		ERROR_SERVICE_DISABLED = 1058 // {1, 5, 10}
		ERROR_CIRCULAR_DEPENDENCY = 1059 // {0, 1, 5, 10}
		ERROR_SERVICE_DOES_NOT_EXIST = 1060 // {2, 5, 10}
		ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061 // {0, 2, 5, 10}
		ERROR_SERVICE_NOT_ACTIVE = 1062 // {1, 2, 5, 10}
		ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063 // {0..2, 5, 10}
		ERROR_EXCEPTION_IN_SERVICE = 1064 // {3, 5, 10}
		ERROR_DATABASE_DOES_NOT_EXIST = 1065 // {0, 3, 5, 10}
		ERROR_SERVICE_SPECIFIC_ERROR = 1066 // {1, 3, 5, 10}
		ERROR_PROCESS_ABORTED = 1067 // {0, 1, 3, 5, 10}
		ERROR_SERVICE_DEPENDENCY_FAIL = 1068 // {2, 3, 5, 10}
		ERROR_SERVICE_LOGON_FAILED = 1069 // {0, 2, 3, 5, 10}
		ERROR_SERVICE_START_HANG = 1070 // {1..3, 5, 10}
		ERROR_INVALID_SERVICE_LOCK = 1071 // {0..3, 5, 10}
		ERROR_SERVICE_MARKED_FOR_DELETE = 1072 // {4, 5, 10}
		ERROR_SERVICE_EXISTS = 1073 // {0, 4, 5, 10}
		ERROR_ALREADY_RUNNING_LKG = 1074 // {1, 4, 5, 10}
		ERROR_SERVICE_DEPENDENCY_DELETED = 1075 // {0, 1, 4, 5, 10}
		ERROR_BOOT_ALREADY_ACCEPTED = 1076 // {2, 4, 5, 10}
		ERROR_SERVICE_NEVER_STARTED = 1077 // {0, 2, 4, 5, 10}
		ERROR_DUPLICATE_SERVICE_NAME = 1078 // {1, 2, 4, 5, 10}
		ERROR_END_OF_MEDIA = 1100 // {2, 3, 6, 10}
		ERROR_FILEMARK_DETECTED = 1101 // {0, 2, 3, 6, 10}
		ERROR_BEGINNING_OF_MEDIA = 1102 // {1..3, 6, 10}
		ERROR_SETMARK_DETECTED = 1103 // {0..3, 6, 10}
		ERROR_NO_DATA_DETECTED = 1104 // {4, 6, 10}
		ERROR_PARTITION_FAILURE = 1105 // {0, 4, 6, 10}
		ERROR_INVALID_BLOCK_LENGTH = 1106 // {1, 4, 6, 10}
		ERROR_DEVICE_NOT_PARTITIONED = 1107 // {0, 1, 4, 6, 10}
		ERROR_UNABLE_TO_LOCK_MEDIA = 1108 // {2, 4, 6, 10}
		ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109 // {0, 2, 4, 6, 10}
		ERROR_MEDIA_CHANGED = 1110 // {1, 2, 4, 6, 10}
		ERROR_BUS_RESET = 1111 // {0..2, 4, 6, 10}
		ERROR_NO_MEDIA_IN_DRIVE = 1112 // {3, 4, 6, 10}
		ERROR_NO_UNICODE_TRANSLATION = 1113 // {0, 3, 4, 6, 10}
		ERROR_DLL_INIT_FAILED = 1114 // {1, 3, 4, 6, 10}
		ERROR_SHUTDOWN_IN_PROGRESS = 1115 // {0, 1, 3, 4, 6, 10}
		ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116 // {2..4, 6, 10}
		ERROR_IO_DEVICE = 1117 // {0, 2..4, 6, 10}
		ERROR_SERIAL_NO_DEVICE = 1118 // {1..4, 6, 10}
		ERROR_IRQ_BUSY = 1119 // {0..4, 6, 10}
		ERROR_MORE_WRITES = 1120 // {5, 6, 10}
		ERROR_COUNTER_TIMEOUT = 1121 // {0, 5, 6, 10}
		ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122 // {1, 5, 6, 10}
		ERROR_FLOPPY_WRONG_CYLINDER = 1123 // {0, 1, 5, 6, 10}
		ERROR_FLOPPY_UNKNOWN_ERROR = 1124 // {2, 5, 6, 10}
		ERROR_FLOPPY_BAD_REGISTERS = 1125 // {0, 2, 5, 6, 10}
		ERROR_DISK_RECALIBRATE_FAILED = 1126 // {1, 2, 5, 6, 10}
		ERROR_DISK_OPERATION_FAILED = 1127 // {0..2, 5, 6, 10}
		ERROR_DISK_RESET_FAILED = 1128 // {3, 5, 6, 10}
		ERROR_EOM_OVERFLOW = 1129 // {0, 3, 5, 6, 10}
		ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130 // {1, 3, 5, 6, 10}
		ERROR_POSSIBLE_DEADLOCK = 1131 // {0, 1, 3, 5, 6, 10}
		ERROR_MAPPED_ALIGNMENT = 1132 // {2, 3, 5, 6, 10}
		ERROR_SET_POWER_STATE_VETOED = 1140 // {2, 4..6, 10}
		ERROR_SET_POWER_STATE_FAILED = 1141 // {0, 2, 4..6, 10}
		ERROR_OLD_WIN_VERSION = 1150 // {1..6, 10}
		ERROR_APP_WRONG_OS = 1151 // {0..6, 10}
		ERROR_SINGLE_INSTANCE_APP = 1152 // {7, 10}
		ERROR_RMODE_APP = 1153 // {0, 7, 10}
		ERROR_INVALID_DLL = 1154 // {1, 7, 10}
		ERROR_NO_ASSOCIATION = 1155 // {0, 1, 7, 10}
		ERROR_DDE_FAIL = 1156 // {2, 7, 10}
		ERROR_DLL_NOT_FOUND = 1157 // {0, 2, 7, 10}
		ERROR_BAD_USERNAME = 2202 // {1, 3, 4, 7, 11}
		ERROR_NOT_CONNECTED = 2250 // {1, 3, 6, 7, 11}
		ERROR_OPEN_FILES = 2401 // {0, 5, 6, 8, 11}
		ERROR_ACTIVE_CONNECTIONS = 2402 // {1, 5, 6, 8, 11}
		ERROR_DEVICE_IN_USE = 2404 // {2, 5, 6, 8, 11}
		ERROR_BAD_DEVICE = 1200 // {4, 5, 7, 10}
		ERROR_CONNECTION_UNAVAIL = 1201 // {0, 4, 5, 7, 10}
		ERROR_DEVICE_ALREADY_REMEMBERED = 1202 // {1, 4, 5, 7, 10}
		ERROR_NO_NET_OR_BAD_PATH = 1203 // {0, 1, 4, 5, 7, 10}
		ERROR_BAD_PROVIDER = 1204 // {2, 4, 5, 7, 10}
		ERROR_CANNOT_OPEN_PROFILE = 1205 // {0, 2, 4, 5, 7, 10}
		ERROR_BAD_PROFILE = 1206 // {1, 2, 4, 5, 7, 10}
		ERROR_NOT_CONTAINER = 1207 // {0..2, 4, 5, 7, 10}
		ERROR_EXTENDED_ERROR = 1208 // {3..5, 7, 10}
		ERROR_INVALID_GROUPNAME = 1209 // {0, 3..5, 7, 10}
		ERROR_INVALID_COMPUTERNAME = 1210 // {1, 3..5, 7, 10}
		ERROR_INVALID_EVENTNAME = 1211 // {0, 1, 3..5, 7, 10}
		ERROR_INVALID_DOMAINNAME = 1212 // {2..5, 7, 10}
		ERROR_INVALID_SERVICENAME = 1213 // {0, 2..5, 7, 10}
		ERROR_INVALID_NETNAME = 1214 // {1..5, 7, 10}
		ERROR_INVALID_SHARENAME = 1215 // {0..5, 7, 10}
		ERROR_INVALID_PASSWORDNAME = 1216 // {6, 7, 10}
		ERROR_INVALID_MESSAGENAME = 1217 // {0, 6, 7, 10}
		ERROR_INVALID_MESSAGEDEST = 1218 // {1, 6, 7, 10}
		ERROR_SESSION_CREDENTIAL_CONFLICT = 1219 // {0, 1, 6, 7, 10}
		ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220 // {2, 6, 7, 10}
		ERROR_DUP_DOMAINNAME = 1221 // {0, 2, 6, 7, 10}
		ERROR_NO_NETWORK = 1222 // {1, 2, 6, 7, 10}
		ERROR_CANCELLED = 1223 // {0..2, 6, 7, 10}
		ERROR_USER_MAPPED_FILE = 1224 // {3, 6, 7, 10}
		ERROR_CONNECTION_REFUSED = 1225 // {0, 3, 6, 7, 10}
		ERROR_GRACEFUL_DISCONNECT = 1226 // {1, 3, 6, 7, 10}
		ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227 // {0, 1, 3, 6, 7, 10}
		ERROR_ADDRESS_NOT_ASSOCIATED = 1228 // {2, 3, 6, 7, 10}
		ERROR_CONNECTION_INVALID = 1229 // {0, 2, 3, 6, 7, 10}
		ERROR_CONNECTION_ACTIVE = 1230 // {1..3, 6, 7, 10}
		ERROR_NETWORK_UNREACHABLE = 1231 // {0..3, 6, 7, 10}
		ERROR_HOST_UNREACHABLE = 1232 // {4, 6, 7, 10}
		ERROR_PROTOCOL_UNREACHABLE = 1233 // {0, 4, 6, 7, 10}
		ERROR_PORT_UNREACHABLE = 1234 // {1, 4, 6, 7, 10}
		ERROR_REQUEST_ABORTED = 1235 // {0, 1, 4, 6, 7, 10}
		ERROR_CONNECTION_ABORTED = 1236 // {2, 4, 6, 7, 10}
		ERROR_RETRY = 1237 // {0, 2, 4, 6, 7, 10}
		ERROR_CONNECTION_COUNT_LIMIT = 1238 // {1, 2, 4, 6, 7, 10}
		ERROR_LOGIN_TIME_RESTRICTION = 1239 // {0..2, 4, 6, 7, 10}
		ERROR_LOGIN_WKSTA_RESTRICTION = 1240 // {3, 4, 6, 7, 10}
		ERROR_INCORRECT_ADDRESS = 1241 // {0, 3, 4, 6, 7, 10}
		ERROR_ALREADY_REGISTERED = 1242 // {1, 3, 4, 6, 7, 10}
		ERROR_SERVICE_NOT_FOUND = 1243 // {0, 1, 3, 4, 6, 7, 10}
		ERROR_NOT_AUTHENTICATED = 1244 // {2..4, 6, 7, 10}
		ERROR_NOT_LOGGED_ON = 1245 // {0, 2..4, 6, 7, 10}
		ERROR_CONTINUE = 1246 // {1..4, 6, 7, 10}
		ERROR_ALREADY_INITIALIZED = 1247 // {0..4, 6, 7, 10}
		ERROR_NO_MORE_DEVICES = 1248 // {5..7, 10}
		ERROR_NOT_ALL_ASSIGNED = 1300 // {2, 4, 8, 10}
		ERROR_SOME_NOT_MAPPED = 1301 // {0, 2, 4, 8, 10}
		ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302 // {1, 2, 4, 8, 10}
		ERROR_LOCAL_USER_SESSION_KEY = 1303 // {0..2, 4, 8, 10}
		ERROR_NULL_LM_PASSWORD = 1304 // {3, 4, 8, 10}
		ERROR_UNKNOWN_REVISION = 1305 // {0, 3, 4, 8, 10}
		ERROR_REVISION_MISMATCH = 1306 // {1, 3, 4, 8, 10}
		ERROR_INVALID_OWNER = 1307 // {0, 1, 3, 4, 8, 10}
		ERROR_INVALID_PRIMARY_GROUP = 1308 // {2..4, 8, 10}
		ERROR_NO_IMPERSONATION_TOKEN = 1309 // {0, 2..4, 8, 10}
		ERROR_CANT_DISABLE_MANDATORY = 1310 // {1..4, 8, 10}
		ERROR_NO_LOGON_SERVERS = 1311 // {0..4, 8, 10}
		ERROR_NO_SUCH_LOGON_SESSION = 1312 // {5, 8, 10}
		ERROR_NO_SUCH_PRIVILEGE = 1313 // {0, 5, 8, 10}
		ERROR_PRIVILEGE_NOT_HELD = 1314 // {1, 5, 8, 10}
		ERROR_INVALID_ACCOUNT_NAME = 1315 // {0, 1, 5, 8, 10}
		ERROR_USER_EXISTS = 1316 // {2, 5, 8, 10}
		ERROR_NO_SUCH_USER = 1317 // {0, 2, 5, 8, 10}
		ERROR_GROUP_EXISTS = 1318 // {1, 2, 5, 8, 10}
		ERROR_NO_SUCH_GROUP = 1319 // {0..2, 5, 8, 10}
		ERROR_MEMBER_IN_GROUP = 1320 // {3, 5, 8, 10}
		ERROR_MEMBER_NOT_IN_GROUP = 1321 // {0, 3, 5, 8, 10}
		ERROR_LAST_ADMIN = 1322 // {1, 3, 5, 8, 10}
		ERROR_WRONG_PASSWORD = 1323 // {0, 1, 3, 5, 8, 10}
		ERROR_ILL_FORMED_PASSWORD = 1324 // {2, 3, 5, 8, 10}
		ERROR_PASSWORD_RESTRICTION = 1325 // {0, 2, 3, 5, 8, 10}
		ERROR_LOGON_FAILURE = 1326 // {1..3, 5, 8, 10}
		ERROR_ACCOUNT_RESTRICTION = 1327 // {0..3, 5, 8, 10}
		ERROR_INVALID_LOGON_HOURS = 1328 // {4, 5, 8, 10}
		ERROR_INVALID_WORKSTATION = 1329 // {0, 4, 5, 8, 10}
		ERROR_PASSWORD_EXPIRED = 1330 // {1, 4, 5, 8, 10}
		ERROR_ACCOUNT_DISABLED = 1331 // {0, 1, 4, 5, 8, 10}
		ERROR_NONE_MAPPED = 1332 // {2, 4, 5, 8, 10}
		ERROR_TOO_MANY_LUIDS_REQUESTED = 1333 // {0, 2, 4, 5, 8, 10}
		ERROR_LUIDS_EXHAUSTED = 1334 // {1, 2, 4, 5, 8, 10}
		ERROR_INVALID_SUB_AUTHORITY = 1335 // {0..2, 4, 5, 8, 10}
		ERROR_INVALID_ACL = 1336 // {3..5, 8, 10}
		ERROR_INVALID_SID = 1337 // {0, 3..5, 8, 10}
		ERROR_INVALID_SECURITY_DESCR = 1338 // {1, 3..5, 8, 10}
		ERROR_BAD_INHERITANCE_ACL = 1340 // {2..5, 8, 10}
		ERROR_SERVER_DISABLED = 1341 // {0, 2..5, 8, 10}
		ERROR_SERVER_NOT_DISABLED = 1342 // {1..5, 8, 10}
		ERROR_INVALID_ID_AUTHORITY = 1343 // {0..5, 8, 10}
		ERROR_ALLOTTED_SPACE_EXCEEDED = 1344 // {6, 8, 10}
		ERROR_INVALID_GROUP_ATTRIBUTES = 1345 // {0, 6, 8, 10}
		ERROR_BAD_IMPERSONATION_LEVEL = 1346 // {1, 6, 8, 10}
		ERROR_CANT_OPEN_ANONYMOUS = 1347 // {0, 1, 6, 8, 10}
		ERROR_BAD_VALIDATION_CLASS = 1348 // {2, 6, 8, 10}
		ERROR_BAD_TOKEN_TYPE = 1349 // {0, 2, 6, 8, 10}
		ERROR_NO_SECURITY_ON_OBJECT = 1350 // {1, 2, 6, 8, 10}
		ERROR_CANT_ACCESS_DOMAIN_INFO = 1351 // {0..2, 6, 8, 10}
		ERROR_INVALID_SERVER_STATE = 1352 // {3, 6, 8, 10}
		ERROR_INVALID_DOMAIN_STATE = 1353 // {0, 3, 6, 8, 10}
		ERROR_INVALID_DOMAIN_ROLE = 1354 // {1, 3, 6, 8, 10}
		ERROR_NO_SUCH_DOMAIN = 1355 // {0, 1, 3, 6, 8, 10}
		ERROR_DOMAIN_EXISTS = 1356 // {2, 3, 6, 8, 10}
		ERROR_DOMAIN_LIMIT_EXCEEDED = 1357 // {0, 2, 3, 6, 8, 10}
		ERROR_INTERNAL_DB_CORRUPTION = 1358 // {1..3, 6, 8, 10}
		ERROR_INTERNAL_ERROR = 1359 // {0..3, 6, 8, 10}
		ERROR_GENERIC_NOT_MAPPED = 1360 // {4, 6, 8, 10}
		ERROR_BAD_DESCRIPTOR_FORMAT = 1361 // {0, 4, 6, 8, 10}
		ERROR_NOT_LOGON_PROCESS = 1362 // {1, 4, 6, 8, 10}
		ERROR_LOGON_SESSION_EXISTS = 1363 // {0, 1, 4, 6, 8, 10}
		ERROR_NO_SUCH_PACKAGE = 1364 // {2, 4, 6, 8, 10}
		ERROR_BAD_LOGON_SESSION_STATE = 1365 // {0, 2, 4, 6, 8, 10}
		ERROR_LOGON_SESSION_COLLISION = 1366 // {1, 2, 4, 6, 8, 10}
		ERROR_INVALID_LOGON_TYPE = 1367 // {0..2, 4, 6, 8, 10}
		ERROR_CANNOT_IMPERSONATE = 1368 // {3, 4, 6, 8, 10}
		ERROR_RXACT_INVALID_STATE = 1369 // {0, 3, 4, 6, 8, 10}
		ERROR_RXACT_COMMIT_FAILURE = 1370 // {1, 3, 4, 6, 8, 10}
		ERROR_SPECIAL_ACCOUNT = 1371 // {0, 1, 3, 4, 6, 8, 10}
		ERROR_SPECIAL_GROUP = 1372 // {2..4, 6, 8, 10}
		ERROR_SPECIAL_USER = 1373 // {0, 2..4, 6, 8, 10}
		ERROR_MEMBERS_PRIMARY_GROUP = 1374 // {1..4, 6, 8, 10}
		ERROR_TOKEN_ALREADY_IN_USE = 1375 // {0..4, 6, 8, 10}
		ERROR_NO_SUCH_ALIAS = 1376 // {5, 6, 8, 10}
		ERROR_MEMBER_NOT_IN_ALIAS = 1377 // {0, 5, 6, 8, 10}
		ERROR_MEMBER_IN_ALIAS = 1378 // {1, 5, 6, 8, 10}
		ERROR_ALIAS_EXISTS = 1379 // {0, 1, 5, 6, 8, 10}
		ERROR_LOGON_NOT_GRANTED = 1380 // {2, 5, 6, 8, 10}
		ERROR_TOO_MANY_SECRETS = 1381 // {0, 2, 5, 6, 8, 10}
		ERROR_SECRET_TOO_LONG = 1382 // {1, 2, 5, 6, 8, 10}
		ERROR_INTERNAL_DB_ERROR = 1383 // {0..2, 5, 6, 8, 10}
		ERROR_TOO_MANY_CONTEXT_IDS = 1384 // {3, 5, 6, 8, 10}
		ERROR_LOGON_TYPE_NOT_GRANTED = 1385 // {0, 3, 5, 6, 8, 10}
		ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386 // {1, 3, 5, 6, 8, 10}
		ERROR_NO_SUCH_MEMBER = 1387 // {0, 1, 3, 5, 6, 8, 10}
		ERROR_INVALID_MEMBER = 1388 // {2, 3, 5, 6, 8, 10}
		ERROR_TOO_MANY_SIDS = 1389 // {0, 2, 3, 5, 6, 8, 10}
		ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390 // {1..3, 5, 6, 8, 10}
		ERROR_NO_INHERITANCE = 1391 // {0..3, 5, 6, 8, 10}
		ERROR_FILE_CORRUPT = 1392 // {4..6, 8, 10}
		ERROR_DISK_CORRUPT = 1393 // {0, 4..6, 8, 10}
		ERROR_NO_USER_SESSION_KEY = 1394 // {1, 4..6, 8, 10}
		ERROR_LICENSE_QUOTA_EXCEEDED = 1395 // {0, 1, 4..6, 8, 10}
		ERROR_INVALID_WINDOW_HANDLE = 1400 // {3..6, 8, 10}
		ERROR_INVALID_MENU_HANDLE = 1401 // {0, 3..6, 8, 10}
		ERROR_INVALID_CURSOR_HANDLE = 1402 // {1, 3..6, 8, 10}
		ERROR_INVALID_ACCEL_HANDLE = 1403 // {0, 1, 3..6, 8, 10}
		ERROR_INVALID_HOOK_HANDLE = 1404 // {2..6, 8, 10}
		ERROR_INVALID_DWP_HANDLE = 1405 // {0, 2..6, 8, 10}
		ERROR_TLW_WITH_WSCHILD = 1406 // {1..6, 8, 10}
		ERROR_CANNOT_FIND_WND_CLASS = 1407 // {0..6, 8, 10}
		ERROR_WINDOW_OF_OTHER_THREAD = 1408 // {7, 8, 10}
		ERROR_HOTKEY_ALREADY_REGISTERED = 1409 // {0, 7, 8, 10}
		ERROR_CLASS_ALREADY_EXISTS = 1410 // {1, 7, 8, 10}
		ERROR_CLASS_DOES_NOT_EXIST = 1411 // {0, 1, 7, 8, 10}
		ERROR_CLASS_HAS_WINDOWS = 1412 // {2, 7, 8, 10}
		ERROR_INVALID_INDEX = 1413 // {0, 2, 7, 8, 10}
		ERROR_INVALID_ICON_HANDLE = 1414 // {1, 2, 7, 8, 10}
		ERROR_PRIVATE_DIALOG_INDEX = 1415 // {0..2, 7, 8, 10}
		ERROR_LISTBOX_ID_NOT_FOUND = 1416 // {3, 7, 8, 10}
		ERROR_NO_WILDCARD_CHARACTERS = 1417 // {0, 3, 7, 8, 10}
		ERROR_CLIPBOARD_NOT_OPEN = 1418 // {1, 3, 7, 8, 10}
		ERROR_HOTKEY_NOT_REGISTERED = 1419 // {0, 1, 3, 7, 8, 10}
		ERROR_WINDOW_NOT_DIALOG = 1420 // {2, 3, 7, 8, 10}
		ERROR_CONTROL_ID_NOT_FOUND = 1421 // {0, 2, 3, 7, 8, 10}
		ERROR_INVALID_COMBOBOX_MESSAGE = 1422 // {1..3, 7, 8, 10}
		ERROR_WINDOW_NOT_COMBOBOX = 1423 // {0..3, 7, 8, 10}
		ERROR_INVALID_EDIT_HEIGHT = 1424 // {4, 7, 8, 10}
		ERROR_DC_NOT_FOUND = 1425 // {0, 4, 7, 8, 10}
		ERROR_INVALID_HOOK_FILTER = 1426 // {1, 4, 7, 8, 10}
		ERROR_INVALID_FILTER_PROC = 1427 // {0, 1, 4, 7, 8, 10}
		ERROR_HOOK_NEEDS_HMOD = 1428 // {2, 4, 7, 8, 10}
		ERROR_GLOBAL_ONLY_HOOK = 1429 // {0, 2, 4, 7, 8, 10}
		ERROR_JOURNAL_HOOK_SET = 1430 // {1, 2, 4, 7, 8, 10}
		ERROR_HOOK_NOT_INSTALLED = 1431 // {0..2, 4, 7, 8, 10}
		ERROR_INVALID_LB_MESSAGE = 1432 // {3, 4, 7, 8, 10}
		ERROR_SETCOUNT_ON_BAD_LB = 1433 // {0, 3, 4, 7, 8, 10}
		ERROR_LB_WITHOUT_TABSTOPS = 1434 // {1, 3, 4, 7, 8, 10}
		ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435 // {0, 1, 3, 4, 7, 8, 10}
		ERROR_CHILD_WINDOW_MENU = 1436 // {2..4, 7, 8, 10}
		ERROR_NO_SYSTEM_MENU = 1437 // {0, 2..4, 7, 8, 10}
		ERROR_INVALID_MSGBOX_STYLE = 1438 // {1..4, 7, 8, 10}
		ERROR_INVALID_SPI_VALUE = 1439 // {0..4, 7, 8, 10}
		ERROR_SCREEN_ALREADY_LOCKED = 1440 // {5, 7, 8, 10}
		ERROR_HWNDS_HAVE_DIFF_PARENT = 1441 // {0, 5, 7, 8, 10}
		ERROR_NOT_CHILD_WINDOW = 1442 // {1, 5, 7, 8, 10}
		ERROR_INVALID_GW_COMMAND = 1443 // {0, 1, 5, 7, 8, 10}
		ERROR_INVALID_THREAD_ID = 1444 // {2, 5, 7, 8, 10}
		ERROR_NON_MDICHILD_WINDOW = 1445 // {0, 2, 5, 7, 8, 10}
		ERROR_POPUP_ALREADY_ACTIVE = 1446 // {1, 2, 5, 7, 8, 10}
		ERROR_NO_SCROLLBARS = 1447 // {0..2, 5, 7, 8, 10}
		ERROR_INVALID_SCROLLBAR_RANGE = 1448 // {3, 5, 7, 8, 10}
		ERROR_INVALID_SHOWWIN_COMMAND = 1449 // {0, 3, 5, 7, 8, 10}
		ERROR_NO_SYSTEM_RESOURCES = 1450 // {1, 3, 5, 7, 8, 10}
		ERROR_NONPAGED_SYSTEM_RESOURCES = 1451 // {0, 1, 3, 5, 7, 8, 10}
		ERROR_PAGED_SYSTEM_RESOURCES = 1452 // {2, 3, 5, 7, 8, 10}
		ERROR_WORKING_SET_QUOTA = 1453 // {0, 2, 3, 5, 7, 8, 10}
		ERROR_PAGEFILE_QUOTA = 1454 // {1..3, 5, 7, 8, 10}
		ERROR_COMMITMENT_LIMIT = 1455 // {0..3, 5, 7, 8, 10}
		ERROR_MENU_ITEM_NOT_FOUND = 1456 // {4, 5, 7, 8, 10}
		ERROR_EVENTLOG_FILE_CORRUPT = 1500 // {2..4, 6..8, 10}
		ERROR_EVENTLOG_CANT_START = 1501 // {0, 2..4, 6..8, 10}
		ERROR_LOG_FILE_FULL = 1502 // {1..4, 6..8, 10}
		ERROR_EVENTLOG_FILE_CHANGED = 1503 // {0..4, 6..8, 10}
		RPC_S_INVALID_STRING_BINDING = 1700 // {2, 5, 7, 9, 10}
		RPC_S_WRONG_KIND_OF_BINDING = 1701 // {0, 2, 5, 7, 9, 10}
		RPC_S_INVALID_BINDING = 1702 // {1, 2, 5, 7, 9, 10}
		RPC_S_PROTSEQ_NOT_SUPPORTED = 1703 // {0..2, 5, 7, 9, 10}
		RPC_S_INVALID_RPC_PROTSEQ = 1704 // {3, 5, 7, 9, 10}
		RPC_S_INVALID_STRING_UUID = 1705 // {0, 3, 5, 7, 9, 10}
		RPC_S_INVALID_ENDPOINT_FORMAT = 1706 // {1, 3, 5, 7, 9, 10}
		RPC_S_INVALID_NET_ADDR = 1707 // {0, 1, 3, 5, 7, 9, 10}
		RPC_S_NO_ENDPOINT_FOUND = 1708 // {2, 3, 5, 7, 9, 10}
		RPC_S_INVALID_TIMEOUT = 1709 // {0, 2, 3, 5, 7, 9, 10}
		RPC_S_OBJECT_NOT_FOUND = 1710 // {1..3, 5, 7, 9, 10}
		RPC_S_ALREADY_REGISTERED = 1711 // {0..3, 5, 7, 9, 10}
		RPC_S_TYPE_ALREADY_REGISTERED = 1712 // {4, 5, 7, 9, 10}
		RPC_S_ALREADY_LISTENING = 1713 // {0, 4, 5, 7, 9, 10}
		RPC_S_NO_PROTSEQS_REGISTERED = 1714 // {1, 4, 5, 7, 9, 10}
		RPC_S_NOT_LISTENING = 1715 // {0, 1, 4, 5, 7, 9, 10}
		RPC_S_UNKNOWN_MGR_TYPE = 1716 // {2, 4, 5, 7, 9, 10}
		RPC_S_UNKNOWN_IF = 1717 // {0, 2, 4, 5, 7, 9, 10}
		RPC_S_NO_BINDINGS = 1718 // {1, 2, 4, 5, 7, 9, 10}
		RPC_S_NO_PROTSEQS = 1719 // {0..2, 4, 5, 7, 9, 10}
		RPC_S_CANT_CREATE_ENDPOINT = 1720 // {3..5, 7, 9, 10}
		RPC_S_OUT_OF_RESOURCES = 1721 // {0, 3..5, 7, 9, 10}
		RPC_S_SERVER_UNAVAILABLE = 1722 // {1, 3..5, 7, 9, 10}
		RPC_S_SERVER_TOO_BUSY = 1723 // {0, 1, 3..5, 7, 9, 10}
		RPC_S_INVALID_NETWORK_OPTIONS = 1724 // {2..5, 7, 9, 10}
		RPC_S_NO_CALL_ACTIVE = 1725 // {0, 2..5, 7, 9, 10}
		RPC_S_CALL_FAILED = 1726 // {1..5, 7, 9, 10}
		RPC_S_CALL_FAILED_DNE = 1727 // {0..5, 7, 9, 10}
		RPC_S_PROTOCOL_ERROR = 1728 // {6, 7, 9, 10}
		RPC_S_UNSUPPORTED_TRANS_SYN = 1730 // {1, 6, 7, 9, 10}
		RPC_S_UNSUPPORTED_TYPE = 1732 // {2, 6, 7, 9, 10}
		RPC_S_INVALID_TAG = 1733 // {0, 2, 6, 7, 9, 10}
		RPC_S_INVALID_BOUND = 1734 // {1, 2, 6, 7, 9, 10}
		RPC_S_NO_ENTRY_NAME = 1735 // {0..2, 6, 7, 9, 10}
		RPC_S_INVALID_NAME_SYNTAX = 1736 // {3, 6, 7, 9, 10}
		RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737 // {0, 3, 6, 7, 9, 10}
		RPC_S_UUID_NO_ADDRESS = 1739 // {0, 1, 3, 6, 7, 9, 10}
		RPC_S_DUPLICATE_ENDPOINT = 1740 // {2, 3, 6, 7, 9, 10}
		RPC_S_UNKNOWN_AUTHN_TYPE = 1741 // {0, 2, 3, 6, 7, 9, 10}
		RPC_S_MAX_CALLS_TOO_SMALL = 1742 // {1..3, 6, 7, 9, 10}
		RPC_S_STRING_TOO_LONG = 1743 // {0..3, 6, 7, 9, 10}
		RPC_S_PROTSEQ_NOT_FOUND = 1744 // {4, 6, 7, 9, 10}
		RPC_S_PROCNUM_OUT_OF_RANGE = 1745 // {0, 4, 6, 7, 9, 10}
		RPC_S_BINDING_HAS_NO_AUTH = 1746 // {1, 4, 6, 7, 9, 10}
		RPC_S_UNKNOWN_AUTHN_SERVICE = 1747 // {0, 1, 4, 6, 7, 9, 10}
		RPC_S_UNKNOWN_AUTHN_LEVEL = 1748 // {2, 4, 6, 7, 9, 10}
		RPC_S_INVALID_AUTH_IDENTITY = 1749 // {0, 2, 4, 6, 7, 9, 10}
		RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750 // {1, 2, 4, 6, 7, 9, 10}
		EPT_S_INVALID_ENTRY = 1751 // {0..2, 4, 6, 7, 9, 10}
		EPT_S_CANT_PERFORM_OP = 1752 // {3, 4, 6, 7, 9, 10}
		EPT_S_NOT_REGISTERED = 1753 // {0, 3, 4, 6, 7, 9, 10}
		RPC_S_NOTHING_TO_EXPORT = 1754 // {1, 3, 4, 6, 7, 9, 10}
		RPC_S_INCOMPLETE_NAME = 1755 // {0, 1, 3, 4, 6, 7, 9, 10}
		RPC_S_INVALID_VERS_OPTION = 1756 // {2..4, 6, 7, 9, 10}
		RPC_S_NO_MORE_MEMBERS = 1757 // {0, 2..4, 6, 7, 9, 10}
		RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758 // {1..4, 6, 7, 9, 10}
		RPC_S_INTERFACE_NOT_FOUND = 1759 // {0..4, 6, 7, 9, 10}
		RPC_S_ENTRY_ALREADY_EXISTS = 1760 // {5..7, 9, 10}
		RPC_S_ENTRY_NOT_FOUND = 1761 // {0, 5..7, 9, 10}
		RPC_S_NAME_SERVICE_UNAVAILABLE = 1762 // {1, 5..7, 9, 10}
		RPC_S_INVALID_NAF_ID = 1763 // {0, 1, 5..7, 9, 10}
		RPC_S_CANNOT_SUPPORT = 1764 // {2, 5..7, 9, 10}
		RPC_S_NO_CONTEXT_AVAILABLE = 1765 // {0, 2, 5..7, 9, 10}
		RPC_S_INTERNAL_ERROR = 1766 // {1, 2, 5..7, 9, 10}
		RPC_S_ZERO_DIVIDE = 1767 // {0..2, 5..7, 9, 10}
		RPC_S_ADDRESS_ERROR = 1768 // {3, 5..7, 9, 10}
		RPC_S_FP_DIV_ZERO = 1769 // {0, 3, 5..7, 9, 10}
		RPC_S_FP_UNDERFLOW = 1770 // {1, 3, 5..7, 9, 10}
		RPC_S_FP_OVERFLOW = 1771 // {0, 1, 3, 5..7, 9, 10}
		RPC_X_NO_MORE_ENTRIES = 1772 // {2, 3, 5..7, 9, 10}
		RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773 // {0, 2, 3, 5..7, 9, 10}
		RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774 // {1..3, 5..7, 9, 10}
		RPC_X_SS_IN_NULL_CONTEXT = 1775 // {0..3, 5..7, 9, 10}
		RPC_X_SS_CONTEXT_DAMAGED = 1777 // {0, 4..7, 9, 10}
		RPC_X_SS_HANDLES_MISMATCH = 1778 // {1, 4..7, 9, 10}
		RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779 // {0, 1, 4..7, 9, 10}
		RPC_X_NULL_REF_POINTER = 1780 // {2, 4..7, 9, 10}
		RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781 // {0, 2, 4..7, 9, 10}
		RPC_X_BYTE_COUNT_TOO_SMALL = 1782 // {1, 2, 4..7, 9, 10}
		RPC_X_BAD_STUB_DATA = 1783 // {0..2, 4..7, 9, 10}
		ERROR_INVALID_USER_BUFFER = 1784 // {3..7, 9, 10}
		ERROR_UNRECOGNIZED_MEDIA = 1785 // {0, 3..7, 9, 10}
		ERROR_NO_TRUST_LSA_SECRET = 1786 // {1, 3..7, 9, 10}
		ERROR_NO_TRUST_SAM_ACCOUNT = 1787 // {0, 1, 3..7, 9, 10}
		ERROR_TRUSTED_DOMAIN_FAILURE = 1788 // {2..7, 9, 10}
		ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789 // {0, 2..7, 9, 10}
		ERROR_TRUST_FAILURE = 1790 // {1..7, 9, 10}
		RPC_S_CALL_IN_PROGRESS = 1791 // {0..7, 9, 10}
		ERROR_NETLOGON_NOT_STARTED = 1792 // {8..10}
		ERROR_ACCOUNT_EXPIRED = 1793 // {0, 8..10}
		ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794 // {1, 8..10}
		ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795 // {0, 1, 8..10}
		ERROR_UNKNOWN_PORT = 1796 // {2, 8..10}
		ERROR_UNKNOWN_PRINTER_DRIVER = 1797 // {0, 2, 8..10}
		ERROR_UNKNOWN_PRINTPROCESSOR = 1798 // {1, 2, 8..10}
		ERROR_INVALID_SEPARATOR_FILE = 1799 // {0..2, 8..10}
		ERROR_INVALID_PRIORITY = 1800 // {3, 8..10}
		ERROR_INVALID_PRINTER_NAME = 1801 // {0, 3, 8..10}
		ERROR_PRINTER_ALREADY_EXISTS = 1802 // {1, 3, 8..10}
		ERROR_INVALID_PRINTER_COMMAND = 1803 // {0, 1, 3, 8..10}
		ERROR_INVALID_DATATYPE = 1804 // {2, 3, 8..10}
		ERROR_INVALID_ENVIRONMENT = 1805 // {0, 2, 3, 8..10}
		RPC_S_NO_MORE_BINDINGS = 1806 // {1..3, 8..10}
		ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807 // {0..3, 8..10}
		ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808 // {4, 8..10}
		ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809 // {0, 4, 8..10}
		ERROR_DOMAIN_TRUST_INCONSISTENT = 1810 // {1, 4, 8..10}
		ERROR_SERVER_HAS_OPEN_HANDLES = 1811 // {0, 1, 4, 8..10}
		ERROR_RESOURCE_DATA_NOT_FOUND = 1812 // {2, 4, 8..10}
		ERROR_RESOURCE_TYPE_NOT_FOUND = 1813 // {0, 2, 4, 8..10}
		ERROR_RESOURCE_NAME_NOT_FOUND = 1814 // {1, 2, 4, 8..10}
		ERROR_RESOURCE_LANG_NOT_FOUND = 1815 // {0..2, 4, 8..10}
		ERROR_NOT_ENOUGH_QUOTA = 1816 // {3, 4, 8..10}
		RPC_S_NO_INTERFACES = 1817 // {0, 3, 4, 8..10}
		RPC_S_CALL_CANCELLED = 1818 // {1, 3, 4, 8..10}
		RPC_S_BINDING_INCOMPLETE = 1819 // {0, 1, 3, 4, 8..10}
		RPC_S_COMM_FAILURE = 1820 // {2..4, 8..10}
		RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821 // {0, 2..4, 8..10}
		RPC_S_NO_PRINC_NAME = 1822 // {1..4, 8..10}
		RPC_S_NOT_RPC_ERROR = 1823 // {0..4, 8..10}
		RPC_S_UUID_LOCAL_ONLY = 1824 // {5, 8..10}
		RPC_S_SEC_PKG_ERROR = 1825 // {0, 5, 8..10}
		RPC_S_NOT_CANCELLED = 1826 // {1, 5, 8..10}
		RPC_X_INVALID_ES_ACTION = 1827 // {0, 1, 5, 8..10}
		RPC_X_WRONG_ES_VERSION = 1828 // {2, 5, 8..10}
		RPC_X_WRONG_STUB_VERSION = 1829 // {0, 2, 5, 8..10}
		RPC_S_GROUP_MEMBER_NOT_FOUND = 1898 // {1, 3, 5, 6, 8..10}
		EPT_S_CANT_CREATE = 1899 // {0, 1, 3, 5, 6, 8..10}
		RPC_S_INVALID_OBJECT = 1900 // {2, 3, 5, 6, 8..10}
		ERROR_INVALID_TIME = 1901 // {0, 2, 3, 5, 6, 8..10}
		ERROR_INVALID_FORM_NAME = 1902 // {1..3, 5, 6, 8..10}
		ERROR_INVALID_FORM_SIZE = 1903 // {0..3, 5, 6, 8..10}
		ERROR_ALREADY_WAITING = 1904 // {4..6, 8..10}
		ERROR_PRINTER_DELETED = 1905 // {0, 4..6, 8..10}
		ERROR_INVALID_PRINTER_STATE = 1906 // {1, 4..6, 8..10}
		ERROR_PASSWORD_MUST_CHANGE = 1907 // {0, 1, 4..6, 8..10}
		ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908 // {2, 4..6, 8..10}
		ERROR_ACCOUNT_LOCKED_OUT = 1909 // {0, 2, 4..6, 8..10}
		ERROR_NO_BROWSER_SERVERS_FOUND = 6118 // {1, 2, 5..10, 12}
		ERROR_INVALID_PIXEL_FORMAT = 2000 // {4, 6..10}
		ERROR_BAD_DRIVER = 2001 // {0, 4, 6..10}
		ERROR_INVALID_WINDOW_STYLE = 2002 // {1, 4, 6..10}
		ERROR_METAFILE_NOT_SUPPORTED = 2003 // {0, 1, 4, 6..10}
		ERROR_TRANSFORM_NOT_SUPPORTED = 2004 // {2, 4, 6..10}
		ERROR_CLIPPING_NOT_SUPPORTED = 2005 // {0, 2, 4, 6..10}
		ERROR_UNKNOWN_PRINT_MONITOR = 3000 // {3..5, 7..9, 11}
		ERROR_PRINTER_DRIVER_IN_USE = 3001 // {0, 3..5, 7..9, 11}
		ERROR_SPOOL_FILE_NOT_FOUND = 3002 // {1, 3..5, 7..9, 11}
		ERROR_SPL_NO_STARTDOC = 3003 // {0, 1, 3..5, 7..9, 11}
		ERROR_SPL_NO_ADDJOB = 3004 // {2..5, 7..9, 11}
		ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005 // {0, 2..5, 7..9, 11}
		ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006 // {1..5, 7..9, 11}
		ERROR_WINS_INTERNAL = 4000 // {5, 7..11}
		ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001 // {0, 5, 7..11}
		ERROR_STATIC_INIT = 4002 // {1, 5, 7..11}
		ERROR_INC_BACKUP = 4003 // {0, 1, 5, 7..11}
		ERROR_FULL_BACKUP = 4004 // {2, 5, 7..11}
		ERROR_REC_NON_EXISTENT = 4005 // {0, 2, 5, 7..11}
		ERROR_RPL_NOT_ALLOWED = 4006 // {1, 2, 5, 7..11}
		SEVERITY_SUCCESS = 0 // {}
		SEVERITY_ERROR = 1 // {0}
		FACILITY_NT_BIT = 268435456 // {28}
		NOERROR = 0 // {}
		E_UNEXPECTED = -2147418113 // {0..15, 31}
		E_NOTIMPL = -2147467263 // {0, 14, 31}
		E_OUTOFMEMORY = -2147024882 // {1..3, 16..18, 31}
		E_INVALIDARG = -2147024809 // {0..2, 4, 6, 16..18, 31}
		E_NOINTERFACE = -2147467262 // {1, 14, 31}
		E_POINTER = -2147467261 // {0, 1, 14, 31}
		E_HANDLE = -2147024890 // {1, 2, 16..18, 31}
		E_ABORT = -2147467260 // {2, 14, 31}
		E_FAIL = -2147467259 // {0, 2, 14, 31}
		E_ACCESSDENIED = -2147024891 // {0, 2, 16..18, 31}
		E_PENDING = -2147024889 // {0..2, 16..18, 31}
		CO_E_INIT_TLS = -2147467258 // {1, 2, 14, 31}
		CO_E_INIT_SHARED_ALLOCATOR = -2147467257 // {0..2, 14, 31}
		CO_E_INIT_MEMORY_ALLOCATOR = -2147467256 // {3, 14, 31}
		CO_E_INIT_CLASS_CACHE = -2147467255 // {0, 3, 14, 31}
		CO_E_INIT_RPC_CHANNEL = -2147467254 // {1, 3, 14, 31}
		CO_E_INIT_TLS_SET_CHANNEL_CONTROL = -2147467253 // {0, 1, 3, 14, 31}
		CO_E_INIT_TLS_CHANNEL_CONTROL = -2147467252 // {2, 3, 14, 31}
		CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = -2147467251 // {0, 2, 3, 14, 31}
		CO_E_INIT_SCM_MUTEX_EXISTS = -2147467250 // {1..3, 14, 31}
		CO_E_INIT_SCM_FILE_MAPPING_EXISTS = -2147467249 // {0..3, 14, 31}
		CO_E_INIT_SCM_MAP_VIEW_OF_FILE = -2147467248 // {4, 14, 31}
		CO_E_INIT_SCM_EXEC_FAILURE = -2147467247 // {0, 4, 14, 31}
		CO_E_INIT_ONLY_SINGLE_THREADED = -2147467246 // {1, 4, 14, 31}
		S_OK = 0 // {}
		S_FALSE = 1 // {0}
		OLE_E_FIRST = -2147221504 // {18, 31}
		OLE_E_LAST = -2147221249 // {0..7, 18, 31}
		OLE_S_FIRST = 262144 // {18}
		OLE_S_LAST = 262399 // {0..7, 18}
		OLE_E_OLEVERB = -2147221504 // {18, 31}
		OLE_E_ADVF = -2147221503 // {0, 18, 31}
		OLE_E_ENUM_NOMORE = -2147221502 // {1, 18, 31}
		OLE_E_ADVISENOTSUPPORTED = -2147221501 // {0, 1, 18, 31}
		OLE_E_NOCONNECTION = -2147221500 // {2, 18, 31}
		OLE_E_NOTRUNNING = -2147221499 // {0, 2, 18, 31}
		OLE_E_NOCACHE = -2147221498 // {1, 2, 18, 31}
		OLE_E_BLANK = -2147221497 // {0..2, 18, 31}
		OLE_E_CLASSDIFF = -2147221496 // {3, 18, 31}
		OLE_E_CANT_GETMONIKER = -2147221495 // {0, 3, 18, 31}
		OLE_E_CANT_BINDTOSOURCE = -2147221494 // {1, 3, 18, 31}
		OLE_E_STATIC = -2147221493 // {0, 1, 3, 18, 31}
		OLE_E_PROMPTSAVECANCELLED = -2147221492 // {2, 3, 18, 31}
		OLE_E_INVALIDRECT = -2147221491 // {0, 2, 3, 18, 31}
		OLE_E_WRONGCOMPOBJ = -2147221490 // {1..3, 18, 31}
		OLE_E_INVALIDHWND = -2147221489 // {0..3, 18, 31}
		OLE_E_NOT_INPLACEACTIVE = -2147221488 // {4, 18, 31}
		OLE_E_CANTCONVERT = -2147221487 // {0, 4, 18, 31}
		OLE_E_NOSTORAGE = -2147221486 // {1, 4, 18, 31}
		DV_E_FORMATETC = -2147221404 // {2, 5, 6, 18, 31}
		DV_E_DVTARGETDEVICE = -2147221403 // {0, 2, 5, 6, 18, 31}
		DV_E_STGMEDIUM = -2147221402 // {1, 2, 5, 6, 18, 31}
		DV_E_STATDATA = -2147221401 // {0..2, 5, 6, 18, 31}
		DV_E_LINDEX = -2147221400 // {3, 5, 6, 18, 31}
		DV_E_TYMED = -2147221399 // {0, 3, 5, 6, 18, 31}
		DV_E_CLIPFORMAT = -2147221398 // {1, 3, 5, 6, 18, 31}
		DV_E_DVASPECT = -2147221397 // {0, 1, 3, 5, 6, 18, 31}
		DV_E_DVTARGETDEVICE_SIZE = -2147221396 // {2, 3, 5, 6, 18, 31}
		DV_E_NOIVIEWOBJECT = -2147221395 // {0, 2, 3, 5, 6, 18, 31}
		DRAGDROP_E_FIRST = -2147221248 // {8, 18, 31}
		DRAGDROP_E_LAST = -2147221233 // {0..3, 8, 18, 31}
		DRAGDROP_S_FIRST = 262400 // {8, 18}
		DRAGDROP_S_LAST = 262415 // {0..3, 8, 18}
		DRAGDROP_E_NOTREGISTERED = -2147221248 // {8, 18, 31}
		DRAGDROP_E_ALREADYREGISTERED = -2147221247 // {0, 8, 18, 31}
		DRAGDROP_E_INVALIDHWND = -2147221246 // {1, 8, 18, 31}
		CLASSFACTORY_E_FIRST = -2147221232 // {4, 8, 18, 31}
		CLASSFACTORY_E_LAST = -2147221217 // {0..4, 8, 18, 31}
		CLASSFACTORY_S_FIRST = 262416 // {4, 8, 18}
		CLASSFACTORY_S_LAST = 262431 // {0..4, 8, 18}
		CLASS_E_NOAGGREGATION = -2147221232 // {4, 8, 18, 31}
		CLASS_E_CLASSNOTAVAILABLE = -2147221231 // {0, 4, 8, 18, 31}
		MARSHAL_E_FIRST = -2147221216 // {5, 8, 18, 31}
		MARSHAL_E_LAST = -2147221201 // {0..3, 5, 8, 18, 31}
		MARSHAL_S_FIRST = 262432 // {5, 8, 18}
		MARSHAL_S_LAST = 262447 // {0..3, 5, 8, 18}
		DATA_E_FIRST = -2147221200 // {4, 5, 8, 18, 31}
		DATA_E_LAST = -2147221185 // {0..5, 8, 18, 31}
		DATA_S_FIRST = 262448 // {4, 5, 8, 18}
		DATA_S_LAST = 262463 // {0..5, 8, 18}
		VIEW_E_FIRST = -2147221184 // {6, 8, 18, 31}
		VIEW_E_LAST = -2147221169 // {0..3, 6, 8, 18, 31}
		VIEW_S_FIRST = 262464 // {6, 8, 18}
		VIEW_S_LAST = 262479 // {0..3, 6, 8, 18}
		VIEW_E_DRAW = -2147221184 // {6, 8, 18, 31}
		REGDB_E_FIRST = -2147221168 // {4, 6, 8, 18, 31}
		REGDB_E_LAST = -2147221153 // {0..4, 6, 8, 18, 31}
		REGDB_S_FIRST = 262480 // {4, 6, 8, 18}
		REGDB_S_LAST = 262495 // {0..4, 6, 8, 18}
		REGDB_E_READREGDB = -2147221168 // {4, 6, 8, 18, 31}
		REGDB_E_WRITEREGDB = -2147221167 // {0, 4, 6, 8, 18, 31}
		REGDB_E_KEYMISSING = -2147221166 // {1, 4, 6, 8, 18, 31}
		REGDB_E_INVALIDVALUE = -2147221165 // {0, 1, 4, 6, 8, 18, 31}
		REGDB_E_CLASSNOTREG = -2147221164 // {2, 4, 6, 8, 18, 31}
		REGDB_E_IIDNOTREG = -2147221163 // {0, 2, 4, 6, 8, 18, 31}
		CACHE_E_FIRST = -2147221136 // {4..6, 8, 18, 31}
		CACHE_E_LAST = -2147221121 // {0..6, 8, 18, 31}
		CACHE_S_FIRST = 262512 // {4..6, 8, 18}
		CACHE_S_LAST = 262527 // {0..6, 8, 18}
		CACHE_E_NOCACHE_UPDATED = -2147221136 // {4..6, 8, 18, 31}
		OLEOBJ_E_FIRST = -2147221120 // {7, 8, 18, 31}
		OLEOBJ_E_LAST = -2147221105 // {0..3, 7, 8, 18, 31}
		OLEOBJ_S_FIRST = 262528 // {7, 8, 18}
		OLEOBJ_S_LAST = 262543 // {0..3, 7, 8, 18}
		OLEOBJ_E_NOVERBS = -2147221120 // {7, 8, 18, 31}
		OLEOBJ_E_INVALIDVERB = -2147221119 // {0, 7, 8, 18, 31}
		CLIENTSITE_E_FIRST = -2147221104 // {4, 7, 8, 18, 31}
		CLIENTSITE_E_LAST = -2147221089 // {0..4, 7, 8, 18, 31}
		CLIENTSITE_S_FIRST = 262544 // {4, 7, 8, 18}
		CLIENTSITE_S_LAST = 262559 // {0..4, 7, 8, 18}
		INPLACE_E_NOTUNDOABLE = -2147221088 // {5, 7, 8, 18, 31}
		INPLACE_E_NOTOOLSPACE = -2147221087 // {0, 5, 7, 8, 18, 31}
		INPLACE_E_FIRST = -2147221088 // {5, 7, 8, 18, 31}
		INPLACE_E_LAST = -2147221073 // {0..3, 5, 7, 8, 18, 31}
		INPLACE_S_FIRST = 262560 // {5, 7, 8, 18}
		INPLACE_S_LAST = 262575 // {0..3, 5, 7, 8, 18}
		ENUM_E_FIRST = -2147221072 // {4, 5, 7, 8, 18, 31}
		ENUM_E_LAST = -2147221057 // {0..5, 7, 8, 18, 31}
		ENUM_S_FIRST = 262576 // {4, 5, 7, 8, 18}
		ENUM_S_LAST = 262591 // {0..5, 7, 8, 18}
		CONVERT10_E_FIRST = -2147221056 // {6..8, 18, 31}
		CONVERT10_E_LAST = -2147221041 // {0..3, 6..8, 18, 31}
		CONVERT10_S_FIRST = 262592 // {6..8, 18}
		CONVERT10_S_LAST = 262607 // {0..3, 6..8, 18}
		CONVERT10_E_OLESTREAM_GET = -2147221056 // {6..8, 18, 31}
		CONVERT10_E_OLESTREAM_PUT = -2147221055 // {0, 6..8, 18, 31}
		CONVERT10_E_OLESTREAM_FMT = -2147221054 // {1, 6..8, 18, 31}
		CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = -2147221053 // {0, 1, 6..8, 18, 31}
		CONVERT10_E_STG_FMT = -2147221052 // {2, 6..8, 18, 31}
		CONVERT10_E_STG_NO_STD_STREAM = -2147221051 // {0, 2, 6..8, 18, 31}
		CONVERT10_E_STG_DIB_TO_BITMAP = -2147221050 // {1, 2, 6..8, 18, 31}
		CLIPBRD_E_FIRST = -2147221040 // {4, 6..8, 18, 31}
		CLIPBRD_E_LAST = -2147221025 // {0..4, 6..8, 18, 31}
		CLIPBRD_S_FIRST = 262608 // {4, 6..8, 18}
		CLIPBRD_S_LAST = 262623 // {0..4, 6..8, 18}
		CLIPBRD_E_CANT_OPEN = -2147221040 // {4, 6..8, 18, 31}
		CLIPBRD_E_CANT_EMPTY = -2147221039 // {0, 4, 6..8, 18, 31}
		CLIPBRD_E_CANT_SET = -2147221038 // {1, 4, 6..8, 18, 31}
		CLIPBRD_E_BAD_DATA = -2147221037 // {0, 1, 4, 6..8, 18, 31}
		CLIPBRD_E_CANT_CLOSE = -2147221036 // {2, 4, 6..8, 18, 31}
		MK_E_FIRST = -2147221024 // {5..8, 18, 31}
		MK_E_LAST = -2147221009 // {0..3, 5..8, 18, 31}
		MK_S_FIRST = 262624 // {5..8, 18}
		MK_S_LAST = 262639 // {0..3, 5..8, 18}
		MK_E_CONNECTMANUALLY = -2147221024 // {5..8, 18, 31}
		MK_E_EXCEEDEDDEADLINE = -2147221023 // {0, 5..8, 18, 31}
		MK_E_NEEDGENERIC = -2147221022 // {1, 5..8, 18, 31}
		MK_E_UNAVAILABLE = -2147221021 // {0, 1, 5..8, 18, 31}
		MK_E_SYNTAX = -2147221020 // {2, 5..8, 18, 31}
		MK_E_NOOBJECT = -2147221019 // {0, 2, 5..8, 18, 31}
		MK_E_INVALIDEXTENSION = -2147221018 // {1, 2, 5..8, 18, 31}
		MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = -2147221017 // {0..2, 5..8, 18, 31}
		MK_E_NOTBINDABLE = -2147221016 // {3, 5..8, 18, 31}
		MK_E_NOTBOUND = -2147221015 // {0, 3, 5..8, 18, 31}
		MK_E_CANTOPENFILE = -2147221014 // {1, 3, 5..8, 18, 31}
		MK_E_MUSTBOTHERUSER = -2147221013 // {0, 1, 3, 5..8, 18, 31}
		MK_E_NOINVERSE = -2147221012 // {2, 3, 5..8, 18, 31}
		MK_E_NOSTORAGE = -2147221011 // {0, 2, 3, 5..8, 18, 31}
		MK_E_NOPREFIX = -2147221010 // {1..3, 5..8, 18, 31}
		MK_E_ENUMERATION_FAILED = -2147221009 // {0..3, 5..8, 18, 31}
		CO_E_FIRST = -2147221008 // {4..8, 18, 31}
		CO_E_LAST = -2147220993 // {0..8, 18, 31}
		CO_S_FIRST = 262640 // {4..8, 18}
		CO_S_LAST = 262655 // {0..8, 18}
		CO_E_NOTINITIALIZED = -2147221008 // {4..8, 18, 31}
		CO_E_ALREADYINITIALIZED = -2147221007 // {0, 4..8, 18, 31}
		CO_E_CANTDETERMINECLASS = -2147221006 // {1, 4..8, 18, 31}
		CO_E_CLASSSTRING = -2147221005 // {0, 1, 4..8, 18, 31}
		CO_E_IIDSTRING = -2147221004 // {2, 4..8, 18, 31}
		CO_E_APPNOTFOUND = -2147221003 // {0, 2, 4..8, 18, 31}
		CO_E_APPSINGLEUSE = -2147221002 // {1, 2, 4..8, 18, 31}
		CO_E_ERRORINAPP = -2147221001 // {0..2, 4..8, 18, 31}
		CO_E_DLLNOTFOUND = -2147221000 // {3..8, 18, 31}
		CO_E_ERRORINDLL = -2147220999 // {0, 3..8, 18, 31}
		CO_E_WRONGOSFORAPP = -2147220998 // {1, 3..8, 18, 31}
		CO_E_OBJNOTREG = -2147220997 // {0, 1, 3..8, 18, 31}
		CO_E_OBJISREG = -2147220996 // {2..8, 18, 31}
		CO_E_OBJNOTCONNECTED = -2147220995 // {0, 2..8, 18, 31}
		CO_E_APPDIDNTREG = -2147220994 // {1..8, 18, 31}
		CO_E_RELEASED = -2147220993 // {0..8, 18, 31}
		OLE_S_USEREG = 262144 // {18}
		OLE_S_STATIC = 262145 // {0, 18}
		OLE_S_MAC_CLIPFORMAT = 262146 // {1, 18}
		DRAGDROP_S_DROP = 262400 // {8, 18}
		DRAGDROP_S_CANCEL = 262401 // {0, 8, 18}
		DRAGDROP_S_USEDEFAULTCURSORS = 262402 // {1, 8, 18}
		DATA_S_SAMEFORMATETC = 262448 // {4, 5, 8, 18}
		VIEW_S_ALREADY_FROZEN = 262464 // {6, 8, 18}
		CACHE_S_FORMATETC_NOTSUPPORTED = 262512 // {4..6, 8, 18}
		CACHE_S_SAMECACHE = 262513 // {0, 4..6, 8, 18}
		CACHE_S_SOMECACHES_NOTUPDATED = 262514 // {1, 4..6, 8, 18}
		OLEOBJ_S_INVALIDVERB = 262528 // {7, 8, 18}
		OLEOBJ_S_CANNOT_DOVERB_NOW = 262529 // {0, 7, 8, 18}
		OLEOBJ_S_INVALIDHWND = 262530 // {1, 7, 8, 18}
		INPLACE_S_TRUNCATED = 262560 // {5, 7, 8, 18}
		CONVERT10_S_NO_PRESENTATION = 262592 // {6..8, 18}
		MK_S_REDUCED_TO_SELF = 262626 // {1, 5..8, 18}
		MK_S_ME = 262628 // {2, 5..8, 18}
		MK_S_HIM = 262629 // {0, 2, 5..8, 18}
		MK_S_US = 262630 // {1, 2, 5..8, 18}
		MK_S_MONIKERALREADYREGISTERED = 262631 // {0..2, 5..8, 18}
		CO_E_CLASS_CREATE_FAILED = -2146959359 // {0, 19, 31}
		CO_E_SCM_ERROR = -2146959358 // {1, 19, 31}
		CO_E_SCM_RPC_FAILURE = -2146959357 // {0, 1, 19, 31}
		CO_E_BAD_PATH = -2146959356 // {2, 19, 31}
		CO_E_SERVER_EXEC_FAILURE = -2146959355 // {0, 2, 19, 31}
		CO_E_OBJSRV_RPC_FAILURE = -2146959354 // {1, 2, 19, 31}
		MK_E_NO_NORMALIZED = -2146959353 // {0..2, 19, 31}
		CO_E_SERVER_STOPPING = -2146959352 // {3, 19, 31}
		MEM_E_INVALID_ROOT = -2146959351 // {0, 3, 19, 31}
		MEM_E_INVALID_LINK = -2146959344 // {4, 19, 31}
		MEM_E_INVALID_SIZE = -2146959343 // {0, 4, 19, 31}
		DISP_E_UNKNOWNINTERFACE = -2147352575 // {0, 17, 31}
		DISP_E_MEMBERNOTFOUND = -2147352573 // {0, 1, 17, 31}
		DISP_E_PARAMNOTFOUND = -2147352572 // {2, 17, 31}
		DISP_E_TYPEMISMATCH = -2147352571 // {0, 2, 17, 31}
		DISP_E_UNKNOWNNAME = -2147352570 // {1, 2, 17, 31}
		DISP_E_NONAMEDARGS = -2147352569 // {0..2, 17, 31}
		DISP_E_BADVARTYPE = -2147352568 // {3, 17, 31}
		DISP_E_EXCEPTION = -2147352567 // {0, 3, 17, 31}
		DISP_E_OVERFLOW = -2147352566 // {1, 3, 17, 31}
		DISP_E_BADINDEX = -2147352565 // {0, 1, 3, 17, 31}
		DISP_E_UNKNOWNLCID = -2147352564 // {2, 3, 17, 31}
		DISP_E_ARRAYISLOCKED = -2147352563 // {0, 2, 3, 17, 31}
		DISP_E_BADPARAMCOUNT = -2147352562 // {1..3, 17, 31}
		DISP_E_PARAMNOTOPTIONAL = -2147352561 // {0..3, 17, 31}
		DISP_E_BADCALLEE = -2147352560 // {4, 17, 31}
		DISP_E_NOTACOLLECTION = -2147352559 // {0, 4, 17, 31}
		TYPE_E_BUFFERTOOSMALL = -2147319786 // {1, 2, 4, 15, 17, 31}
		TYPE_E_INVDATAREAD = -2147319784 // {3, 4, 15, 17, 31}
		TYPE_E_UNSUPFORMAT = -2147319783 // {0, 3, 4, 15, 17, 31}
		TYPE_E_REGISTRYACCESS = -2147319780 // {2..4, 15, 17, 31}
		TYPE_E_LIBNOTREGISTERED = -2147319779 // {0, 2..4, 15, 17, 31}
		TYPE_E_UNDEFINEDTYPE = -2147319769 // {0..2, 5, 15, 17, 31}
		TYPE_E_QUALIFIEDNAMEDISALLOWED = -2147319768 // {3, 5, 15, 17, 31}
		TYPE_E_INVALIDSTATE = -2147319767 // {0, 3, 5, 15, 17, 31}
		TYPE_E_WRONGTYPEKIND = -2147319766 // {1, 3, 5, 15, 17, 31}
		TYPE_E_ELEMENTNOTFOUND = -2147319765 // {0, 1, 3, 5, 15, 17, 31}
		TYPE_E_AMBIGUOUSNAME = -2147319764 // {2, 3, 5, 15, 17, 31}
		TYPE_E_NAMECONFLICT = -2147319763 // {0, 2, 3, 5, 15, 17, 31}
		TYPE_E_UNKNOWNLCID = -2147319762 // {1..3, 5, 15, 17, 31}
		TYPE_E_DLLFUNCTIONNOTFOUND = -2147319761 // {0..3, 5, 15, 17, 31}
		TYPE_E_BADMODULEKIND = -2147317571 // {0, 2..5, 7, 11, 15, 17, 31}
		TYPE_E_SIZETOOBIG = -2147317563 // {0, 2, 6, 7, 11, 15, 17, 31}
		TYPE_E_DUPLICATEID = -2147317562 // {1, 2, 6, 7, 11, 15, 17, 31}
		TYPE_E_INVALIDID = -2147317553 // {0..3, 6, 7, 11, 15, 17, 31}
		TYPE_E_TYPEMISMATCH = -2147316576 // {5, 7, 10, 11, 15, 17, 31}
		TYPE_E_OUTOFBOUNDS = -2147316575 // {0, 5, 7, 10, 11, 15, 17, 31}
		TYPE_E_IOERROR = -2147316574 // {1, 5, 7, 10, 11, 15, 17, 31}
		TYPE_E_CANTCREATETMPFILE = -2147316573 // {0, 1, 5, 7, 10, 11, 15, 17, 31}
		TYPE_E_CANTLOADLIBRARY = -2147312566 // {1, 3, 6, 10..12, 15, 17, 31}
		TYPE_E_INCONSISTENTPROPFUNCS = -2147312509 // {0, 1, 7, 10..12, 15, 17, 31}
		TYPE_E_CIRCULARTYPE = -2147312508 // {2, 7, 10..12, 15, 17, 31}
		STG_E_INVALIDFUNCTION = -2147287039 // {0, 16, 17, 31}
		STG_E_FILENOTFOUND = -2147287038 // {1, 16, 17, 31}
		STG_E_PATHNOTFOUND = -2147287037 // {0, 1, 16, 17, 31}
		STG_E_TOOMANYOPENFILES = -2147287036 // {2, 16, 17, 31}
		STG_E_ACCESSDENIED = -2147287035 // {0, 2, 16, 17, 31}
		STG_E_INVALIDHANDLE = -2147287034 // {1, 2, 16, 17, 31}
		STG_E_INSUFFICIENTMEMORY = -2147287032 // {3, 16, 17, 31}
		STG_E_INVALIDPOINTER = -2147287031 // {0, 3, 16, 17, 31}
		STG_E_NOMOREFILES = -2147287022 // {1, 4, 16, 17, 31}
		STG_E_DISKISWRITEPROTECTED = -2147287021 // {0, 1, 4, 16, 17, 31}
		STG_E_SEEKERROR = -2147287015 // {0, 3, 4, 16, 17, 31}
		STG_E_WRITEFAULT = -2147287011 // {0, 2..4, 16, 17, 31}
		STG_E_READFAULT = -2147287010 // {1..4, 16, 17, 31}
		STG_E_SHAREVIOLATION = -2147287008 // {5, 16, 17, 31}
		STG_E_LOCKVIOLATION = -2147287007 // {0, 5, 16, 17, 31}
		STG_E_FILEALREADYEXISTS = -2147286960 // {4, 6, 16, 17, 31}
		STG_E_INVALIDPARAMETER = -2147286953 // {0..2, 4, 6, 16, 17, 31}
		STG_E_MEDIUMFULL = -2147286928 // {4..6, 16, 17, 31}
		STG_E_ABNORMALAPIEXIT = -2147286790 // {1, 3..7, 16, 17, 31}
		STG_E_INVALIDHEADER = -2147286789 // {0, 1, 3..7, 16, 17, 31}
		STG_E_INVALIDNAME = -2147286788 // {2..7, 16, 17, 31}
		STG_E_UNKNOWN = -2147286787 // {0, 2..7, 16, 17, 31}
		STG_E_UNIMPLEMENTEDFUNCTION = -2147286786 // {1..7, 16, 17, 31}
		STG_E_INVALIDFLAG = -2147286785 // {0..7, 16, 17, 31}
		STG_E_INUSE = -2147286784 // {8, 16, 17, 31}
		STG_E_NOTCURRENT = -2147286783 // {0, 8, 16, 17, 31}
		STG_E_REVERTED = -2147286782 // {1, 8, 16, 17, 31}
		STG_E_CANTSAVE = -2147286781 // {0, 1, 8, 16, 17, 31}
		STG_E_OLDFORMAT = -2147286780 // {2, 8, 16, 17, 31}
		STG_E_OLDDLL = -2147286779 // {0, 2, 8, 16, 17, 31}
		STG_E_SHAREREQUIRED = -2147286778 // {1, 2, 8, 16, 17, 31}
		STG_E_NOTFILEBASEDSTORAGE = -2147286777 // {0..2, 8, 16, 17, 31}
		STG_E_EXTANTMARSHALLINGS = -2147286776 // {3, 8, 16, 17, 31}
		STG_S_CONVERTED = 197120 // {9, 16, 17}
		RPC_E_CALL_REJECTED = -2147418111 // {0, 16, 31}
		RPC_E_CALL_CANCELED = -2147418110 // {1, 16, 31}
		RPC_E_CANTPOST_INSENDCALL = -2147418109 // {0, 1, 16, 31}
		RPC_E_CANTCALLOUT_INASYNCCALL = -2147418108 // {2, 16, 31}
		RPC_E_CANTCALLOUT_INEXTERNALCALL = -2147418107 // {0, 2, 16, 31}
		RPC_E_CONNECTION_TERMINATED = -2147418106 // {1, 2, 16, 31}
		RPC_E_SERVER_DIED = -2147418105 // {0..2, 16, 31}
		RPC_E_CLIENT_DIED = -2147418104 // {3, 16, 31}
		RPC_E_INVALID_DATAPACKET = -2147418103 // {0, 3, 16, 31}
		RPC_E_CANTTRANSMIT_CALL = -2147418102 // {1, 3, 16, 31}
		RPC_E_CLIENT_CANTMARSHAL_DATA = -2147418101 // {0, 1, 3, 16, 31}
		RPC_E_CLIENT_CANTUNMARSHAL_DATA = -2147418100 // {2, 3, 16, 31}
		RPC_E_SERVER_CANTMARSHAL_DATA = -2147418099 // {0, 2, 3, 16, 31}
		RPC_E_SERVER_CANTUNMARSHAL_DATA = -2147418098 // {1..3, 16, 31}
		RPC_E_INVALID_DATA = -2147418097 // {0..3, 16, 31}
		RPC_E_INVALID_PARAMETER = -2147418096 // {4, 16, 31}
		RPC_E_CANTCALLOUT_AGAIN = -2147418095 // {0, 4, 16, 31}
		RPC_E_SERVER_DIED_DNE = -2147418094 // {1, 4, 16, 31}
		RPC_E_SYS_CALL_FAILED = -2147417856 // {8, 16, 31}
		RPC_E_OUT_OF_RESOURCES = -2147417855 // {0, 8, 16, 31}
		RPC_E_ATTEMPTED_MULTITHREAD = -2147417854 // {1, 8, 16, 31}
		RPC_E_NOT_REGISTERED = -2147417853 // {0, 1, 8, 16, 31}
		RPC_E_FAULT = -2147417852 // {2, 8, 16, 31}
		RPC_E_SERVERFAULT = -2147417851 // {0, 2, 8, 16, 31}
		RPC_E_CHANGED_MODE = -2147417850 // {1, 2, 8, 16, 31}
		RPC_E_INVALIDMETHOD = -2147417849 // {0..2, 8, 16, 31}
		RPC_E_DISCONNECTED = -2147417848 // {3, 8, 16, 31}
		RPC_E_RETRY = -2147417847 // {0, 3, 8, 16, 31}
		RPC_E_SERVERCALL_RETRYLATER = -2147417846 // {1, 3, 8, 16, 31}
		RPC_E_SERVERCALL_REJECTED = -2147417845 // {0, 1, 3, 8, 16, 31}
		RPC_E_INVALID_CALLDATA = -2147417844 // {2, 3, 8, 16, 31}
		RPC_E_CANTCALLOUT_ININPUTSYNCCALL = -2147417843 // {0, 2, 3, 8, 16, 31}
		RPC_E_WRONG_THREAD = -2147417842 // {1..3, 8, 16, 31}
		RPC_E_THREAD_NOT_INIT = -2147417841 // {0..3, 8, 16, 31}
		RPC_E_UNEXPECTED = -2147352577 // {0..16, 31}
		TC_NORMAL = 0 // {}
		TC_HARDERR = 1 // {0}
		TC_GP_TRAP = 2 // {1}
		TC_SIGNAL = 3 // {0, 1}
		AC_LINE_OFFLINE = 0 // {}
		AC_LINE_ONLINE = 1 // {0}
		AC_LINE_BACKUP_POWER = 2 // {1}
		AC_LINE_UNKNOWN = 255 // {0..7}
		BATTERY_FLAG_HIGH = 1 // {0}
		BATTERY_FLAG_LOW = 2 // {1}
		BATTERY_FLAG_CRITICAL = 4 // {2}
		BATTERY_FLAG_CHARGING = 8 // {3}
		BATTERY_FLAG_NO_BATTERY = 128 // {7}
		BATTERY_FLAG_UNKNOWN = 255 // {0..7}
		BATTERY_PERCENTAGE_UNKNOWN = 255 // {0..7}
		BATTERY_LIFE_UNKNOWN = -1 // {0..31}
		WIN_CERT_REVISION_1_0 = 256 // {8}
		WIN_CERT_TYPE_X509 = 1 // {0}
		WIN_CERT_TYPE_PKCS_SIGNED_DATA = 2 // {1}
		WIN_CERT_TYPE_RESERVED_1 = 3 // {0, 1}
		WIN_TRUST_PROVIDER_UNKNOWN = 0 // {}
		WIN_TRUST_SOFTWARE_PUBLISHER = 1 // {0}
		WIN_TRUST_WINDOWS_COMPATIBLE = 2 // {1}
		WIN_TRUST_CAPI_PROVIDER = 3 // {0, 1}
		WIN_TRUST_SUBJTYPE_RAW_FILE = 0 // {}
		WIN_TRUST_SUBJTYPE_PE_IMAGE = 1 // {0}
		WIN_TRUST_SUBJTYPE_OLE_STORAGE = 2 // {1}
		WIN_TRUST_SUBJTYPE_JAVA_CLASS = 3 // {0, 1}
		CAPI_TRUST_ACTION_VALID_CSP = 1 // {0}
		WIN_SPUB_ACTION_TRUSTED_PUBLISHER = 2 // {1}
		WIN_SPUB_ACTION_NT_ACTIVATE_IMAGE = 3 // {0, 1}
		WIN_SPUB_ACTION_PUBLISHED_SOFTWARE = 4 // {2}
		R2_BLACK = 1 // {0}
		R2_NOTMERGEPEN = 2 // {1}
		R2_MASKNOTPEN = 3 // {0, 1}
		R2_NOTCOPYPEN = 4 // {2}
		R2_MASKPENNOT = 5 // {0, 2}
		R2_NOT = 6 // {1, 2}
		R2_XORPEN = 7 // {0..2}
		R2_NOTMASKPEN = 8 // {3}
		R2_MASKPEN = 9 // {0, 3}
		R2_NOTXORPEN = 10 // {1, 3}
		R2_NOP = 11 // {0, 1, 3}
		R2_MERGENOTPEN = 12 // {2, 3}
		R2_COPYPEN = 13 // {0, 2, 3}
		R2_MERGEPENNOT = 14 // {1..3}
		R2_MERGEPEN = 15 // {0..3}
		R2_WHITE = 16 // {4}
		R2_LAST = 16 // {4}
		SRCCOPY = 13369376 // {5, 18, 19, 22, 23}
		SRCPAINT = 15597702 // {1, 2, 7, 17..19, 21..23}
		SRCAND = 8913094 // {1, 2, 6, 7, 19, 23}
		SRCINVERT = 6684742 // {1, 2, 6, 17, 18, 21, 22}
		SRCERASE = 4457256 // {3, 5, 8, 9, 18, 22}
		NOTSRCCOPY = 3342344 // {3, 16, 17, 20, 21}
		NOTSRCERASE = 1114278 // {1, 2, 5, 7, 16, 20}
		MERGECOPY = 12583114 // {1, 3, 6, 7, 22, 23}
		MERGEPAINT = 12255782 // {1, 2, 5, 9, 16, 17, 19..21, 23}
		PATCOPY = 15728673 // {0, 5, 20..23}
		PATPAINT = 16452105 // {0, 3, 9, 11, 16, 17, 19..23}
		PATINVERT = 5898313 // {0, 3, 6, 17, 19, 20, 22}
		DSTINVERT = 5570569 // {0, 3, 16, 18, 20, 22}
		BLACKNESS = 66 // {1, 6}
		WHITENESS = 16711778 // {1, 5, 6, 16..23}
		GDI_ERROR = -1 // {0..31}
		ERROR = 0 // {}
		NULLREGION = 1 // {0}
		SIMPLEREGION = 2 // {1}
		COMPLEXREGION = 3 // {0, 1}
		RGN_ERROR = 0 // {}
		RGN_AND = 1 // {0}
		RGN_OR = 2 // {1}
		RGN_XOR = 3 // {0, 1}
		RGN_DIFF = 4 // {2}
		RGN_COPY = 5 // {0, 2}
		RGN_MIN = 1 // {0}
		RGN_MAX = 5 // {0, 2}
		BLACKONWHITE = 1 // {0}
		WHITEONBLACK = 2 // {1}
		COLORONCOLOR = 3 // {0, 1}
		HALFTONE = 4 // {2}
		MAXSTRETCHBLTMODE = 4 // {2}
		STRETCH_ANDSCANS = 1 // {0}
		STRETCH_ORSCANS = 2 // {1}
		STRETCH_DELETESCANS = 3 // {0, 1}
		STRETCH_HALFTONE = 4 // {2}
		ALTERNATE = 1 // {0}
		WINDING = 2 // {1}
		POLYFILL_LAST = 2 // {1}
		TA_NOUPDATECP = {}
		TA_UPDATECP = {0}
		TA_LEFT = {}
		TA_RIGHT = {1}
		TA_CENTER = {1, 2}
		TA_TOP = {}
		TA_BOTTOM = {3}
		TA_BASELINE = {3, 4}
		TA_RTLREADING = {8}
		TA_MASK = {0..4, 8}
		VTA_BASELINE = {3, 4}
		VTA_LEFT = {3}
		VTA_RIGHT = {}
		VTA_CENTER = {1, 2}
		VTA_BOTTOM = {1}
		VTA_TOP = {}
		ETO_OPAQUE = {1}
		ETO_CLIPPED = {2}
		ETO_GLYPH_INDEX = {4}
		ETO_RTLREADING = {7}
		ASPECT_FILTERING = 1 // {0}
		DCB_RESET = {0}
		DCB_ACCUMULATE = {1}
		DCB_DIRTY = {1}
		DCB_SET = {0, 1}
		DCB_ENABLE = {2}
		DCB_DISABLE = {3}
		META_SETBKCOLOR = 513 // {0, 9}
		META_SETBKMODE = 258 // {1, 8}
		META_SETMAPMODE = 259 // {0, 1, 8}
		META_SETROP2 = 260 // {2, 8}
		META_SETRELABS = 261 // {0, 2, 8}
		META_SETPOLYFILLMODE = 262 // {1, 2, 8}
		META_SETSTRETCHBLTMODE = 263 // {0..2, 8}
		META_SETTEXTCHAREXTRA = 264 // {3, 8}
		META_SETTEXTCOLOR = 521 // {0, 3, 9}
		META_SETTEXTJUSTIFICATION = 522 // {1, 3, 9}
		META_SETWINDOWORG = 523 // {0, 1, 3, 9}
		META_SETWINDOWEXT = 524 // {2, 3, 9}
		META_SETVIEWPORTORG = 525 // {0, 2, 3, 9}
		META_SETVIEWPORTEXT = 526 // {1..3, 9}
		META_OFFSETWINDOWORG = 527 // {0..3, 9}
		META_SCALEWINDOWEXT = 1040 // {4, 10}
		META_OFFSETVIEWPORTORG = 529 // {0, 4, 9}
		META_SCALEVIEWPORTEXT = 1042 // {1, 4, 10}
		META_LINETO = 531 // {0, 1, 4, 9}
		META_MOVETO = 532 // {2, 4, 9}
		META_EXCLUDECLIPRECT = 1045 // {0, 2, 4, 10}
		META_INTERSECTCLIPRECT = 1046 // {1, 2, 4, 10}
		META_ARC = 2071 // {0..2, 4, 11}
		META_ELLIPSE = 1048 // {3, 4, 10}
		META_FLOODFILL = 1049 // {0, 3, 4, 10}
		META_PIE = 2074 // {1, 3, 4, 11}
		META_RECTANGLE = 1051 // {0, 1, 3, 4, 10}
		META_ROUNDRECT = 1564 // {2..4, 9, 10}
		META_PATBLT = 1565 // {0, 2..4, 9, 10}
		META_SAVEDC = 30 // {1..4}
		META_SETPIXEL = 1055 // {0..4, 10}
		META_OFFSETCLIPRGN = 544 // {5, 9}
		META_TEXTOUT = 1313 // {0, 5, 8, 10}
		META_BITBLT = 2338 // {1, 5, 8, 11}
		META_STRETCHBLT = 2851 // {0, 1, 5, 8, 9, 11}
		META_POLYGON = 804 // {2, 5, 8, 9}
		META_POLYLINE = 805 // {0, 2, 5, 8, 9}
		META_ESCAPE = 1574 // {1, 2, 5, 9, 10}
		META_RESTOREDC = 295 // {0..2, 5, 8}
		META_FILLREGION = 552 // {3, 5, 9}
		META_FRAMEREGION = 1065 // {0, 3, 5, 10}
		META_INVERTREGION = 298 // {1, 3, 5, 8}
		META_PAINTREGION = 299 // {0, 1, 3, 5, 8}
		META_SELECTCLIPREGION = 300 // {2, 3, 5, 8}
		META_SELECTOBJECT = 301 // {0, 2, 3, 5, 8}
		META_SETTEXTALIGN = 302 // {1..3, 5, 8}
		META_CHORD = 2096 // {4, 5, 11}
		META_SETMAPPERFLAGS = 561 // {0, 4, 5, 9}
		META_EXTTEXTOUT = 2610 // {1, 4, 5, 9, 11}
		META_SETDIBTODEV = 3379 // {0, 1, 4, 5, 8, 10, 11}
		META_SELECTPALETTE = 564 // {2, 4, 5, 9}
		META_REALIZEPALETTE = 53 // {0, 2, 4, 5}
		META_ANIMATEPALETTE = 1078 // {1, 2, 4, 5, 10}
		META_SETPALENTRIES = 55 // {0..2, 4, 5}
		META_POLYPOLYGON = 1336 // {3..5, 8, 10}
		META_RESIZEPALETTE = 313 // {0, 3..5, 8}
		META_DIBBITBLT = 2368 // {6, 8, 11}
		META_DIBSTRETCHBLT = 2881 // {0, 6, 8, 9, 11}
		META_DIBCREATEPATTERNBRUSH = 322 // {1, 6, 8}
		META_STRETCHDIB = 3907 // {0, 1, 6, 8..11}
		META_EXTFLOODFILL = 1352 // {3, 6, 8, 10}
		META_DELETEOBJECT = 496 // {4..8}
		META_CREATEPALETTE = 247 // {0..2, 4..7}
		META_CREATEPATTERNBRUSH = 505 // {0, 3..8}
		META_CREATEPENINDIRECT = 762 // {1, 3..7, 9}
		META_CREATEFONTINDIRECT = 763 // {0, 1, 3..7, 9}
		META_CREATEBRUSHINDIRECT = 764 // {2..7, 9}
		META_CREATEREGION = 1791 // {0..7, 9, 10}
		NEWFRAME = 1 // {0}
		ABORTDOC = 2 // {1}
		NEXTBAND = 3 // {0, 1}
		SETCOLORTABLE = 4 // {2}
		GETCOLORTABLE = 5 // {0, 2}
		FLUSHOUTPUT = 6 // {1, 2}
		DRAFTMODE = 7 // {0..2}
		QUERYESCSUPPORT = 8 // {3}
		SETABORTPROC = 9 // {0, 3}
		STARTDOC = 10 // {1, 3}
		ENDDOC = 11 // {0, 1, 3}
		GETPHYSPAGESIZE = 12 // {2, 3}
		GETPRINTINGOFFSET = 13 // {0, 2, 3}
		GETSCALINGFACTOR = 14 // {1..3}
		MFCOMMENT = 15 // {0..3}
		GETPENWIDTH = 16 // {4}
		SETCOPYCOUNT = 17 // {0, 4}
		SELECTPAPERSOURCE = 18 // {1, 4}
		DEVICEDATA = 19 // {0, 1, 4}
		PASSTHROUGH = 19 // {0, 1, 4}
		GETTECHNOLGY = 20 // {2, 4}
		GETTECHNOLOGY = 20 // {2, 4}
		SETLINECAP = 21 // {0, 2, 4}
		SETLINEJOIN = 22 // {1, 2, 4}
		SETMITERLIMIT = 23 // {0..2, 4}
		BANDINFO = 24 // {3, 4}
		DRAWPATTERNRECT = 25 // {0, 3, 4}
		GETVECTORPENSIZE = 26 // {1, 3, 4}
		GETVECTORBRUSHSIZE = 27 // {0, 1, 3, 4}
		ENABLEDUPLEX = 28 // {2..4}
		GETSETPAPERBINS = 29 // {0, 2..4}
		GETSETPRINTORIENT = 30 // {1..4}
		ENUMPAPERBINS = 31 // {0..4}
		SETDIBSCALING = 32 // {5}
		EPSPRINTING = 33 // {0, 5}
		ENUMPAPERMETRICS = 34 // {1, 5}
		GETSETPAPERMETRICS = 35 // {0, 1, 5}
		POSTSCRIPT_DATA = 37 // {0, 2, 5}
		POSTSCRIPT_IGNORE = 38 // {1, 2, 5}
		MOUSETRAILS = 39 // {0..2, 5}
		GETDEVICEUNITS = 42 // {1, 3, 5}
		GETEXTENDEDTEXTMETRICS = 256 // {8}
		GETEXTENTTABLE = 257 // {0, 8}
		GETPAIRKERNTABLE = 258 // {1, 8}
		GETTRACKKERNTABLE = 259 // {0, 1, 8}
		EXTTEXTOUT = 512 // {9}
		GETFACENAME = 513 // {0, 9}
		DOWNLOADFACE = 514 // {1, 9}
		ENABLERELATIVEWIDTHS = 768 // {8, 9}
		ENABLEPAIRKERNING = 769 // {0, 8, 9}
		SETKERNTRACK = 770 // {1, 8, 9}
		SETALLJUSTVALUES = 771 // {0, 1, 8, 9}
		SETCHARSET = 772 // {2, 8, 9}
		STRETCHBLT = 2048 // {11}
		GETSETSCREENPARAMS = 3072 // {10, 11}
		QUERYDIBSUPPORT = 3073 // {0, 10, 11}
		BEGIN_PATH = 4096 // {12}
		CLIP_TO_PATH = 4097 // {0, 12}
		END_PATH = 4098 // {1, 12}
		EXT_DEVICE_CAPS = 4099 // {0, 1, 12}
		RESTORE_CTM = 4100 // {2, 12}
		SAVE_CTM = 4101 // {0, 2, 12}
		SET_ARC_DIRECTION = 4102 // {1, 2, 12}
		SET_BACKGROUND_COLOR = 4103 // {0..2, 12}
		SET_POLY_MODE = 4104 // {3, 12}
		SET_SCREEN_ANGLE = 4105 // {0, 3, 12}
		SET_SPREAD = 4106 // {1, 3, 12}
		TRANSFORM_CTM = 4107 // {0, 1, 3, 12}
		SET_CLIP_BOX = 4108 // {2, 3, 12}
		SET_BOUNDS = 4109 // {0, 2, 3, 12}
		SET_MIRROR_MODE = 4110 // {1..3, 12}
		OPENCHANNEL = 4110 // {1..3, 12}
		DOWNLOADHEADER = 4111 // {0..3, 12}
		CLOSECHANNEL = 4112 // {4, 12}
		POSTSCRIPT_PASSTHROUGH = 4115 // {0, 1, 4, 12}
		ENCAPSULATED_POSTSCRIPT = 4116 // {2, 4, 12}
		QDI_SETDIBITS = {0}
		QDI_GETDIBITS = {1}
		QDI_DIBTOSCREEN = {2}
		QDI_STRETCHDIB = {3}
		SP_NOTREPORTED = {14}
		SP_ERROR = {0..31}
		SP_APPABORT = {1..31}
		SP_USERABORT = {0, 2..31}
		SP_OUTOFDISK = {2..31}
		SP_OUTOFMEMORY = {0, 1, 3..31}
		PR_JOBSTATUS = 0 // {}
		OBJ_PEN = 1 // {0}
		OBJ_BRUSH = 2 // {1}
		OBJ_DC = 3 // {0, 1}
		OBJ_METADC = 4 // {2}
		OBJ_PAL = 5 // {0, 2}
		OBJ_FONT = 6 // {1, 2}
		OBJ_BITMAP = 7 // {0..2}
		OBJ_REGION = 8 // {3}
		OBJ_METAFILE = 9 // {0, 3}
		OBJ_MEMDC = 10 // {1, 3}
		OBJ_EXTPEN = 11 // {0, 1, 3}
		OBJ_ENHMETADC = 12 // {2, 3}
		OBJ_ENHMETAFILE = 13 // {0, 2, 3}
		MWT_IDENTITY = 1 // {0}
		MWT_LEFTMULTIPLY = 2 // {1}
		MWT_RIGHTMULTIPLY = 3 // {0, 1}
		MWT_MIN = 1 // {0}
		MWT_MAX = 3 // {0, 1}
		LCS_CALIBRATED_RGB = 0 // {}
		LCS_DEVICE_RGB = 1 // {0}
		LCS_DEVICE_CMYK = 2 // {1}
		LCS_GM_BUSINESS = 1 // {0}
		LCS_GM_GRAPHICS = 2 // {1}
		LCS_GM_IMAGES = 4 // {2}
		CM_OUT_OF_GAMUT = 255 // {0..7}
		CM_IN_GAMUT = 0 // {}
		BI_RGB = 0 // {}
		BI_RLE8 = 1 // {0}
		BI_RLE4 = 2 // {1}
		BI_BITFIELDS = 3 // {0, 1}
		TCI_SRCCHARSET = 1 // {0}
		TCI_SRCCODEPAGE = 2 // {1}
		TCI_SRCFONTSIG = 3 // {0, 1}
		TMPF_FIXED_PITCH = 1 // {0}
		TMPF_VECTOR = 2 // {1}
		TMPF_DEVICE = 8 // {3}
		TMPF_TRUETYPE = 4 // {2}
		NTM_REGULAR = 64 // {6}
		NTM_BOLD = 32 // {5}
		NTM_ITALIC = 1 // {0}
		LF_FACESIZE = 32 // {5}
		LF_FULLFACESIZE = 64 // {6}
		OUT_DEFAULT_PRECIS = 0 // {}
		OUT_STRING_PRECIS = 1 // {0}
		OUT_CHARACTER_PRECIS = 2 // {1}
		OUT_STROKE_PRECIS = 3 // {0, 1}
		OUT_TT_PRECIS = 4 // {2}
		OUT_DEVICE_PRECIS = 5 // {0, 2}
		OUT_RASTER_PRECIS = 6 // {1, 2}
		OUT_TT_ONLY_PRECIS = 7 // {0..2}
		OUT_OUTLINE_PRECIS = 8 // {3}
		CLIP_DEFAULT_PRECIS = 0 // {}
		CLIP_CHARACTER_PRECIS = 1 // {0}
		CLIP_STROKE_PRECIS = 2 // {1}
		CLIP_MASK = 15 // {0..3}
		CLIP_LH_ANGLES = 16 // {4}
		CLIP_TT_ALWAYS = 32 // {5}
		CLIP_EMBEDDED = 128 // {7}
		DEFAULT_QUALITY = 0 // {}
		DRAFT_QUALITY = 1 // {0}
		PROOF_QUALITY = 2 // {1}
		NONANTIALIASED_QUALITY = 3 // {0, 1}
		ANTIALIASED_QUALITY = 4 // {2}
		DEFAULT_PITCH = 0 // {}
		FIXED_PITCH = 1 // {0}
		VARIABLE_PITCH = 2 // {1}
		MONO_FONT = 8 // {3}
		ANSI_CHARSET = 0 // {}
		DEFAULT_CHARSET = 1 // {0}
		SYMBOL_CHARSET = 2 // {1}
		SHIFTJIS_CHARSET = 128 // {7}
		HANGEUL_CHARSET = 129 // {0, 7}
		GB2312_CHARSET = 134 // {1, 2, 7}
		CHINESEBIG5_CHARSET = 136 // {3, 7}
		OEM_CHARSET = 255 // {0..7}
		JOHAB_CHARSET = 130 // {1, 7}
		HEBREW_CHARSET = 177 // {0, 4, 5, 7}
		ARABIC_CHARSET = 178 // {1, 4, 5, 7}
		GREEK_CHARSET = 161 // {0, 5, 7}
		TURKISH_CHARSET = 162 // {1, 5, 7}
		THAI_CHARSET = 222 // {1..4, 6, 7}
		EASTEUROPE_CHARSET = 238 // {1..3, 5..7}
		RUSSIAN_CHARSET = 204 // {2, 3, 6, 7}
		MAC_CHARSET = 77 // {0, 2, 3, 6}
		BALTIC_CHARSET = 186 // {1, 3..5, 7}
		FS_LATIN1 = {0}
		FS_LATIN2 = {1}
		FS_CYRILLIC = {2}
		FS_GREEK = {3}
		FS_TURKISH = {4}
		FS_HEBREW = {5}
		FS_ARABIC = {6}
		FS_BALTIC = {7}
		FS_THAI = {16}
		FS_JISJAPAN = {17}
		FS_CHINESESIMP = {18}
		FS_WANSUNG = {19}
		FS_CHINESETRAD = {20}
		FS_JOHAB = {21}
		FS_SYMBOL = {31}
		FF_DONTCARE = 0 // {}
		FF_ROMAN = 16 // {4}
		FF_SWISS = 32 // {5}
		FF_MODERN = 48 // {4, 5}
		FF_SCRIPT = 64 // {6}
		FF_DECORATIVE = 80 // {4, 6}
		FW_DONTCARE = 0 // {}
		FW_THIN = 100 // {2, 5, 6}
		FW_EXTRALIGHT = 200 // {3, 6, 7}
		FW_LIGHT = 300 // {2, 3, 5, 8}
		FW_NORMAL = 400 // {4, 7, 8}
		FW_MEDIUM = 500 // {2, 4..8}
		FW_SEMIBOLD = 600 // {3, 4, 6, 9}
		FW_BOLD = 700 // {2..5, 7, 9}
		FW_EXTRABOLD = 800 // {5, 8, 9}
		FW_HEAVY = 900 // {2, 7..9}
		FW_ULTRALIGHT = 200 // {3, 6, 7}
		FW_REGULAR = 400 // {4, 7, 8}
		FW_DEMIBOLD = 600 // {3, 4, 6, 9}
		FW_ULTRABOLD = 800 // {5, 8, 9}
		FW_BLACK = 900 // {2, 7..9}
		PANOSE_COUNT = 10 // {1, 3}
		PAN_FAMILYTYPE_INDEX = 0 // {}
		PAN_SERIFSTYLE_INDEX = 1 // {0}
		PAN_WEIGHT_INDEX = 2 // {1}
		PAN_PROPORTION_INDEX = 3 // {0, 1}
		PAN_CONTRAST_INDEX = 4 // {2}
		PAN_STROKEVARIATION_INDEX = 5 // {0, 2}
		PAN_ARMSTYLE_INDEX = 6 // {1, 2}
		PAN_LETTERFORM_INDEX = 7 // {0..2}
		PAN_MIDLINE_INDEX = 8 // {3}
		PAN_XHEIGHT_INDEX = 9 // {0, 3}
		PAN_CULTURE_LATIN = 0 // {}
		PAN_ANY = 0 // {}
		PAN_NO_FIT = 1 // {0}
		PAN_FAMILY_TEXT_DISPLAY = 2 // {1}
		PAN_FAMILY_SCRIPT = 3 // {0, 1}
		PAN_FAMILY_DECORATIVE = 4 // {2}
		PAN_FAMILY_PICTORIAL = 5 // {0, 2}
		PAN_SERIF_COVE = 2 // {1}
		PAN_SERIF_OBTUSE_COVE = 3 // {0, 1}
		PAN_SERIF_SQUARE_COVE = 4 // {2}
		PAN_SERIF_OBTUSE_SQUARE_COVE = 5 // {0, 2}
		PAN_SERIF_SQUARE = 6 // {1, 2}
		PAN_SERIF_THIN = 7 // {0..2}
		PAN_SERIF_BONE = 8 // {3}
		PAN_SERIF_EXAGGERATED = 9 // {0, 3}
		PAN_SERIF_TRIANGLE = 10 // {1, 3}
		PAN_SERIF_NORMAL_SANS = 11 // {0, 1, 3}
		PAN_SERIF_OBTUSE_SANS = 12 // {2, 3}
		PAN_SERIF_PERP_SANS = 13 // {0, 2, 3}
		PAN_SERIF_FLARED = 14 // {1..3}
		PAN_SERIF_ROUNDED = 15 // {0..3}
		PAN_WEIGHT_VERY_LIGHT = 2 // {1}
		PAN_WEIGHT_LIGHT = 3 // {0, 1}
		PAN_WEIGHT_THIN = 4 // {2}
		PAN_WEIGHT_BOOK = 5 // {0, 2}
		PAN_WEIGHT_MEDIUM = 6 // {1, 2}
		PAN_WEIGHT_DEMI = 7 // {0..2}
		PAN_WEIGHT_BOLD = 8 // {3}
		PAN_WEIGHT_HEAVY = 9 // {0, 3}
		PAN_WEIGHT_BLACK = 10 // {1, 3}
		PAN_WEIGHT_NORD = 11 // {0, 1, 3}
		PAN_PROP_OLD_STYLE = 2 // {1}
		PAN_PROP_MODERN = 3 // {0, 1}
		PAN_PROP_EVEN_WIDTH = 4 // {2}
		PAN_PROP_EXPANDED = 5 // {0, 2}
		PAN_PROP_CONDENSED = 6 // {1, 2}
		PAN_PROP_VERY_EXPANDED = 7 // {0..2}
		PAN_PROP_VERY_CONDENSED = 8 // {3}
		PAN_PROP_MONOSPACED = 9 // {0, 3}
		PAN_CONTRAST_NONE = 2 // {1}
		PAN_CONTRAST_VERY_LOW = 3 // {0, 1}
		PAN_CONTRAST_LOW = 4 // {2}
		PAN_CONTRAST_MEDIUM_LOW = 5 // {0, 2}
		PAN_CONTRAST_MEDIUM = 6 // {1, 2}
		PAN_CONTRAST_MEDIUM_HIGH = 7 // {0..2}
		PAN_CONTRAST_HIGH = 8 // {3}
		PAN_CONTRAST_VERY_HIGH = 9 // {0, 3}
		PAN_STROKE_GRADUAL_DIAG = 2 // {1}
		PAN_STROKE_GRADUAL_TRAN = 3 // {0, 1}
		PAN_STROKE_GRADUAL_VERT = 4 // {2}
		PAN_STROKE_GRADUAL_HORZ = 5 // {0, 2}
		PAN_STROKE_RAPID_VERT = 6 // {1, 2}
		PAN_STROKE_RAPID_HORZ = 7 // {0..2}
		PAN_STROKE_INSTANT_VERT = 8 // {3}
		PAN_STRAIGHT_ARMS_HORZ = 2 // {1}
		PAN_STRAIGHT_ARMS_WEDGE = 3 // {0, 1}
		PAN_STRAIGHT_ARMS_VERT = 4 // {2}
		PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5 // {0, 2}
		PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6 // {1, 2}
		PAN_BENT_ARMS_HORZ = 7 // {0..2}
		PAN_BENT_ARMS_WEDGE = 8 // {3}
		PAN_BENT_ARMS_VERT = 9 // {0, 3}
		PAN_BENT_ARMS_SINGLE_SERIF = 10 // {1, 3}
		PAN_BENT_ARMS_DOUBLE_SERIF = 11 // {0, 1, 3}
		PAN_LETT_NORMAL_CONTACT = 2 // {1}
		PAN_LETT_NORMAL_WEIGHTED = 3 // {0, 1}
		PAN_LETT_NORMAL_BOXED = 4 // {2}
		PAN_LETT_NORMAL_FLATTENED = 5 // {0, 2}
		PAN_LETT_NORMAL_ROUNDED = 6 // {1, 2}
		PAN_LETT_NORMAL_OFF_CENTER = 7 // {0..2}
		PAN_LETT_NORMAL_SQUARE = 8 // {3}
		PAN_LETT_OBLIQUE_CONTACT = 9 // {0, 3}
		PAN_LETT_OBLIQUE_WEIGHTED = 10 // {1, 3}
		PAN_LETT_OBLIQUE_BOXED = 11 // {0, 1, 3}
		PAN_LETT_OBLIQUE_FLATTENED = 12 // {2, 3}
		PAN_LETT_OBLIQUE_ROUNDED = 13 // {0, 2, 3}
		PAN_LETT_OBLIQUE_OFF_CENTER = 14 // {1..3}
		PAN_LETT_OBLIQUE_SQUARE = 15 // {0..3}
		PAN_MIDLINE_STANDARD_TRIMMED = 2 // {1}
		PAN_MIDLINE_STANDARD_POINTED = 3 // {0, 1}
		PAN_MIDLINE_STANDARD_SERIFED = 4 // {2}
		PAN_MIDLINE_HIGH_TRIMMED = 5 // {0, 2}
		PAN_MIDLINE_HIGH_POINTED = 6 // {1, 2}
		PAN_MIDLINE_HIGH_SERIFED = 7 // {0..2}
		PAN_MIDLINE_CONSTANT_TRIMMED = 8 // {3}
		PAN_MIDLINE_CONSTANT_POINTED = 9 // {0, 3}
		PAN_MIDLINE_CONSTANT_SERIFED = 10 // {1, 3}
		PAN_MIDLINE_LOW_TRIMMED = 11 // {0, 1, 3}
		PAN_MIDLINE_LOW_POINTED = 12 // {2, 3}
		PAN_MIDLINE_LOW_SERIFED = 13 // {0, 2, 3}
		PAN_XHEIGHT_CONSTANT_SMALL = 2 // {1}
		PAN_XHEIGHT_CONSTANT_STD = 3 // {0, 1}
		PAN_XHEIGHT_CONSTANT_LARGE = 4 // {2}
		PAN_XHEIGHT_DUCKING_SMALL = 5 // {0, 2}
		PAN_XHEIGHT_DUCKING_STD = 6 // {1, 2}
		PAN_XHEIGHT_DUCKING_LARGE = 7 // {0..2}
		ELF_VENDOR_SIZE = 4 // {2}
		ELF_VERSION = 0 // {}
		ELF_CULTURE_LATIN = 0 // {}
		RASTER_FONTTYPE = 1 // {0}
		DEVICE_FONTTYPE = 2 // {1}
		TRUETYPE_FONTTYPE = 4 // {2}
		PC_RESERVED = 1 // {0}
		PC_EXPLICIT = 2 // {1}
		PC_NOCOLLAPSE = 4 // {2}
		TRANSPARENT = 1 // {0}
		OPAQUE = 2 // {1}
		BKMODE_LAST = 2 // {1}
		GM_COMPATIBLE = 1 // {0}
		GM_ADVANCED = 2 // {1}
		GM_LAST = 2 // {1}
		PT_CLOSEFIGURE = 1 // {0}
		PT_LINETO = 2 // {1}
		PT_BEZIERTO = 4 // {2}
		PT_MOVETO = 6 // {1, 2}
		MM_TEXT = 1 // {0}
		MM_LOMETRIC = 2 // {1}
		MM_HIMETRIC = 3 // {0, 1}
		MM_LOENGLISH = 4 // {2}
		MM_HIENGLISH = 5 // {0, 2}
		MM_TWIPS = 6 // {1, 2}
		MM_ISOTROPIC = 7 // {0..2}
		MM_ANISOTROPIC = 8 // {3}
		MM_MIN = 1 // {0}
		MM_MAX = 8 // {3}
		MM_MAX_FIXEDSCALE = 6 // {1, 2}
		ABSOLUTE = 1 // {0}
		RELATIVE = 2 // {1}
		WHITE_BRUSH = 0 // {}
		LTGRAY_BRUSH = 1 // {0}
		GRAY_BRUSH = 2 // {1}
		DKGRAY_BRUSH = 3 // {0, 1}
		BLACK_BRUSH = 4 // {2}
		NULL_BRUSH = 5 // {0, 2}
		HOLLOW_BRUSH = 5 // {0, 2}
		WHITE_PEN = 6 // {1, 2}
		BLACK_PEN = 7 // {0..2}
		NULL_PEN = 8 // {3}
		OEM_FIXED_FONT = 10 // {1, 3}
		ANSI_FIXED_FONT = 11 // {0, 1, 3}
		ANSI_VAR_FONT = 12 // {2, 3}
		SYSTEM_FONT = 13 // {0, 2, 3}
		DEVICE_DEFAULT_FONT = 14 // {1..3}
		DEFAULT_PALETTE = 15 // {0..3}
		SYSTEM_FIXED_FONT = 16 // {4}
		DEFAULT_GUI_FONT = 17 // {0, 4}
		STOCK_LAST = 17 // {0, 4}
		CLR_INVALID = -1 // {0..31}
		BS_SOLID = 0 // {}
		BS_NULL = 1 // {0}
		BS_HOLLOW = 1 // {0}
		BS_HATCHED = 2 // {1}
		BS_PATTERN = 3 // {0, 1}
		BS_INDEXED = 4 // {2}
		BS_DIBPATTERN = 5 // {0, 2}
		BS_DIBPATTERNPT = 6 // {1, 2}
		BS_PATTERN8X8 = 7 // {0..2}
		BS_DIBPATTERN8X8 = 8 // {3}
		HS_HORIZONTAL = 0 // {}
		HS_VERTICAL = 1 // {0}
		HS_FDIAGONAL = 2 // {1}
		HS_BDIAGONAL = 3 // {0, 1}
		HS_CROSS = 4 // {2}
		HS_DIAGCROSS = 5 // {0, 2}
		PS_SOLID = 0 // {}
		PS_DASH = 1 // {0}
		PS_DOT = 2 // {1}
		PS_DASHDOT = 3 // {0, 1}
		PS_DASHDOTDOT = 4 // {2}
		PS_NULL = 5 // {0, 2}
		PS_INSIDEFRAME = 6 // {1, 2}
		PS_USERSTYLE = 7 // {0..2}
		PS_ALTERNATE = 8 // {3}
		PS_STYLE_MASK = 15 // {0..3}
		PS_ENDCAP_ROUND = 0 // {}
		PS_ENDCAP_SQUARE = 256 // {8}
		PS_ENDCAP_FLAT = 512 // {9}
		PS_ENDCAP_MASK = 3840 // {8..11}
		PS_JOIN_ROUND = 0 // {}
		PS_JOIN_BEVEL = 4096 // {12}
		PS_JOIN_MITER = 8192 // {13}
		PS_JOIN_MASK = 61440 // {12..15}
		PS_COSMETIC = 0 // {}
		PS_GEOMETRIC = 65536 // {16}
		PS_TYPE_MASK = 983040 // {16..19}
		AD_COUNTERCLOCKWISE = 1 // {0}
		AD_CLOCKWISE = 2 // {1}
		DRIVERVERSION = 0 // {}
		TECHNOLOGY = 2 // {1}
		HORZSIZE = 4 // {2}
		VERTSIZE = 6 // {1, 2}
		HORZRES = 8 // {3}
		VERTRES = 10 // {1, 3}
		BITSPIXEL = 12 // {2, 3}
		PLANES = 14 // {1..3}
		NUMBRUSHES = 16 // {4}
		NUMPENS = 18 // {1, 4}
		NUMMARKERS = 20 // {2, 4}
		NUMFONTS = 22 // {1, 2, 4}
		NUMCOLORS = 24 // {3, 4}
		PDEVICESIZE = 26 // {1, 3, 4}
		CURVECAPS = 28 // {2..4}
		LINECAPS = 30 // {1..4}
		POLYGONALCAPS = 32 // {5}
		TEXTCAPS = 34 // {1, 5}
		CLIPCAPS = 36 // {2, 5}
		RASTERCAPS = 38 // {1, 2, 5}
		ASPECTX = 40 // {3, 5}
		ASPECTY = 42 // {1, 3, 5}
		ASPECTXY = 44 // {2, 3, 5}
		LOGPIXELSX = 88 // {3, 4, 6}
		LOGPIXELSY = 90 // {1, 3, 4, 6}
		SIZEPALETTE = 104 // {3, 5, 6}
		NUMRESERVED = 106 // {1, 3, 5, 6}
		COLORRES = 108 // {2, 3, 5, 6}
		PHYSICALWIDTH = 110 // {1..3, 5, 6}
		PHYSICALHEIGHT = 111 // {0..3, 5, 6}
		PHYSICALOFFSETX = 112 // {4..6}
		PHYSICALOFFSETY = 113 // {0, 4..6}
		SCALINGFACTORX = 114 // {1, 4..6}
		SCALINGFACTORY = 115 // {0, 1, 4..6}
		VREFRESH = 116 // {2, 4..6}
		DESKTOPVERTRES = 117 // {0, 2, 4..6}
		DESKTOPHORZRES = 118 // {1, 2, 4..6}
		BLTALIGNMENT = 119 // {0..2, 4..6}
		DT_PLOTTER = 0 // {}
		DT_RASDISPLAY = 1 // {0}
		DT_RASPRINTER = 2 // {1}
		DT_RASCAMERA = 3 // {0, 1}
		DT_CHARSTREAM = 4 // {2}
		DT_METAFILE = 5 // {0, 2}
		DT_DISPFILE = 6 // {1, 2}
		CC_NONE = {}
		CC_CIRCLES = {0}
		CC_PIE = {1}
		CC_CHORD = {2}
		CC_ELLIPSES = {3}
		CC_WIDE = {4}
		CC_STYLED = {5}
		CC_WIDESTYLED = {6}
		CC_INTERIORS = {7}
		CC_ROUNDRECT = {8}
		LC_NONE = {}
		LC_POLYLINE = {1}
		LC_MARKER = {2}
		LC_POLYMARKER = {3}
		LC_WIDE = {4}
		LC_STYLED = {5}
		LC_WIDESTYLED = {6}
		LC_INTERIORS = {7}
		PC_NONE = {}
		PC_POLYGON = {0}
		PC_RECTANGLE = {1}
		PC_WINDPOLYGON = {2}
		PC_TRAPEZOID = {2}
		PC_SCANLINE = {3}
		PC_WIDE = {4}
		PC_STYLED = {5}
		PC_WIDESTYLED = {6}
		PC_INTERIORS = {7}
		PC_POLYPOLYGON = {8}
		PC_PATHS = {9}
		CP_NONE = 0 // {}
		CP_RECTANGLE = 1 // {0}
		CP_REGION = 2 // {1}
		TC_OP_CHARACTER = {0}
		TC_OP_STROKE = {1}
		TC_CP_STROKE = {2}
		TC_CR_90 = {3}
		TC_CR_ANY = {4}
		TC_SF_X_YINDEP = {5}
		TC_SA_DOUBLE = {6}
		TC_SA_INTEGER = {7}
		TC_SA_CONTIN = {8}
		TC_EA_DOUBLE = {9}
		TC_IA_ABLE = {10}
		TC_UA_ABLE = {11}
		TC_SO_ABLE = {12}
		TC_RA_ABLE = {13}
		TC_VA_ABLE = {14}
		TC_RESERVED = {15}
		TC_SCROLLBLT = {16}
		RC_BITBLT = {0}
		RC_BANDING = {1}
		RC_SCALING = {2}
		RC_BITMAP64 = {3}
		RC_GDI20_OUTPUT = {4}
		RC_GDI20_STATE = {5}
		RC_SAVEBITMAP = {6}
		RC_DI_BITMAP = {7}
		RC_PALETTE = {8}
		RC_DIBTODEV = {9}
		RC_BIGFONT = {10}
		RC_STRETCHBLT = {11}
		RC_FLOODFILL = {12}
		RC_STRETCHDIB = {13}
		RC_OP_DX_OUTPUT = {14}
		RC_DEVBITS = {15}
		DIB_RGB_COLORS = 0 // {}
		DIB_PAL_COLORS = 1 // {0}
		SYSPAL_ERROR = 0 // {}
		SYSPAL_STATIC = 1 // {0}
		SYSPAL_NOSTATIC = 2 // {1}
		CBM_INIT = 4 // {2}
		FLOODFILLBORDER = 0 // {}
		FLOODFILLSURFACE = 1 // {0}
		CCHDEVICENAME = 32 // {5}
		CCHFORMNAME = 32 // {5}
		DM_SPECVERSION = {0, 10}
		DM_ORIENTATION = {0}
		DM_PAPERSIZE = {1}
		DM_PAPERLENGTH = {2}
		DM_PAPERWIDTH = {3}
		DM_SCALE = {4}
		DM_COPIES = {8}
		DM_DEFAULTSOURCE = {9}
		DM_PRINTQUALITY = {10}
		DM_COLOR = {11}
		DM_DUPLEX = {12}
		DM_YRESOLUTION = {13}
		DM_TTOPTION = {14}
		DM_COLLATE = {15}
		DM_FORMNAME = {16}
		DM_LOGPIXELS = {17}
		DM_BITSPERPEL = {18}
		DM_PELSWIDTH = {19}
		DM_PELSHEIGHT = {20}
		DM_DISPLAYFLAGS = {21}
		DM_DISPLAYFREQUENCY = {22}
		DM_PANNINGWIDTH = {23}
		DM_PANNINGHEIGHT = {24}
		DM_ICMMETHOD = {25}
		DM_ICMINTENT = {26}
		DM_MEDIATYPE = {27}
		DM_DITHERTYPE = {28}
		DM_ICCMANUFACTURER = {29}
		DM_ICCMODEL = {30}
		DMORIENT_PORTRAIT = 1 // {0}
		DMORIENT_LANDSCAPE = 2 // {1}
		DMPAPER_FIRST = 1 // {0}
		DMPAPER_LETTER = 1 // {0}
		DMPAPER_LETTERSMALL = 2 // {1}
		DMPAPER_TABLOID = 3 // {0, 1}
		DMPAPER_LEDGER = 4 // {2}
		DMPAPER_LEGAL = 5 // {0, 2}
		DMPAPER_STATEMENT = 6 // {1, 2}
		DMPAPER_EXECUTIVE = 7 // {0..2}
		DMPAPER_A3 = 8 // {3}
		DMPAPER_A4 = 9 // {0, 3}
		DMPAPER_A4SMALL = 10 // {1, 3}
		DMPAPER_A5 = 11 // {0, 1, 3}
		DMPAPER_B4 = 12 // {2, 3}
		DMPAPER_B5 = 13 // {0, 2, 3}
		DMPAPER_FOLIO = 14 // {1..3}
		DMPAPER_QUARTO = 15 // {0..3}
		DMPAPER_10X14 = 16 // {4}
		DMPAPER_11X17 = 17 // {0, 4}
		DMPAPER_NOTE = 18 // {1, 4}
		DMPAPER_ENV_9 = 19 // {0, 1, 4}
		DMPAPER_ENV_10 = 20 // {2, 4}
		DMPAPER_ENV_11 = 21 // {0, 2, 4}
		DMPAPER_ENV_12 = 22 // {1, 2, 4}
		DMPAPER_ENV_14 = 23 // {0..2, 4}
		DMPAPER_CSHEET = 24 // {3, 4}
		DMPAPER_DSHEET = 25 // {0, 3, 4}
		DMPAPER_ESHEET = 26 // {1, 3, 4}
		DMPAPER_ENV_DL = 27 // {0, 1, 3, 4}
		DMPAPER_ENV_C5 = 28 // {2..4}
		DMPAPER_ENV_C3 = 29 // {0, 2..4}
		DMPAPER_ENV_C4 = 30 // {1..4}
		DMPAPER_ENV_C6 = 31 // {0..4}
		DMPAPER_ENV_C65 = 32 // {5}
		DMPAPER_ENV_B4 = 33 // {0, 5}
		DMPAPER_ENV_B5 = 34 // {1, 5}
		DMPAPER_ENV_B6 = 35 // {0, 1, 5}
		DMPAPER_ENV_ITALY = 36 // {2, 5}
		DMPAPER_ENV_MONARCH = 37 // {0, 2, 5}
		DMPAPER_ENV_PERSONAL = 38 // {1, 2, 5}
		DMPAPER_FANFOLD_US = 39 // {0..2, 5}
		DMPAPER_FANFOLD_STD_GERMAN = 40 // {3, 5}
		DMPAPER_FANFOLD_LGL_GERMAN = 41 // {0, 3, 5}
		DMPAPER_ISO_B4 = 42 // {1, 3, 5}
		DMPAPER_JAPANESE_POSTCARD = 43 // {0, 1, 3, 5}
		DMPAPER_9X11 = 44 // {2, 3, 5}
		DMPAPER_10X11 = 45 // {0, 2, 3, 5}
		DMPAPER_15X11 = 46 // {1..3, 5}
		DMPAPER_ENV_INVITE = 47 // {0..3, 5}
		DMPAPER_RESERVED_48 = 48 // {4, 5}
		DMPAPER_RESERVED_49 = 49 // {0, 4, 5}
		DMPAPER_LETTER_EXTRA = 50 // {1, 4, 5}
		DMPAPER_LEGAL_EXTRA = 51 // {0, 1, 4, 5}
		DMPAPER_TABLOID_EXTRA = 52 // {2, 4, 5}
		DMPAPER_A4_EXTRA = 53 // {0, 2, 4, 5}
		DMPAPER_LETTER_TRANSVERSE = 54 // {1, 2, 4, 5}
		DMPAPER_A4_TRANSVERSE = 55 // {0..2, 4, 5}
		DMPAPER_LETTER_EXTRA_TRANSVERSE = 56 // {3..5}
		DMPAPER_A_PLUS = 57 // {0, 3..5}
		DMPAPER_B_PLUS = 58 // {1, 3..5}
		DMPAPER_LETTER_PLUS = 59 // {0, 1, 3..5}
		DMPAPER_A4_PLUS = 60 // {2..5}
		DMPAPER_A5_TRANSVERSE = 61 // {0, 2..5}
		DMPAPER_B5_TRANSVERSE = 62 // {1..5}
		DMPAPER_A3_EXTRA = 63 // {0..5}
		DMPAPER_A5_EXTRA = 64 // {6}
		DMPAPER_B5_EXTRA = 65 // {0, 6}
		DMPAPER_A2 = 66 // {1, 6}
		DMPAPER_A3_TRANSVERSE = 67 // {0, 1, 6}
		DMPAPER_A3_EXTRA_TRANSVERSE = 68 // {2, 6}
		DMPAPER_LAST = 68 // {2, 6}
		DMPAPER_USER = 256 // {8}
		DMBIN_FIRST = 1 // {0}
		DMBIN_UPPER = 1 // {0}
		DMBIN_ONLYONE = 1 // {0}
		DMBIN_LOWER = 2 // {1}
		DMBIN_MIDDLE = 3 // {0, 1}
		DMBIN_MANUAL = 4 // {2}
		DMBIN_ENVELOPE = 5 // {0, 2}
		DMBIN_ENVMANUAL = 6 // {1, 2}
		DMBIN_AUTO = 7 // {0..2}
		DMBIN_TRACTOR = 8 // {3}
		DMBIN_SMALLFMT = 9 // {0, 3}
		DMBIN_LARGEFMT = 10 // {1, 3}
		DMBIN_LARGECAPACITY = 11 // {0, 1, 3}
		DMBIN_CASSETTE = 14 // {1..3}
		DMBIN_FORMSOURCE = 15 // {0..3}
		DMBIN_LAST = 15 // {0..3}
		DMBIN_USER = 256 // {8}
		DMRES_DRAFT = -1 // {0..31}
		DMRES_LOW = -2 // {1..31}
		DMRES_MEDIUM = -3 // {0, 2..31}
		DMRES_HIGH = -4 // {2..31}
		DMCOLOR_MONOCHROME = 1 // {0}
		DMCOLOR_COLOR = 2 // {1}
		DMDUP_SIMPLEX = 1 // {0}
		DMDUP_VERTICAL = 2 // {1}
		DMDUP_HORIZONTAL = 3 // {0, 1}
		DMTT_BITMAP = 1 // {0}
		DMTT_DOWNLOAD = 2 // {1}
		DMTT_SUBDEV = 3 // {0, 1}
		DMTT_DOWNLOAD_OUTLINE = 4 // {2}
		DMCOLLATE_FALSE = 0 // {}
		DMCOLLATE_TRUE = 1 // {0}
		DM_GRAYSCALE = {0}
		DM_INTERLACED = {1}
		DM_TEXTMODE = {2}
		DMICMMETHOD_NONE = 1 // {0}
		DMICMMETHOD_SYSTEM = 2 // {1}
		DMICMMETHOD_DRIVER = 3 // {0, 1}
		DMICMMETHOD_DEVICE = 4 // {2}
		DMICMMETHOD_USER = 256 // {8}
		DMICM_SATURATE = 1 // {0}
		DMICM_CONTRAST = 2 // {1}
		DMICM_COLORMETRIC = 3 // {0, 1}
		DMICM_USER = 256 // {8}
		DMMEDIA_STANDARD = 1 // {0}
		DMMEDIA_TRANSPARENCY = 2 // {1}
		DMMEDIA_GLOSSY = 3 // {0, 1}
		DMMEDIA_USER = 256 // {8}
		DMDITHER_NONE = 1 // {0}
		DMDITHER_COARSE = 2 // {1}
		DMDITHER_FINE = 3 // {0, 1}
		DMDITHER_LINEART = 4 // {2}
		DMDITHER_GRAYSCALE = 5 // {0, 2}
		DMDITHER_USER = 256 // {8}
		RDH_RECTANGLES = 1 // {0}
		GGO_METRICS = 0 // {}
		GGO_BITMAP = 1 // {0}
		GGO_NATIVE = 2 // {1}
		GGO_GRAY2_BITMAP = 4 // {2}
		GGO_GRAY4_BITMAP = 5 // {0, 2}
		GGO_GRAY8_BITMAP = 6 // {1, 2}
		GGO_GLYPH_INDEX = 128 // {7}
		TT_POLYGON_TYPE = 24 // {3, 4}
		TT_PRIM_LINE = 1 // {0}
		TT_PRIM_QSPLINE = 2 // {1}
		GCP_DBCS = {0}
		GCP_REORDER = {1}
		GCP_USEKERNING = {3}
		GCP_GLYPHSHAPE = {4}
		GCP_LIGATE = {5}
		GCP_DIACRITIC = {8}
		GCP_KASHIDA = {10}
		GCP_ERROR = {15}
		FLI_MASK = {0, 1, 3..5, 12}
		GCP_JUSTIFY = {16}
		FLI_GLYPHS = {18}
		GCP_CLASSIN = {19}
		GCP_MAXEXTENT = {20}
		GCP_JUSTIFYIN = {21}
		GCP_DISPLAYZWG = {22}
		GCP_SYMSWAPOFF = {23}
		GCP_NUMERICOVERRIDE = {24}
		GCP_NEUTRALOVERRIDE = {25}
		GCP_NUMERICSLATIN = {26}
		GCP_NUMERICSLOCAL = {27}
		GCPCLASS_LATIN = 1 // {0}
		GCPCLASS_HEBREW = 2 // {1}
		GCPCLASS_ARABIC = 2 // {1}
		GCPCLASS_NEUTRAL = 3 // {0, 1}
		GCPCLASS_LOCALNUMBER = 4 // {2}
		GCPCLASS_LATINNUMBER = 5 // {0, 2}
		GCPCLASS_LATINNUMERICTERMINATOR = 6 // {1, 2}
		GCPCLASS_LATINNUMERICSEPARATOR = 7 // {0..2}
		GCPCLASS_NUMERICSEPARATOR = 8 // {3}
		GCPCLASS_PREBOUNDLTR = 128 // {7}
		GCPCLASS_PREBOUNDRTL = 64 // {6}
		GCPCLASS_POSTBOUNDLTR = 32 // {5}
		GCPCLASS_POSTBOUNDRTL = 16 // {4}
		GCPGLYPH_LINKBEFORE = 32768 // {15}
		GCPGLYPH_LINKAFTER = 16384 // {14}
		TT_AVAILABLE = 1 // {0}
		TT_ENABLED = 2 // {1}
		PFD_TYPE_RGBA = 0 // {}
		PFD_TYPE_COLORINDEX = 1 // {0}
		PFD_MAIN_PLANE = 0 // {}
		PFD_OVERLAY_PLANE = 1 // {0}
		PFD_UNDERLAY_PLANE = -1 // {0..31}
		PFD_DOUBLEBUFFER = {0}
		PFD_STEREO = {1}
		PFD_DRAW_TO_WINDOW = {2}
		PFD_DRAW_TO_BITMAP = {3}
		PFD_SUPPORT_GDI = {4}
		PFD_SUPPORT_OPENGL = {5}
		PFD_GENERIC_FORMAT = {6}
		PFD_NEED_PALETTE = {7}
		PFD_NEED_SYSTEM_PALETTE = {8}
		PFD_SWAP_EXCHANGE = {9}
		PFD_SWAP_COPY = {10}
		PFD_SWAP_LAYER_BUFFERS = {11}
		PFD_DOUBLEBUFFER_DONTCARE = {30}
		PFD_STEREO_DONTCARE = {31}
		DC_BINADJUST = 19 // {0, 1, 4}
		DC_EMF_COMPLIANT = 20 // {2, 4}
		DC_DATATYPE_PRODUCED = 21 // {0, 2, 4}
		DC_COLLATE = 22 // {1, 2, 4}
		DCTT_BITMAP = {0}
		DCTT_DOWNLOAD = {1}
		DCTT_SUBDEV = {2}
		DCTT_DOWNLOAD_OUTLINE = {3}
		DCBA_FACEUPNONE = 0 // {}
		DCBA_FACEUPCENTER = 1 // {0}
		DCBA_FACEUPLEFT = 2 // {1}
		DCBA_FACEUPRIGHT = 3 // {0, 1}
		DCBA_FACEDOWNNONE = 256 // {8}
		DCBA_FACEDOWNCENTER = 257 // {0, 8}
		DCBA_FACEDOWNLEFT = 258 // {1, 8}
		DCBA_FACEDOWNRIGHT = 259 // {0, 1, 8}
		CA_NEGATIVE = 1 // {0}
		CA_LOG_FILTER = 2 // {1}
		ILLUMINANT_DEVICE_DEFAULT = 0 // {}
		ILLUMINANT_A = 1 // {0}
		ILLUMINANT_B = 2 // {1}
		ILLUMINANT_C = 3 // {0, 1}
		ILLUMINANT_D50 = 4 // {2}
		ILLUMINANT_D55 = 5 // {0, 2}
		ILLUMINANT_D65 = 6 // {1, 2}
		ILLUMINANT_D75 = 7 // {0..2}
		ILLUMINANT_F2 = 8 // {3}
		ILLUMINANT_MAX_INDEX = 8 // {3}
		ILLUMINANT_TUNGSTEN = 1 // {0}
		ILLUMINANT_DAYLIGHT = 3 // {0, 1}
		ILLUMINANT_FLUORESCENT = 8 // {3}
		ILLUMINANT_NTSC = 3 // {0, 1}
		RGB_GAMMA_MIN = 1344 // {6, 8, 10}
		RGB_GAMMA_MAX = 65000 // {3, 5..8, 10..15}
		REFERENCE_WHITE_MIN = 6000 // {4..6, 8..10, 12}
		REFERENCE_WHITE_MAX = 10000 // {4, 8..10, 13}
		REFERENCE_BLACK_MIN = 0 // {}
		REFERENCE_BLACK_MAX = 4000 // {5, 7..11}
		COLOR_ADJ_MIN = -100 // {2..4, 7..31}
		COLOR_ADJ_MAX = 100 // {2, 5, 6}
		DI_APPBANDING = 1 // {0}
		FONTMAPPER_MAX = 10 // {1, 3}
		ICM_OFF = 1 // {0}
		ICM_ON = 2 // {1}
		ICM_QUERY = 3 // {0, 1}
		ICM_ADDPROFILE = 1 // {0}
		ICM_DELETEPROFILE = 2 // {1}
		ICM_QUERYPROFILE = 3 // {0, 1}
		ICM_SETDEFAULTPROFILE = 4 // {2}
		ICM_REGISTERICMATCHER = 5 // {0, 2}
		ICM_UNREGISTERICMATCHER = 6 // {1, 2}
		ICM_QUERYMATCH = 7 // {0..2}
		ENHMETA_SIGNATURE = 1179469088 // {5, 8, 10, 14, 16, 18, 19, 22, 25, 26, 30}
		ENHMETA_STOCK_OBJECT = 80000000h
		EMR_HEADER = 1 // {0}
		EMR_POLYBEZIER = 2 // {1}
		EMR_POLYGON = 3 // {0, 1}
		EMR_POLYLINE = 4 // {2}
		EMR_POLYBEZIERTO = 5 // {0, 2}
		EMR_POLYLINETO = 6 // {1, 2}
		EMR_POLYPOLYLINE = 7 // {0..2}
		EMR_POLYPOLYGON = 8 // {3}
		EMR_SETWINDOWEXTEX = 9 // {0, 3}
		EMR_SETWINDOWORGEX = 10 // {1, 3}
		EMR_SETVIEWPORTEXTEX = 11 // {0, 1, 3}
		EMR_SETVIEWPORTORGEX = 12 // {2, 3}
		EMR_SETBRUSHORGEX = 13 // {0, 2, 3}
		EMR_EOF = 14 // {1..3}
		EMR_SETPIXELV = 15 // {0..3}
		EMR_SETMAPPERFLAGS = 16 // {4}
		EMR_SETMAPMODE = 17 // {0, 4}
		EMR_SETBKMODE = 18 // {1, 4}
		EMR_SETPOLYFILLMODE = 19 // {0, 1, 4}
		EMR_SETROP2 = 20 // {2, 4}
		EMR_SETSTRETCHBLTMODE = 21 // {0, 2, 4}
		EMR_SETTEXTALIGN = 22 // {1, 2, 4}
		EMR_SETCOLORADJUSTMENT = 23 // {0..2, 4}
		EMR_SETTEXTCOLOR = 24 // {3, 4}
		EMR_SETBKCOLOR = 25 // {0, 3, 4}
		EMR_OFFSETCLIPRGN = 26 // {1, 3, 4}
		EMR_MOVETOEX = 27 // {0, 1, 3, 4}
		EMR_SETMETARGN = 28 // {2..4}
		EMR_EXCLUDECLIPRECT = 29 // {0, 2..4}
		EMR_INTERSECTCLIPRECT = 30 // {1..4}
		EMR_SCALEVIEWPORTEXTEX = 31 // {0..4}
		EMR_SCALEWINDOWEXTEX = 32 // {5}
		EMR_SAVEDC = 33 // {0, 5}
		EMR_RESTOREDC = 34 // {1, 5}
		EMR_SETWORLDTRANSFORM = 35 // {0, 1, 5}
		EMR_MODIFYWORLDTRANSFORM = 36 // {2, 5}
		EMR_SELECTOBJECT = 37 // {0, 2, 5}
		EMR_CREATEPEN = 38 // {1, 2, 5}
		EMR_CREATEBRUSHINDIRECT = 39 // {0..2, 5}
		EMR_DELETEOBJECT = 40 // {3, 5}
		EMR_ANGLEARC = 41 // {0, 3, 5}
		EMR_ELLIPSE = 42 // {1, 3, 5}
		EMR_RECTANGLE = 43 // {0, 1, 3, 5}
		EMR_ROUNDRECT = 44 // {2, 3, 5}
		EMR_ARC = 45 // {0, 2, 3, 5}
		EMR_CHORD = 46 // {1..3, 5}
		EMR_PIE = 47 // {0..3, 5}
		EMR_SELECTPALETTE = 48 // {4, 5}
		EMR_CREATEPALETTE = 49 // {0, 4, 5}
		EMR_SETPALETTEENTRIES = 50 // {1, 4, 5}
		EMR_RESIZEPALETTE = 51 // {0, 1, 4, 5}
		EMR_REALIZEPALETTE = 52 // {2, 4, 5}
		EMR_EXTFLOODFILL = 53 // {0, 2, 4, 5}
		EMR_LINETO = 54 // {1, 2, 4, 5}
		EMR_ARCTO = 55 // {0..2, 4, 5}
		EMR_POLYDRAW = 56 // {3..5}
		EMR_SETARCDIRECTION = 57 // {0, 3..5}
		EMR_SETMITERLIMIT = 58 // {1, 3..5}
		EMR_BEGINPATH = 59 // {0, 1, 3..5}
		EMR_ENDPATH = 60 // {2..5}
		EMR_CLOSEFIGURE = 61 // {0, 2..5}
		EMR_FILLPATH = 62 // {1..5}
		EMR_STROKEANDFILLPATH = 63 // {0..5}
		EMR_STROKEPATH = 64 // {6}
		EMR_FLATTENPATH = 65 // {0, 6}
		EMR_WIDENPATH = 66 // {1, 6}
		EMR_SELECTCLIPPATH = 67 // {0, 1, 6}
		EMR_ABORTPATH = 68 // {2, 6}
		EMR_GDICOMMENT = 70 // {1, 2, 6}
		EMR_FILLRGN = 71 // {0..2, 6}
		EMR_FRAMERGN = 72 // {3, 6}
		EMR_INVERTRGN = 73 // {0, 3, 6}
		EMR_PAINTRGN = 74 // {1, 3, 6}
		EMR_EXTSELECTCLIPRGN = 75 // {0, 1, 3, 6}
		EMR_BITBLT = 76 // {2, 3, 6}
		EMR_STRETCHBLT = 77 // {0, 2, 3, 6}
		EMR_MASKBLT = 78 // {1..3, 6}
		EMR_PLGBLT = 79 // {0..3, 6}
		EMR_SETDIBITSTODEVICE = 80 // {4, 6}
		EMR_STRETCHDIBITS = 81 // {0, 4, 6}
		EMR_EXTCREATEFONTINDIRECTW = 82 // {1, 4, 6}
		EMR_EXTTEXTOUTA = 83 // {0, 1, 4, 6}
		EMR_EXTTEXTOUTW = 84 // {2, 4, 6}
		EMR_POLYBEZIER16 = 85 // {0, 2, 4, 6}
		EMR_POLYGON16 = 86 // {1, 2, 4, 6}
		EMR_POLYLINE16 = 87 // {0..2, 4, 6}
		EMR_POLYBEZIERTO16 = 88 // {3, 4, 6}
		EMR_POLYLINETO16 = 89 // {0, 3, 4, 6}
		EMR_POLYPOLYLINE16 = 90 // {1, 3, 4, 6}
		EMR_POLYPOLYGON16 = 91 // {0, 1, 3, 4, 6}
		EMR_POLYDRAW16 = 92 // {2..4, 6}
		EMR_CREATEMONOBRUSH = 93 // {0, 2..4, 6}
		EMR_CREATEDIBPATTERNBRUSHPT = 94 // {1..4, 6}
		EMR_EXTCREATEPEN = 95 // {0..4, 6}
		EMR_POLYTEXTOUTA = 96 // {5, 6}
		EMR_POLYTEXTOUTW = 97 // {0, 5, 6}
		EMR_SETICMMODE = 98 // {1, 5, 6}
		EMR_CREATECOLORSPACE = 99 // {0, 1, 5, 6}
		EMR_SETCOLORSPACE = 100 // {2, 5, 6}
		EMR_DELETECOLORSPACE = 101 // {0, 2, 5, 6}
		EMR_GLSRECORD = 102 // {1, 2, 5, 6}
		EMR_GLSBOUNDEDRECORD = 103 // {0..2, 5, 6}
		EMR_PIXELFORMAT = 104 // {3, 5, 6}
		EMR_MIN = 1 // {0}
		EMR_MAX = 104 // {3, 5, 6}
		GDICOMMENT_IDENTIFIER = 1128875079 // {0..2, 6, 10, 14, 16, 19, 22, 24, 25, 30}
		GDICOMMENT_WINDOWS_METAFILE = -2147483647 // {0, 31}
		GDICOMMENT_BEGINGROUP = 2 // {1}
		GDICOMMENT_ENDGROUP = 3 // {0, 1}
		GDICOMMENT_MULTIFORMATS = 1073741828 // {2, 30}
		EPS_SIGNATURE = 1179865157 // {0, 2, 6, 12, 14, 16, 17, 20, 22, 25, 26, 30}
		WGL_FONT_LINES = 0 // {}
		WGL_FONT_POLYGONS = 1 // {0}
		LPD_DOUBLEBUFFER = {0}
		LPD_STEREO = {1}
		LPD_SUPPORT_GDI = {4}
		LPD_SUPPORT_OPENGL = {5}
		LPD_SHARE_DEPTH = {6}
		LPD_SHARE_STENCIL = {7}
		LPD_SHARE_ACCUM = {8}
		LPD_SWAP_EXCHANGE = {9}
		LPD_SWAP_COPY = {10}
		LPD_TRANSPARENT = {12}
		LPD_TYPE_RGBA = {}
		LPD_TYPE_COLORINDEX = {0}
		WGL_SWAP_MAIN_PLANE = {0}
		WGL_SWAP_OVERLAY1 = {1}
		WGL_SWAP_OVERLAY2 = {2}
		WGL_SWAP_OVERLAY3 = {3}
		WGL_SWAP_OVERLAY4 = {4}
		WGL_SWAP_OVERLAY5 = {5}
		WGL_SWAP_OVERLAY6 = {6}
		WGL_SWAP_OVERLAY7 = {7}
		WGL_SWAP_OVERLAY8 = {8}
		WGL_SWAP_OVERLAY9 = {9}
		WGL_SWAP_OVERLAY10 = {10}
		WGL_SWAP_OVERLAY11 = {11}
		WGL_SWAP_OVERLAY12 = {12}
		WGL_SWAP_OVERLAY13 = {13}
		WGL_SWAP_OVERLAY14 = {14}
		WGL_SWAP_OVERLAY15 = {15}
		WGL_SWAP_UNDERLAY1 = {16}
		WGL_SWAP_UNDERLAY2 = {17}
		WGL_SWAP_UNDERLAY3 = {18}
		WGL_SWAP_UNDERLAY4 = {19}
		WGL_SWAP_UNDERLAY5 = {20}
		WGL_SWAP_UNDERLAY6 = {21}
		WGL_SWAP_UNDERLAY7 = {22}
		WGL_SWAP_UNDERLAY8 = {23}
		WGL_SWAP_UNDERLAY9 = {24}
		WGL_SWAP_UNDERLAY10 = {25}
		WGL_SWAP_UNDERLAY11 = {26}
		WGL_SWAP_UNDERLAY12 = {27}
		WGL_SWAP_UNDERLAY13 = {28}
		WGL_SWAP_UNDERLAY14 = {29}
		WGL_SWAP_UNDERLAY15 = {30}
		RT_CURSOR = 1 // {0}
		RT_BITMAP = 2 // {1}
		RT_ICON = 3 // {0, 1}
		RT_MENU = 4 // {2}
		RT_DIALOG = 5 // {0, 2}
		RT_STRING = 6 // {1, 2}
		RT_FONTDIR = 7 // {0..2}
		RT_FONT = 8 // {3}
		RT_ACCELERATOR = 9 // {0, 3}
		RT_RCDATA = 10 // {1, 3}
		RT_MESSAGETABLE = 11 // {0, 1, 3}
		DIFFERENCE = 11 // {0, 1, 3}
		RT_GROUP_CURSOR = 12 // {2, 3}
		RT_GROUP_ICON = 14 // {1..3}
		RT_VERSION = 16 // {4}
		RT_DLGINCLUDE = 17 // {0, 4}
		RT_PLUGPLAY = 19 // {0, 1, 4}
		RT_VXD = 20 // {2, 4}
		SB_HORZ = 0 // {}
		SB_VERT = 1 // {0}
		SB_CTL = 2 // {1}
		SB_BOTH = 3 // {0, 1}
		SB_LINEUP = 0 // {}
		SB_LINELEFT = 0 // {}
		SB_LINEDOWN = 1 // {0}
		SB_LINERIGHT = 1 // {0}
		SB_PAGEUP = 2 // {1}
		SB_PAGELEFT = 2 // {1}
		SB_PAGEDOWN = 3 // {0, 1}
		SB_PAGERIGHT = 3 // {0, 1}
		SB_THUMBPOSITION = 4 // {2}
		SB_THUMBTRACK = 5 // {0, 2}
		SB_TOP = 6 // {1, 2}
		SB_LEFT = 6 // {1, 2}
		SB_BOTTOM = 7 // {0..2}
		SB_RIGHT = 7 // {0..2}
		SB_ENDSCROLL = 8 // {3}
		SW_HIDE = 0 // {}
		SW_SHOWNORMAL = 1 // {0}
		SW_NORMAL = 1 // {0}
		SW_SHOWMINIMIZED = 2 // {1}
		SW_SHOWMAXIMIZED = 3 // {0, 1}
		SW_MAXIMIZE = 3 // {0, 1}
		SW_SHOWNOACTIVATE = 4 // {2}
		SW_SHOW = 5 // {0, 2}
		SW_MINIMIZE = 6 // {1, 2}
		SW_SHOWMINNOACTIVE = 7 // {0..2}
		SW_SHOWNA = 8 // {3}
		SW_RESTORE = 9 // {0, 3}
		SW_SHOWDEFAULT = 10 // {1, 3}
		SW_MAX = 10 // {1, 3}
		HIDE_WINDOW = 0 // {}
		SHOW_OPENWINDOW = 1 // {0}
		SHOW_ICONWINDOW = 2 // {1}
		SHOW_FULLSCREEN = 3 // {0, 1}
		SHOW_OPENNOACTIVATE = 4 // {2}
		SW_PARENTCLOSING = 1 // {0}
		SW_OTHERZOOM = 2 // {1}
		SW_PARENTOPENING = 3 // {0, 1}
		SW_OTHERUNZOOM = 4 // {2}
		KF_EXTENDED = 256 // {8}
		KF_DLGMODE = 2048 // {11}
		KF_MENUMODE = 4096 // {12}
		KF_ALTDOWN = 8192 // {13}
		KF_REPEAT = 16384 // {14}
		KF_UP = 32768 // {15}
		VK_LBUTTON = 1 // {0}
		VK_RBUTTON = 2 // {1}
		VK_CANCEL = 3 // {0, 1}
		VK_MBUTTON = 4 // {2}
		VK_BACK = 8 // {3}
		VK_TAB = 9 // {0, 3}
		VK_CLEAR = 12 // {2, 3}
		VK_RETURN = 13 // {0, 2, 3}
		VK_SHIFT = 16 // {4}
		VK_CONTROL = 17 // {0, 4}
		VK_MENU = 18 // {1, 4}
		VK_PAUSE = 19 // {0, 1, 4}
		VK_CAPITAL = 20 // {2, 4}
		VK_ESCAPE = 27 // {0, 1, 3, 4}
		VK_SPACE = 32 // {5}
		VK_PRIOR = 33 // {0, 5}
		VK_NEXT = 34 // {1, 5}
		VK_END = 35 // {0, 1, 5}
		VK_HOME = 36 // {2, 5}
		VK_LEFT = 37 // {0, 2, 5}
		VK_UP = 38 // {1, 2, 5}
		VK_RIGHT = 39 // {0..2, 5}
		VK_DOWN = 40 // {3, 5}
		VK_SELECT = 41 // {0, 3, 5}
		VK_PRINT = 42 // {1, 3, 5}
		VK_EXECUTE = 43 // {0, 1, 3, 5}
		VK_SNAPSHOT = 44 // {2, 3, 5}
		VK_INSERT = 45 // {0, 2, 3, 5}
		VK_DELETE = 46 // {1..3, 5}
		VK_HELP = 47 // {0..3, 5}
		VK_LWIN = 91 // {0, 1, 3, 4, 6}
		VK_RWIN = 92 // {2..4, 6}
		VK_APPS = 93 // {0, 2..4, 6}
		VK_NUMPAD0 = 96 // {5, 6}
		VK_NUMPAD1 = 97 // {0, 5, 6}
		VK_NUMPAD2 = 98 // {1, 5, 6}
		VK_NUMPAD3 = 99 // {0, 1, 5, 6}
		VK_NUMPAD4 = 100 // {2, 5, 6}
		VK_NUMPAD5 = 101 // {0, 2, 5, 6}
		VK_NUMPAD6 = 102 // {1, 2, 5, 6}
		VK_NUMPAD7 = 103 // {0..2, 5, 6}
		VK_NUMPAD8 = 104 // {3, 5, 6}
		VK_NUMPAD9 = 105 // {0, 3, 5, 6}
		VK_MULTIPLY = 106 // {1, 3, 5, 6}
		VK_ADD = 107 // {0, 1, 3, 5, 6}
		VK_SEPARATOR = 108 // {2, 3, 5, 6}
		VK_SUBTRACT = 109 // {0, 2, 3, 5, 6}
		VK_DECIMAL = 110 // {1..3, 5, 6}
		VK_DIVIDE = 111 // {0..3, 5, 6}
		VK_F1 = 112 // {4..6}
		VK_F2 = 113 // {0, 4..6}
		VK_F3 = 114 // {1, 4..6}
		VK_F4 = 115 // {0, 1, 4..6}
		VK_F5 = 116 // {2, 4..6}
		VK_F6 = 117 // {0, 2, 4..6}
		VK_F7 = 118 // {1, 2, 4..6}
		VK_F8 = 119 // {0..2, 4..6}
		VK_F9 = 120 // {3..6}
		VK_F10 = 121 // {0, 3..6}
		VK_F11 = 122 // {1, 3..6}
		VK_F12 = 123 // {0, 1, 3..6}
		VK_F13 = 124 // {2..6}
		VK_F14 = 125 // {0, 2..6}
		VK_F15 = 126 // {1..6}
		VK_F16 = 127 // {0..6}
		VK_F17 = 128 // {7}
		VK_F18 = 129 // {0, 7}
		VK_F19 = 130 // {1, 7}
		VK_F20 = 131 // {0, 1, 7}
		VK_F21 = 132 // {2, 7}
		VK_F22 = 133 // {0, 2, 7}
		VK_F23 = 134 // {1, 2, 7}
		VK_F24 = 135 // {0..2, 7}
		VK_NUMLOCK = 144 // {4, 7}
		VK_SCROLL = 145 // {0, 4, 7}
		VK_LSHIFT = 160 // {5, 7}
		VK_RSHIFT = 161 // {0, 5, 7}
		VK_LCONTROL = 162 // {1, 5, 7}
		VK_RCONTROL = 163 // {0, 1, 5, 7}
		VK_LMENU = 164 // {2, 5, 7}
		VK_RMENU = 165 // {0, 2, 5, 7}
		VK_PROCESSKEY = 229 // {0, 2, 5..7}
		VK_ATTN = 246 // {1, 2, 4..7}
		VK_CRSEL = 247 // {0..2, 4..7}
		VK_EXSEL = 248 // {3..7}
		VK_EREOF = 249 // {0, 3..7}
		VK_PLAY = 250 // {1, 3..7}
		VK_ZOOM = 251 // {0, 1, 3..7}
		VK_NONAME = 252 // {2..7}
		VK_PA1 = 253 // {0, 2..7}
		VK_OEM_CLEAR = 254 // {1..7}
		WH_MIN = -1 // {0..31}
		WH_MSGFILTER = -1 // {0..31}
		WH_JOURNALRECORD = 0 // {}
		WH_JOURNALPLAYBACK = 1 // {0}
		WH_KEYBOARD = 2 // {1}
		WH_GETMESSAGE = 3 // {0, 1}
		WH_CALLWNDPROC = 4 // {2}
		WH_CBT = 5 // {0, 2}
		WH_SYSMSGFILTER = 6 // {1, 2}
		WH_MOUSE = 7 // {0..2}
		WH_HARDWARE = 8 // {3}
		WH_DEBUG = 9 // {0, 3}
		WH_SHELL = 10 // {1, 3}
		WH_FOREGROUNDIDLE = 11 // {0, 1, 3}
		WH_CALLWNDPROCRET = 12 // {2, 3}
		WH_MAX = 12 // {2, 3}
		WH_MINHOOK = -1 // {0..31}
		WH_MAXHOOK = 12 // {2, 3}
		HC_ACTION = 0 // {}
		HC_GETNEXT = 1 // {0}
		HC_SKIP = 2 // {1}
		HC_NOREMOVE = 3 // {0, 1}
		HC_NOREM = 3 // {0, 1}
		HC_SYSMODALON = 4 // {2}
		HC_SYSMODALOFF = 5 // {0, 2}
		HCBT_MOVESIZE = 0 // {}
		HCBT_MINMAX = 1 // {0}
		HCBT_QS = 2 // {1}
		HCBT_CREATEWND = 3 // {0, 1}
		HCBT_DESTROYWND = 4 // {2}
		HCBT_ACTIVATE = 5 // {0, 2}
		HCBT_CLICKSKIPPED = 6 // {1, 2}
		HCBT_KEYSKIPPED = 7 // {0..2}
		HCBT_SYSCOMMAND = 8 // {3}
		HCBT_SETFOCUS = 9 // {0, 3}
		MSGF_DIALOGBOX = 0 // {}
		MSGF_MESSAGEBOX = 1 // {0}
		MSGF_MENU = 2 // {1}
		MSGF_MOVE = 3 // {0, 1}
		MSGF_SIZE = 4 // {2}
		MSGF_SCROLLBAR = 5 // {0, 2}
		MSGF_NEXTWINDOW = 6 // {1, 2}
		MSGF_MAINLOOP = 8 // {3}
		MSGF_MAX = 8 // {3}
		MSGF_USER = 4096 // {12}
		HSHELL_WINDOWCREATED = 1 // {0}
		HSHELL_WINDOWDESTROYED = 2 // {1}
		HSHELL_ACTIVATESHELLWINDOW = 3 // {0, 1}
		HSHELL_WINDOWACTIVATED = 4 // {2}
		HSHELL_GETMINRECT = 5 // {0, 2}
		HSHELL_REDRAW = 6 // {1, 2}
		HSHELL_TASKMAN = 7 // {0..2}
		HSHELL_LANGUAGE = 8 // {3}
		HKL_PREV = 0 // {}
		HKL_NEXT = 1 // {0}
		KLF_ACTIVATE = 1 // {0}
		KLF_SUBSTITUTE_OK = 2 // {1}
		KLF_UNLOADPREVIOUS = 4 // {2}
		KLF_REORDER = 8 // {3}
		KLF_REPLACELANG = 16 // {4}
		KLF_NOTELLSHELL = 128 // {7}
		KL_NAMELENGTH = 9 // {0, 3}
		DESKTOP_READOBJECTS = {0}
		DESKTOP_CREATEWINDOW = {1}
		DESKTOP_CREATEMENU = {2}
		DESKTOP_HOOKCONTROL = {3}
		DESKTOP_JOURNALRECORD = {4}
		DESKTOP_JOURNALPLAYBACK = {5}
		DESKTOP_ENUMERATE = {6}
		DESKTOP_WRITEOBJECTS = {7}
		DESKTOP_SWITCHDESKTOP = {8}
		DF_ALLOWOTHERACCOUNTHOOK = {0}
		WINSTA_ENUMDESKTOPS = {0}
		WINSTA_READATTRIBUTES = {1}
		WINSTA_ACCESSCLIPBOARD = {2}
		WINSTA_CREATEDESKTOP = {3}
		WINSTA_WRITEATTRIBUTES = {4}
		WINSTA_ACCESSGLOBALATOMS = {5}
		WINSTA_EXITWINDOWS = {6}
		WINSTA_ENUMERATE = {8}
		WINSTA_READSCREEN = {9}
		WSF_VISIBLE = {0}
		UOI_FLAGS = 1 // {0}
		UOI_NAME = 2 // {1}
		UOI_TYPE = 3 // {0, 1}
		UOI_USER_SID = 4 // {2}
		GWL_WNDPROC = -4 // {2..31}
		GWL_HINSTANCE = -6 // {1, 3..31}
		GWL_HWNDPARENT = -8 // {3..31}
		GWL_STYLE = -16 // {4..31}
		GWL_EXSTYLE = -20 // {2, 3, 5..31}
		GWL_USERDATA = -21 // {0, 1, 3, 5..31}
		GWL_ID = -12 // {2, 4..31}
		GCL_MENUNAME = -8 // {3..31}
		GCL_HBRBACKGROUND = -10 // {1, 2, 4..31}
		GCL_HCURSOR = -12 // {2, 4..31}
		GCL_HICON = -14 // {1, 4..31}
		GCL_HMODULE = -16 // {4..31}
		GCL_CBWNDEXTRA = -18 // {1..3, 5..31}
		GCL_CBCLSEXTRA = -20 // {2, 3, 5..31}
		GCL_WNDPROC = -24 // {3, 5..31}
		GCL_STYLE = -26 // {1, 2, 5..31}
		GCW_ATOM = -32 // {5..31}
		GCL_HICONSM = -34 // {1..4, 6..31}
		WM_NULL = 0 // {}
		WM_CREATE = 1 // {0}
		WM_DESTROY = 2 // {1}
		WM_MOVE = 3 // {0, 1}
		WM_SIZE = 5 // {0, 2}
		WM_ACTIVATE = 6 // {1, 2}
		WA_INACTIVE = 0 // {}
		WA_ACTIVE = 1 // {0}
		WA_CLICKACTIVE = 2 // {1}
		WM_SETFOCUS = 7 // {0..2}
		WM_KILLFOCUS = 8 // {3}
		WM_ENABLE = 10 // {1, 3}
		WM_SETREDRAW = 11 // {0, 1, 3}
		WM_SETTEXT = 12 // {2, 3}
		WM_GETTEXT = 13 // {0, 2, 3}
		WM_GETTEXTLENGTH = 14 // {1..3}
		WM_PAINT = 15 // {0..3}
		WM_CLOSE = 16 // {4}
		WM_QUERYENDSESSION = 17 // {0, 4}
		WM_QUIT = 18 // {1, 4}
		WM_QUERYOPEN = 19 // {0, 1, 4}
		WM_ERASEBKGND = 20 // {2, 4}
		WM_SYSCOLORCHANGE = 21 // {0, 2, 4}
		WM_ENDSESSION = 22 // {1, 2, 4}
		WM_SHOWWINDOW = 24 // {3, 4}
		WM_WININICHANGE = 26 // {1, 3, 4}
		WM_SETTINGCHANGE = 26 // {1, 3, 4}
		WM_DEVMODECHANGE = 27 // {0, 1, 3, 4}
		WM_ACTIVATEAPP = 28 // {2..4}
		WM_FONTCHANGE = 29 // {0, 2..4}
		WM_TIMECHANGE = 30 // {1..4}
		WM_CANCELMODE = 31 // {0..4}
		WM_SETCURSOR = 32 // {5}
		WM_MOUSEACTIVATE = 33 // {0, 5}
		WM_CHILDACTIVATE = 34 // {1, 5}
		WM_QUEUESYNC = 35 // {0, 1, 5}
		WM_GETMINMAXINFO = 36 // {2, 5}
		WM_PAINTICON = 38 // {1, 2, 5}
		WM_ICONERASEBKGND = 39 // {0..2, 5}
		WM_NEXTDLGCTL = 40 // {3, 5}
		WM_SPOOLERSTATUS = 42 // {1, 3, 5}
		WM_DRAWITEM = 43 // {0, 1, 3, 5}
		WM_MEASUREITEM = 44 // {2, 3, 5}
		WM_DELETEITEM = 45 // {0, 2, 3, 5}
		WM_VKEYTOITEM = 46 // {1..3, 5}
		WM_CHARTOITEM = 47 // {0..3, 5}
		WM_SETFONT = 48 // {4, 5}
		WM_GETFONT = 49 // {0, 4, 5}
		WM_SETHOTKEY = 50 // {1, 4, 5}
		WM_GETHOTKEY = 51 // {0, 1, 4, 5}
		WM_QUERYDRAGICON = 55 // {0..2, 4, 5}
		WM_COMPAREITEM = 57 // {0, 3..5}
		WM_COMPACTING = 65 // {0, 6}
		WM_COMMNOTIFY = 68 // {2, 6}
		WM_WINDOWPOSCHANGING = 70 // {1, 2, 6}
		WM_WINDOWPOSCHANGED = 71 // {0..2, 6}
		WM_POWER = 72 // {3, 6}
		PWR_OK = 1 // {0}
		PWR_FAIL = -1 // {0..31}
		PWR_SUSPENDREQUEST = 1 // {0}
		PWR_SUSPENDRESUME = 2 // {1}
		PWR_CRITICALRESUME = 3 // {0, 1}
		WM_COPYDATA = 74 // {1, 3, 6}
		WM_CANCELJOURNAL = 75 // {0, 1, 3, 6}
		WM_NOTIFY = 78 // {1..3, 6}
		WM_INPUTLANGCHANGEREQUEST = 80 // {4, 6}
		WM_INPUTLANGCHANGE = 81 // {0, 4, 6}
		WM_TCARD = 82 // {1, 4, 6}
		WM_HELP = 83 // {0, 1, 4, 6}
		WM_USERCHANGED = 84 // {2, 4, 6}
		WM_NOTIFYFORMAT = 85 // {0, 2, 4, 6}
		NFR_ANSI = 1 // {0}
		NFR_UNICODE = 2 // {1}
		NF_QUERY = 3 // {0, 1}
		NF_REQUERY = 4 // {2}
		WM_CONTEXTMENU = 123 // {0, 1, 3..6}
		WM_STYLECHANGING = 124 // {2..6}
		WM_STYLECHANGED = 125 // {0, 2..6}
		WM_DISPLAYCHANGE = 126 // {1..6}
		WM_GETICON = 127 // {0..6}
		WM_SETICON = 128 // {7}
		WM_NCCREATE = 129 // {0, 7}
		WM_NCDESTROY = 130 // {1, 7}
		WM_NCCALCSIZE = 131 // {0, 1, 7}
		WM_NCHITTEST = 132 // {2, 7}
		WM_NCPAINT = 133 // {0, 2, 7}
		WM_NCACTIVATE = 134 // {1, 2, 7}
		WM_GETDLGCODE = 135 // {0..2, 7}
		WM_NCMOUSEMOVE = 160 // {5, 7}
		WM_NCLBUTTONDOWN = 161 // {0, 5, 7}
		WM_NCLBUTTONUP = 162 // {1, 5, 7}
		WM_NCLBUTTONDBLCLK = 163 // {0, 1, 5, 7}
		WM_NCRBUTTONDOWN = 164 // {2, 5, 7}
		WM_NCRBUTTONUP = 165 // {0, 2, 5, 7}
		WM_NCRBUTTONDBLCLK = 166 // {1, 2, 5, 7}
		WM_NCMBUTTONDOWN = 167 // {0..2, 5, 7}
		WM_NCMBUTTONUP = 168 // {3, 5, 7}
		WM_NCMBUTTONDBLCLK = 169 // {0, 3, 5, 7}
		WM_KEYFIRST = 256 // {8}
		WM_KEYDOWN = 256 // {8}
		WM_KEYUP = 257 // {0, 8}
		WM_CHAR = 258 // {1, 8}
		WM_DEADCHAR = 259 // {0, 1, 8}
		WM_SYSKEYDOWN = 260 // {2, 8}
		WM_SYSKEYUP = 261 // {0, 2, 8}
		WM_SYSCHAR = 262 // {1, 2, 8}
		WM_SYSDEADCHAR = 263 // {0..2, 8}
		WM_KEYLAST = 264 // {3, 8}
		WM_UNICHAR = 265
		WM_IME_STARTCOMPOSITION = 269 // {0, 2, 3, 8}
		WM_IME_ENDCOMPOSITION = 270 // {1..3, 8}
		WM_IME_COMPOSITION = 271 // {0..3, 8}
		WM_IME_KEYLAST = 271 // {0..3, 8}
		WM_INITDIALOG = 272 // {4, 8}
		WM_COMMAND = 273 // {0, 4, 8}
		WM_SYSCOMMAND = 274 // {1, 4, 8}
		WM_TIMER = 275 // {0, 1, 4, 8}
		WM_HSCROLL = 276 // {2, 4, 8}
		WM_VSCROLL = 277 // {0, 2, 4, 8}
		WM_INITMENU = 278 // {1, 2, 4, 8}
		WM_INITMENUPOPUP = 279 // {0..2, 4, 8}
		WM_MENUSELECT = 287 // {0..4, 8}
		WM_MENUCHAR = 288 // {5, 8}
		WM_ENTERIDLE = 289 // {0, 5, 8}
		WM_CTLCOLORMSGBOX = 306 // {1, 4, 5, 8}
		WM_CTLCOLOREDIT = 307 // {0, 1, 4, 5, 8}
		WM_CTLCOLORLISTBOX = 308 // {2, 4, 5, 8}
		WM_CTLCOLORBTN = 309 // {0, 2, 4, 5, 8}
		WM_CTLCOLORDLG = 310 // {1, 2, 4, 5, 8}
		WM_CTLCOLORSCROLLBAR = 311 // {0..2, 4, 5, 8}
		WM_CTLCOLORSTATIC = 312 // {3..5, 8}
		WM_MOUSEFIRST = 512 // {9}
		WM_MOUSEMOVE = 512 // {9}
		WM_LBUTTONDOWN = 513 // {0, 9}
		WM_LBUTTONUP = 514 // {1, 9}
		WM_LBUTTONDBLCLK = 515 // {0, 1, 9}
		WM_RBUTTONDOWN = 516 // {2, 9}
		WM_RBUTTONUP = 517 // {0, 2, 9}
		WM_RBUTTONDBLCLK = 518 // {1, 2, 9}
		WM_MBUTTONDOWN = 519 // {0..2, 9}
		WM_MBUTTONUP = 520 // {3, 9}
		WM_MBUTTONDBLCLK = 521 // {0, 3, 9}
		WM_MOUSEWHEEL = 522 // {1, 3, 9}
		WM_MOUSELAST = 522 // {1, 3, 9}
		WM_PARENTNOTIFY = 528 // {4, 9}
		MENULOOP_WINDOW = 0 // {}
		MENULOOP_POPUP = 1 // {0}
		WM_ENTERMENULOOP = 529 // {0, 4, 9}
		WM_EXITMENULOOP = 530 // {1, 4, 9}
		WM_NEXTMENU = 531 // {0, 1, 4, 9}
		WM_SIZING = 532 // {2, 4, 9}
		WM_CAPTURECHANGED = 533 // {0, 2, 4, 9}
		WM_MOVING = 534 // {1, 2, 4, 9}
		WM_POWERBROADCAST = 536 // {3, 4, 9}
		WM_DEVICECHANGE = 537 // {0, 3, 4, 9}
		WM_IME_SETCONTEXT = 641 // {0, 7, 9}
		WM_IME_NOTIFY = 642 // {1, 7, 9}
		WM_IME_CONTROL = 643 // {0, 1, 7, 9}
		WM_IME_COMPOSITIONFULL = 644 // {2, 7, 9}
		WM_IME_SELECT = 645 // {0, 2, 7, 9}
		WM_IME_CHAR = 646 // {1, 2, 7, 9}
		WM_IME_KEYDOWN = 656 // {4, 7, 9}
		WM_IME_KEYUP = 657 // {0, 4, 7, 9}
		WM_MDICREATE = 544 // {5, 9}
		WM_MDIDESTROY = 545 // {0, 5, 9}
		WM_MDIACTIVATE = 546 // {1, 5, 9}
		WM_MDIRESTORE = 547 // {0, 1, 5, 9}
		WM_MDINEXT = 548 // {2, 5, 9}
		WM_MDIMAXIMIZE = 549 // {0, 2, 5, 9}
		WM_MDITILE = 550 // {1, 2, 5, 9}
		WM_MDICASCADE = 551 // {0..2, 5, 9}
		WM_MDIICONARRANGE = 552 // {3, 5, 9}
		WM_MDIGETACTIVE = 553 // {0, 3, 5, 9}
		WM_MDISETMENU = 560 // {4, 5, 9}
		WM_ENTERSIZEMOVE = 561 // {0, 4, 5, 9}
		WM_EXITSIZEMOVE = 562 // {1, 4, 5, 9}
		WM_DROPFILES = 563 // {0, 1, 4, 5, 9}
		WM_MDIREFRESHMENU = 564 // {2, 4, 5, 9}
		WM_CUT = 768 // {8, 9}
		WM_COPY = 769 // {0, 8, 9}
		WM_PASTE = 770 // {1, 8, 9}
		WM_CLEAR = 771 // {0, 1, 8, 9}
		WM_UNDO = 772 // {2, 8, 9}
		WM_RENDERFORMAT = 773 // {0, 2, 8, 9}
		WM_RENDERALLFORMATS = 774 // {1, 2, 8, 9}
		WM_DESTROYCLIPBOARD = 775 // {0..2, 8, 9}
		WM_DRAWCLIPBOARD = 776 // {3, 8, 9}
		WM_PAINTCLIPBOARD = 777 // {0, 3, 8, 9}
		WM_VSCROLLCLIPBOARD = 778 // {1, 3, 8, 9}
		WM_SIZECLIPBOARD = 779 // {0, 1, 3, 8, 9}
		WM_ASKCBFORMATNAME = 780 // {2, 3, 8, 9}
		WM_CHANGECBCHAIN = 781 // {0, 2, 3, 8, 9}
		WM_HSCROLLCLIPBOARD = 782 // {1..3, 8, 9}
		WM_QUERYNEWPALETTE = 783 // {0..3, 8, 9}
		WM_PALETTEISCHANGING = 784 // {4, 8, 9}
		WM_PALETTECHANGED = 785 // {0, 4, 8, 9}
		WM_HOTKEY = 786 // {1, 4, 8, 9}
		WM_PRINT = 791 // {0..2, 4, 8, 9}
		WM_PRINTCLIENT = 792 // {3, 4, 8, 9}
		WM_HANDHELDFIRST = 856 // {3, 4, 6, 8, 9}
		WM_HANDHELDLAST = 863 // {0..4, 6, 8, 9}
		WM_AFXFIRST = 864 // {5, 6, 8, 9}
		WM_AFXLAST = 895 // {0..6, 8, 9}
		WM_PENWINFIRST = 896 // {7..9}
		WM_PENWINLAST = 911 // {0..3, 7..9}
		WM_APP = 32768 // {15}
		WM_USER = 1024 // {10}
		WMSZ_LEFT = 1 // {0}
		WMSZ_RIGHT = 2 // {1}
		WMSZ_TOP = 3 // {0, 1}
		WMSZ_TOPLEFT = 4 // {2}
		WMSZ_TOPRIGHT = 5 // {0, 2}
		WMSZ_BOTTOM = 6 // {1, 2}
		WMSZ_BOTTOMLEFT = 7 // {0..2}
		WMSZ_BOTTOMRIGHT = 8 // {3}
		UNICODE_NOCHAR = 0ffffh
		ST_BEGINSWP = 0 // {}
		ST_ENDSWP = 1 // {0}
		HTERROR = -2 // {1..31}
		HTTRANSPARENT = -1 // {0..31}
		HTNOWHERE = 0 // {}
		HTCLIENT = 1 // {0}
		HTCAPTION = 2 // {1}
		HTSYSMENU = 3 // {0, 1}
		HTGROWBOX = 4 // {2}
		HTSIZE = 4 // {2}
		HTMENU = 5 // {0, 2}
		HTHSCROLL = 6 // {1, 2}
		HTVSCROLL = 7 // {0..2}
		HTMINBUTTON = 8 // {3}
		HTMAXBUTTON = 9 // {0, 3}
		HTLEFT = 10 // {1, 3}
		HTRIGHT = 11 // {0, 1, 3}
		HTTOP = 12 // {2, 3}
		HTTOPLEFT = 13 // {0, 2, 3}
		HTTOPRIGHT = 14 // {1..3}
		HTBOTTOM = 15 // {0..3}
		HTBOTTOMLEFT = 16 // {4}
		HTBOTTOMRIGHT = 17 // {0, 4}
		HTBORDER = 18 // {1, 4}
		HTREDUCE = 8 // {3}
		HTZOOM = 9 // {0, 3}
		HTSIZEFIRST = 10 // {1, 3}
		HTSIZELAST = 17 // {0, 4}
		HTOBJECT = 19 // {0, 1, 4}
		HTCLOSE = 20 // {2, 4}
		HTHELP = 21 // {0, 2, 4}
		SMTO_NORMAL = 0 // {}
		SMTO_BLOCK = 1 // {0}
		SMTO_ABORTIFHUNG = 2 // {1}
		MA_ACTIVATE = 1 // {0}
		MA_ACTIVATEANDEAT = 2 // {1}
		MA_NOACTIVATE = 3 // {0, 1}
		MA_NOACTIVATEANDEAT = 4 // {2}
		ICON_SMALL = 0 // {}
		ICON_BIG = 1 // {0}
		SIZE_RESTORED = 0 // {}
		SIZE_MINIMIZED = 1 // {0}
		SIZE_MAXIMIZED = 2 // {1}
		SIZE_MAXSHOW = 3 // {0, 1}
		SIZE_MAXHIDE = 4 // {2}
		SIZENORMAL = 0 // {}
		SIZEICONIC = 1 // {0}
		SIZEFULLSCREEN = 2 // {1}
		SIZEZOOMSHOW = 3 // {0, 1}
		SIZEZOOMHIDE = 4 // {2}
		WVR_ALIGNTOP = {4}
		WVR_ALIGNLEFT = {5}
		WVR_ALIGNBOTTOM = {6}
		WVR_ALIGNRIGHT = {7}
		WVR_HREDRAW = {8}
		WVR_VREDRAW = {9}
		WVR_REDRAW = {8, 9}
		WVR_VALIDRECTS = {10}
		MK_LBUTTON = {0}
		MK_RBUTTON = {1}
		MK_SHIFT = {2}
		MK_CONTROL = {3}
		MK_MBUTTON = {4}
		WS_OVERLAPPED = {}
		WS_POPUP = {31}
		WS_CHILD = {30}
		WS_MINIMIZE = {29}
		WS_VISIBLE = {28}
		WS_DISABLED = {27}
		WS_CLIPSIBLINGS = {26}
		WS_CLIPCHILDREN = {25}
		WS_MAXIMIZE = {24}
		WS_CAPTION = {22, 23}
		WS_BORDER = {23}
		WS_DLGFRAME = {22}
		WS_VSCROLL = {21}
		WS_HSCROLL = {20}
		WS_SYSMENU = {19}
		WS_THICKFRAME = {18}
		WS_GROUP = {17}
		WS_TABSTOP = {16}
		WS_MINIMIZEBOX = {17}
		WS_MAXIMIZEBOX = {16}
		WS_TILED = {}
		WS_ICONIC = {29}
		WS_SIZEBOX = {18}
		WS_TILEDWINDOW = {16..19, 22, 23}
		WS_OVERLAPPEDWINDOW = {16..19, 22, 23}
		WS_POPUPWINDOW = {19, 23, 31}
		WS_CHILDWINDOW = {30}
		WS_EX_DLGMODALFRAME = {0}
		WS_EX_NOPARENTNOTIFY = {2}
		WS_EX_TOPMOST = {3}
		WS_EX_ACCEPTFILES = {4}
		WS_EX_TRANSPARENT = {5}
		WS_EX_MDICHILD = {6}
		WS_EX_TOOLWINDOW = {7}
		WS_EX_WINDOWEDGE = {8}
		WS_EX_CLIENTEDGE = {9}
		WS_EX_CONTEXTHELP = {10}
		WS_EX_RIGHT = {12}
		WS_EX_LEFT = {}
		WS_EX_RTLREADING = {13}
		WS_EX_LTRREADING = {}
		WS_EX_LEFTSCROLLBAR = {14}
		WS_EX_RIGHTSCROLLBAR = {}
		WS_EX_CONTROLPARENT = {16}
		WS_EX_STATICEDGE = {17}
		WS_EX_APPWINDOW = {18}
		WS_EX_OVERLAPPEDWINDOW = {8, 9}
		WS_EX_PALETTEWINDOW = {3, 7, 8}
		CS_VREDRAW = {0}
		CS_HREDRAW = {1}
		CS_KEYCVTWINDOW = {2}
		CS_DBLCLKS = {3}
		CS_OWNDC = {5}
		CS_CLASSDC = {6}
		CS_PARENTDC = {7}
		CS_NOKEYCVT = {8}
		CS_NOCLOSE = {9}
		CS_SAVEBITS = {11}
		CS_BYTEALIGNCLIENT = {12}
		CS_BYTEALIGNWINDOW = {13}
		CS_GLOBALCLASS = {14}
		CS_IME = {16}
		PRF_CHECKVISIBLE = {0}
		PRF_NONCLIENT = {1}
		PRF_CLIENT = {2}
		PRF_ERASEBKGND = {3}
		PRF_CHILDREN = {4}
		PRF_OWNED = {5}
		BDR_RAISEDOUTER = {0}
		BDR_SUNKENOUTER = {1}
		BDR_RAISEDINNER = {2}
		BDR_SUNKENINNER = {3}
		BDR_OUTER = {0, 1}
		BDR_INNER = {2, 3}
		BDR_RAISED = {0, 2}
		BDR_SUNKEN = {1, 3}
		EDGE_RAISED = {0, 2}
		EDGE_SUNKEN = {1, 3}
		EDGE_ETCHED = {1, 2}
		EDGE_BUMP = {0, 3}
		BF_LEFT = {0}
		BF_TOP = {1}
		BF_RIGHT = {2}
		BF_BOTTOM = {3}
		BF_TOPLEFT = {0, 1}
		BF_TOPRIGHT = {1, 2}
		BF_BOTTOMLEFT = {0, 3}
		BF_BOTTOMRIGHT = {2, 3}
		BF_RECT = {0..3}
		BF_DIAGONAL = {4}
		BF_DIAGONAL_ENDTOPRIGHT = {1, 2, 4}
		BF_DIAGONAL_ENDTOPLEFT = {0, 1, 4}
		BF_DIAGONAL_ENDBOTTOMLEFT = {0, 3, 4}
		BF_DIAGONAL_ENDBOTTOMRIGHT = {2..4}
		BF_MIDDLE = {11}
		BF_SOFT = {12}
		BF_ADJUST = {13}
		BF_FLAT = {14}
		BF_MONO = {15}
		DFC_CAPTION = 1 // {0}
		DFC_MENU = 2 // {1}
		DFC_SCROLL = 3 // {0, 1}
		DFC_BUTTON = 4 // {2}
		DFCS_CAPTIONCLOSE = {}
		DFCS_CAPTIONMIN = {0}
		DFCS_CAPTIONMAX = {1}
		DFCS_CAPTIONRESTORE = {0, 1}
		DFCS_CAPTIONHELP = {2}
		DFCS_MENUARROW = {}
		DFCS_MENUCHECK = {0}
		DFCS_MENUBULLET = {1}
		DFCS_MENUARROWRIGHT = {2}
		DFCS_SCROLLUP = {}
		DFCS_SCROLLDOWN = {0}
		DFCS_SCROLLLEFT = {1}
		DFCS_SCROLLRIGHT = {0, 1}
		DFCS_SCROLLCOMBOBOX = {0, 2}
		DFCS_SCROLLSIZEGRIP = {3}
		DFCS_SCROLLSIZEGRIPRIGHT = {4}
		DFCS_BUTTONCHECK = {}
		DFCS_BUTTONRADIOIMAGE = {0}
		DFCS_BUTTONRADIOMASK = {1}
		DFCS_BUTTONRADIO = {2}
		DFCS_BUTTON3STATE = {3}
		DFCS_BUTTONPUSH = {4}
		DFCS_INACTIVE = {8}
		DFCS_PUSHED = {9}
		DFCS_CHECKED = {10}
		DFCS_ADJUSTRECT = {13}
		DFCS_FLAT = {14}
		DFCS_MONO = {15}
		DC_ACTIVE = 1 // {0}
		DC_SMALLCAP = 2 // {1}
		DC_ICON = 4 // {2}
		DC_TEXT = 8 // {3}
		DC_INBUTTON = 16 // {4}
		IDANI_OPEN = 1 // {0}
		IDANI_CLOSE = 2 // {1}
		IDANI_CAPTION = 3 // {0, 1}
		CF_TEXT = 1 // {0}
		CF_BITMAP = 2 // {1}
		CF_METAFILEPICT = 3 // {0, 1}
		CF_SYLK = 4 // {2}
		CF_DIF = 5 // {0, 2}
		CF_TIFF = 6 // {1, 2}
		CF_OEMTEXT = 7 // {0..2}
		CF_DIB = 8 // {3}
		CF_PALETTE = 9 // {0, 3}
		CF_PENDATA = 10 // {1, 3}
		CF_RIFF = 11 // {0, 1, 3}
		CF_WAVE = 12 // {2, 3}
		CF_UNICODETEXT = 13 // {0, 2, 3}
		CF_ENHMETAFILE = 14 // {1..3}
		CF_HDROP = 15 // {0..3}
		CF_LOCALE = 16 // {4}
		CF_MAX = 17 // {0, 4}
		CF_OWNERDISPLAY = 128 // {7}
		CF_DSPTEXT = 129 // {0, 7}
		CF_DSPBITMAP = 130 // {1, 7}
		CF_DSPMETAFILEPICT = 131 // {0, 1, 7}
		CF_DSPENHMETAFILE = 142 // {1..3, 7}
		CF_PRIVATEFIRST = 512 // {9}
		CF_PRIVATELAST = 767 // {0..7, 9}
		CF_GDIOBJFIRST = 768 // {8, 9}
		CF_GDIOBJLAST = 1023 // {0..9}
		FVIRTKEY = 1 // {0}
		FNOINVERT = 2 // {1}
		FSHIFT = 4 // {2}
		FCONTROL = 8 // {3}
		FALT = 16 // {4}
		WPF_SETMINPOSITION = {0}
		WPF_RESTORETOMAXIMIZED = {1}
		ODT_MENU = {0}
		ODT_LISTBOX = {1}
		ODT_COMBOBOX = {0, 1}
		ODT_BUTTON = {2}
		ODT_STATIC = {0, 2}
		ODA_DRAWENTIRE = {0}
		ODA_SELECT = {1}
		ODA_FOCUS = {2}
		ODS_SELECTED = {0}
		ODS_GRAYED = {1}
		ODS_DISABLED = {2}
		ODS_CHECKED = {3}
		ODS_FOCUS = {4}
		ODS_DEFAULT = {5}
		ODS_COMBOBOXEDIT = {12}
		PM_NOREMOVE = 0 // {}
		PM_REMOVE = 1 // {0}
		PM_NOYIELD = 2 // {1}
		MOD_ALT = {0}
		MOD_CONTROL = {1}
		MOD_SHIFT = {2}
		MOD_WIN = {3}
		IDHOT_SNAPWINDOW = -1 // {0..31}
		IDHOT_SNAPDESKTOP = -2 // {1..31}
		EW_RESTARTWINDOWS = 66 // {1, 6}
		EW_REBOOTSYSTEM = 67 // {0, 1, 6}
		EW_EXITANDEXECAPP = 68 // {2, 6}
		EWX_LOGOFF = {}
		EWX_SHUTDOWN = {0}
		EWX_REBOOT = {1}
		EWX_FORCE = {2}
		EWX_POWEROFF = {3}
		BSM_ALLCOMPONENTS = {}
		BSM_VXDS = {0}
		BSM_NETDRIVER = {1}
		BSM_INSTALLABLEDRIVERS = {2}
		BSM_APPLICATIONS = {3}
		BSM_ALLDESKTOPS = {4}
		BSF_QUERY = {0}
		BSF_IGNORECURRENTTASK = {1}
		BSF_FLUSHDISK = {2}
		BSF_NOHANG = {3}
		BSF_POSTMESSAGE = {4}
		BSF_FORCEIFHUNG = {5}
		BSF_NOTIMEOUTIFNOTHUNG = {6}
		DBWF_LPARAMPOINTER = 32768 // {15}
		BROADCAST_QUERY_DENY = 1112363332 // {2, 6, 8, 12, 14, 16, 18, 19, 22, 25, 30}
		CW_USEDEFAULT = 80000000h
		SWP_NOSIZE = {0}
		SWP_NOMOVE = {1}
		SWP_NOZORDER = {2}
		SWP_NOREDRAW = {3}
		SWP_NOACTIVATE = {4}
		SWP_FRAMECHANGED = {5}
		SWP_SHOWWINDOW = {6}
		SWP_HIDEWINDOW = {7}
		SWP_NOCOPYBITS = {8}
		SWP_NOOWNERZORDER = {9}
		SWP_NOSENDCHANGING = {10}
		SWP_DRAWFRAME = {5}
		SWP_NOREPOSITION = {9}
		SWP_DEFERERASE = {13}
		SWP_ASYNCWINDOWPOS = {14}
		HWND_TOP = 0
		HWND_BOTTOM = 1
		HWND_TOPMOST = -1
		HWND_NOTOPMOST = -2
		DLGWINDOWEXTRA = 30 // {1..4}
		INPUT_MOUSE = 0
		INPUT_KEYBOARD = 1
		INPUT_HARDWARE = 2
		KEYEVENTF_EXTENDEDKEY = {0}
		KEYEVENTF_KEYUP = {1}
		KEYEVENTF_UNICODE = {2}
		KEYEVENTF_SCANCODE = {3}
		MOUSEEVENTF_MOVE = {0}
		MOUSEEVENTF_LEFTDOWN = {1}
		MOUSEEVENTF_LEFTUP = {2}
		MOUSEEVENTF_RIGHTDOWN = {3}
		MOUSEEVENTF_RIGHTUP = {4}
		MOUSEEVENTF_MIDDLEDOWN = {5}
		MOUSEEVENTF_MIDDLEUP = {6}
		MOUSEEVENTF_XDOWN = {7}
		MOUSEEVENTF_XUP = {8}
		MOUSEEVENTF_WHEEL = {11}
		MOUSEEVENTF_HWHEEL = {12}
		MOUSEEVENTF_MOVE_NOCOALESCE = {13}
		MOUSEEVENTF_VIRTUALDESK = {14}
		MOUSEEVENTF_ABSOLUTE = {15}
		MWMO_WAITALL = {0}
		MWMO_ALERTABLE = {1}
		QS_KEY = {0}
		QS_MOUSEMOVE = {1}
		QS_MOUSEBUTTON = {2}
		QS_POSTMESSAGE = {3}
		QS_TIMER = {4}
		QS_PAINT = {5}
		QS_SENDMESSAGE = {6}
		QS_HOTKEY = {7}
		QS_MOUSE = {1, 2}
		QS_INPUT = {0..2}
		QS_ALLEVENTS = {0..5, 7}
		QS_ALLINPUT = {0..7}
		SM_CXSCREEN = 0 // {}
		SM_CYSCREEN = 1 // {0}
		SM_CXVSCROLL = 2 // {1}
		SM_CYHSCROLL = 3 // {0, 1}
		SM_CYCAPTION = 4 // {2}
		SM_CXBORDER = 5 // {0, 2}
		SM_CYBORDER = 6 // {1, 2}
		SM_CXDLGFRAME = 7 // {0..2}
		SM_CYDLGFRAME = 8 // {3}
		SM_CYVTHUMB = 9 // {0, 3}
		SM_CXHTHUMB = 10 // {1, 3}
		SM_CXICON = 11 // {0, 1, 3}
		SM_CYICON = 12 // {2, 3}
		SM_CXCURSOR = 13 // {0, 2, 3}
		SM_CYCURSOR = 14 // {1..3}
		SM_CYMENU = 15 // {0..3}
		SM_CXFULLSCREEN = 16 // {4}
		SM_CYFULLSCREEN = 17 // {0, 4}
		SM_CYKANJIWINDOW = 18 // {1, 4}
		SM_MOUSEPRESENT = 19 // {0, 1, 4}
		SM_CYVSCROLL = 20 // {2, 4}
		SM_CXHSCROLL = 21 // {0, 2, 4}
		SM_DEBUG = 22 // {1, 2, 4}
		SM_SWAPBUTTON = 23 // {0..2, 4}
		SM_RESERVED1 = 24 // {3, 4}
		SM_RESERVED2 = 25 // {0, 3, 4}
		SM_RESERVED3 = 26 // {1, 3, 4}
		SM_RESERVED4 = 27 // {0, 1, 3, 4}
		SM_CXMIN = 28 // {2..4}
		SM_CYMIN = 29 // {0, 2..4}
		SM_CXSIZE = 30 // {1..4}
		SM_CYSIZE = 31 // {0..4}
		SM_CXFRAME = 32 // {5}
		SM_CYFRAME = 33 // {0, 5}
		SM_CXMINTRACK = 34 // {1, 5}
		SM_CYMINTRACK = 35 // {0, 1, 5}
		SM_CXDOUBLECLK = 36 // {2, 5}
		SM_CYDOUBLECLK = 37 // {0, 2, 5}
		SM_CXICONSPACING = 38 // {1, 2, 5}
		SM_CYICONSPACING = 39 // {0..2, 5}
		SM_MENUDROPALIGNMENT = 40 // {3, 5}
		SM_PENWINDOWS = 41 // {0, 3, 5}
		SM_DBCSENABLED = 42 // {1, 3, 5}
		SM_CMOUSEBUTTONS = 43 // {0, 1, 3, 5}
		SM_CXFIXEDFRAME = 7 // {0..2}
		SM_CYFIXEDFRAME = 8 // {3}
		SM_CXSIZEFRAME = 32 // {5}
		SM_CYSIZEFRAME = 33 // {0, 5}
		SM_SECURE = 44 // {2, 3, 5}
		SM_CXEDGE = 45 // {0, 2, 3, 5}
		SM_CYEDGE = 46 // {1..3, 5}
		SM_CXMINSPACING = 47 // {0..3, 5}
		SM_CYMINSPACING = 48 // {4, 5}
		SM_CXSMICON = 49 // {0, 4, 5}
		SM_CYSMICON = 50 // {1, 4, 5}
		SM_CYSMCAPTION = 51 // {0, 1, 4, 5}
		SM_CXSMSIZE = 52 // {2, 4, 5}
		SM_CYSMSIZE = 53 // {0, 2, 4, 5}
		SM_CXMENUSIZE = 54 // {1, 2, 4, 5}
		SM_CYMENUSIZE = 55 // {0..2, 4, 5}
		SM_ARRANGE = 56 // {3..5}
		SM_CXMINIMIZED = 57 // {0, 3..5}
		SM_CYMINIMIZED = 58 // {1, 3..5}
		SM_CXMAXTRACK = 59 // {0, 1, 3..5}
		SM_CYMAXTRACK = 60 // {2..5}
		SM_CXMAXIMIZED = 61 // {0, 2..5}
		SM_CYMAXIMIZED = 62 // {1..5}
		SM_NETWORK = 63 // {0..5}
		SM_CLEANBOOT = 67 // {0, 1, 6}
		SM_CXDRAG = 68 // {2, 6}
		SM_CYDRAG = 69 // {0, 2, 6}
		SM_SHOWSOUNDS = 70 // {1, 2, 6}
		SM_CXMENUCHECK = 71 // {0..2, 6}
		SM_CYMENUCHECK = 72 // {3, 6}
		SM_SLOWMACHINE = 73 // {0, 3, 6}
		SM_MIDEASTENABLED = 74 // {1, 3, 6}
		SM_CMETRICS = 75 // {0, 1, 3, 6}
		MNC_IGNORE = 0 // {}
		MNC_CLOSE = 1 // {0}
		MNC_EXECUTE = 2 // {1}
		MNC_SELECT = 3 // {0, 1}
		MIIM_STATE = {0}
		MIIM_ID = {1}
		MIIM_SUBMENU = {2}
		MIIM_CHECKMARKS = {3}
		MIIM_TYPE = {4}
		MIIM_DATA = {5}
		GMDI_USEDISABLED = {0}
		GMDI_GOINTOPOPUPS = {1}
		TPM_LEFTBUTTON = {}
		TPM_RIGHTBUTTON = {1}
		TPM_LEFTALIGN = {}
		TPM_CENTERALIGN = {2}
		TPM_RIGHTALIGN = {3}
		TPM_TOPALIGN = {}
		TPM_VCENTERALIGN = {4}
		TPM_BOTTOMALIGN = {5}
		TPM_HORIZONTAL = {}
		TPM_VERTICAL = {6}
		TPM_NONOTIFY = {7}
		TPM_RETURNCMD = {8}
		DOF_EXECUTABLE = 32769 // {0, 15}
		DOF_DOCUMENT = 32770 // {1, 15}
		DOF_DIRECTORY = 32771 // {0, 1, 15}
		DOF_MULTIPLE = 32772 // {2, 15}
		DOF_PROGMAN = 1 // {0}
		DOF_SHELLDATA = 2 // {1}
		DO_DROPFILE = 1162627398 // {1, 2, 6, 8, 11, 14, 18, 19, 22, 24, 26, 30}
		DO_PRINTFILE = 1414419024 // {4, 6, 9, 12, 14, 17..19, 22, 26, 28, 30}
		DT_TOP = {}
		DT_LEFT = {}
		DT_CENTER = {0}
		DT_RIGHT = {1}
		DT_VCENTER = {2}
		DT_BOTTOM = {3}
		DT_WORDBREAK = {4}
		DT_SINGLELINE = {5}
		DT_EXPANDTABS = {6}
		DT_TABSTOP = {7}
		DT_NOCLIP = {8}
		DT_EXTERNALLEADING = {9}
		DT_CALCRECT = {10}
		DT_NOPREFIX = {11}
		DT_INTERNAL = {12}
		DT_EDITCONTROL = {13}
		DT_PATH_ELLIPSIS = {14}
		DT_END_ELLIPSIS = {15}
		DT_MODIFYSTRING = {16}
		DT_RTLREADING = {17}
		DT_WORD_ELLIPSIS = {18}
		DST_COMPLEX = {}
		DST_TEXT = {0}
		DST_PREFIXTEXT = {1}
		DST_ICON = {0, 1}
		DST_BITMAP = {2}
		DSS_NORMAL = {}
		DSS_UNION = {4}
		DSS_DISABLED = {5}
		DSS_MONO = {7}
		DSS_RIGHT = {15}
		DCX_WINDOW = {0}
		DCX_CACHE = {1}
		DCX_NORESETATTRS = {2}
		DCX_CLIPCHILDREN = {3}
		DCX_CLIPSIBLINGS = {4}
		DCX_PARENTCLIP = {5}
		DCX_EXCLUDERGN = {6}
		DCX_INTERSECTRGN = {7}
		DCX_EXCLUDEUPDATE = {8}
		DCX_INTERSECTUPDATE = {9}
		DCX_LOCKWINDOWUPDATE = {10}
		DCX_VALIDATE = {21}
		RDW_INVALIDATE = {0}
		RDW_INTERNALPAINT = {1}
		RDW_ERASE = {2}
		RDW_VALIDATE = {3}
		RDW_NOINTERNALPAINT = {4}
		RDW_NOERASE = {5}
		RDW_NOCHILDREN = {6}
		RDW_ALLCHILDREN = {7}
		RDW_UPDATENOW = {8}
		RDW_ERASENOW = {9}
		RDW_FRAME = {10}
		RDW_NOFRAME = {11}
		SW_SCROLLCHILDREN = {0}
		SW_INVALIDATE = {1}
		SW_ERASE = {2}
		ESB_ENABLE_BOTH = 0 // {}
		ESB_DISABLE_BOTH = 3 // {0, 1}
		ESB_DISABLE_LEFT = 1 // {0}
		ESB_DISABLE_RIGHT = 2 // {1}
		ESB_DISABLE_UP = 1 // {0}
		ESB_DISABLE_DOWN = 2 // {1}
		ESB_DISABLE_LTUP = 1 // {0}
		ESB_DISABLE_RTDN = 2 // {1}
		HELPINFO_WINDOW = 1 // {0}
		HELPINFO_MENUITEM = 2 // {1}
		MB_OK = {}
		MB_OKCANCEL = {0}
		MB_ABORTRETRYIGNORE = {1}
		MB_YESNOCANCEL = {0, 1}
		MB_YESNO = {2}
		MB_RETRYCANCEL = {0, 2}
		MB_ICONHAND = {4}
		MB_ICONQUESTION = {5}
		MB_ICONEXCLAMATION = {4, 5}
		MB_ICONASTERISK = {6}
		MB_USERICON = {7}
		MB_ICONWARNING = {4, 5}
		MB_ICONERROR = {4}
		MB_ICONINFORMATION = {6}
		MB_ICONSTOP = {4}
		MB_DEFBUTTON1 = {}
		MB_DEFBUTTON2 = {8}
		MB_DEFBUTTON3 = {9}
		MB_DEFBUTTON4 = {8, 9}
		MB_APPLMODAL = {}
		MB_SYSTEMMODAL = {12}
		MB_TASKMODAL = {13}
		MB_HELP = {14}
		MB_NOFOCUS = {15}
		MB_SETFOREGROUND = {16}
		MB_DEFAULT_DESKTOP_ONLY = {17}
		MB_TOPMOST = {18}
		MB_RIGHT = {19}
		MB_RTLREADING = {20}
		MB_SERVICE_NOTIFICATION = {21}
		MB_TYPEMASK = {0..3}
		MB_ICONMASK = {4..7}
		MB_DEFMASK = {8..11}
		MB_MODEMASK = {12, 13}
		MB_MISCMASK = {14, 15}
		CWP_ALL = {}
		CWP_SKIPINVISIBLE = {0}
		CWP_SKIPDISABLED = {1}
		CWP_SKIPTRANSPARENT = {2}
		CTLCOLOR_MSGBOX = 0 // {}
		CTLCOLOR_EDIT = 1 // {0}
		CTLCOLOR_LISTBOX = 2 // {1}
		CTLCOLOR_BTN = 3 // {0, 1}
		CTLCOLOR_DLG = 4 // {2}
		CTLCOLOR_SCROLLBAR = 5 // {0, 2}
		CTLCOLOR_STATIC = 6 // {1, 2}
		CTLCOLOR_MAX = 7 // {0..2}
		COLOR_SCROLLBAR = 0 // {}
		COLOR_BACKGROUND = 1 // {0}
		COLOR_ACTIVECAPTION = 2 // {1}
		COLOR_INACTIVECAPTION = 3 // {0, 1}
		COLOR_MENU = 4 // {2}
		COLOR_WINDOW = 5 // {0, 2}
		COLOR_WINDOWFRAME = 6 // {1, 2}
		COLOR_MENUTEXT = 7 // {0..2}
		COLOR_WINDOWTEXT = 8 // {3}
		COLOR_CAPTIONTEXT = 9 // {0, 3}
		COLOR_ACTIVEBORDER = 10 // {1, 3}
		COLOR_INACTIVEBORDER = 11 // {0, 1, 3}
		COLOR_APPWORKSPACE = 12 // {2, 3}
		COLOR_HIGHLIGHT = 13 // {0, 2, 3}
		COLOR_HIGHLIGHTTEXT = 14 // {1..3}
		COLOR_BTNFACE = 15 // {0..3}
		COLOR_BTNSHADOW = 16 // {4}
		COLOR_GRAYTEXT = 17 // {0, 4}
		COLOR_BTNTEXT = 18 // {1, 4}
		COLOR_INACTIVECAPTIONTEXT = 19 // {0, 1, 4}
		COLOR_BTNHIGHLIGHT = 20 // {2, 4}
		COLOR_3DDKSHADOW = 21 // {0, 2, 4}
		COLOR_3DLIGHT = 22 // {1, 2, 4}
		COLOR_INFOTEXT = 23 // {0..2, 4}
		COLOR_INFOBK = 24 // {3, 4}
		COLOR_DESKTOP = 1 // {0}
		COLOR_3DFACE = 15 // {0..3}
		COLOR_3DSHADOW = 16 // {4}
		COLOR_3DHIGHLIGHT = 20 // {2, 4}
		COLOR_3DHILIGHT = 20 // {2, 4}
		COLOR_BTNHILIGHT = 20 // {2, 4}
		GetSysModalWindow = 0 // {}
		GW_HWNDFIRST = 0 // {}
		GW_HWNDLAST = 1 // {0}
		GW_HWNDNEXT = 2 // {1}
		GW_HWNDPREV = 3 // {0, 1}
		GW_OWNER = 4 // {2}
		GW_CHILD = 5 // {0, 2}
		GW_MAX = 5 // {0, 2}
		MF_INSERT = {}
		MF_CHANGE = {7}
		MF_APPEND = {8}
		MF_DELETE = {9}
		MF_REMOVE = {12}
		MF_BYCOMMAND = {}
		MF_BYPOSITION = {10}
		MF_SEPARATOR = {11}
		MF_ENABLED = {}
		MF_GRAYED = {0}
		MF_DISABLED = {1}
		MF_UNCHECKED = {}
		MF_CHECKED = {3}
		MF_USECHECKBITMAPS = {9}
		MF_STRING = {}
		MF_BITMAP = {2}
		MF_OWNERDRAW = {8}
		MF_POPUP = {4}
		MF_MENUBARBREAK = {5}
		MF_MENUBREAK = {6}
		MF_UNHILITE = {}
		MF_HILITE = {7}
		MF_DEFAULT = {12}
		MF_SYSMENU = {13}
		MF_HELP = {14}
		MF_RIGHTJUSTIFY = {14}
		MF_MOUSESELECT = {15}
		MF_END = {7}
		MFT_STRING = {}
		MFT_BITMAP = {2}
		MFT_MENUBARBREAK = {5}
		MFT_MENUBREAK = {6}
		MFT_OWNERDRAW = {8}
		MFT_RADIOCHECK = {9}
		MFT_SEPARATOR = {11}
		MFT_RIGHTORDER = {13}
		MFT_RIGHTJUSTIFY = {14}
		MFS_GRAYED = {0, 1}
		MFS_DISABLED = {0, 1}
		MFS_CHECKED = {3}
		MFS_HILITE = {7}
		MFS_ENABLED = {}
		MFS_UNCHECKED = {}
		MFS_UNHILITE = {}
		MFS_DEFAULT = {12}
		SC_SIZE = 61440 // {12..15}
		SC_MOVE = 61456 // {4, 12..15}
		SC_MINIMIZE = 61472 // {5, 12..15}
		SC_MAXIMIZE = 61488 // {4, 5, 12..15}
		SC_NEXTWINDOW = 61504 // {6, 12..15}
		SC_PREVWINDOW = 61520 // {4, 6, 12..15}
		SC_CLOSE = 61536 // {5, 6, 12..15}
		SC_VSCROLL = 61552 // {4..6, 12..15}
		SC_HSCROLL = 61568 // {7, 12..15}
		SC_MOUSEMENU = 61584 // {4, 7, 12..15}
		SC_KEYMENU = 61696 // {8, 12..15}
		SC_ARRANGE = 61712 // {4, 8, 12..15}
		SC_RESTORE = 61728 // {5, 8, 12..15}
		SC_TASKLIST = 61744 // {4, 5, 8, 12..15}
		SC_SCREENSAVE = 61760 // {6, 8, 12..15}
		SC_HOTKEY = 61776 // {4, 6, 8, 12..15}
		SC_DEFAULT = 61792 // {5, 6, 8, 12..15}
		SC_MONITORPOWER = 61808 // {4..6, 8, 12..15}
		SC_CONTEXTHELP = 61824 // {7, 8, 12..15}
		SC_SEPARATOR = 61455 // {0..3, 12..15}
		SC_ICON = 61472 // {5, 12..15}
		SC_ZOOM = 61488 // {4, 5, 12..15}
		IDC_ARROW = 32512 // {8..14}
		IDC_IBEAM = 32513 // {0, 8..14}
		IDC_WAIT = 32514 // {1, 8..14}
		IDC_CROSS = 32515 // {0, 1, 8..14}
		IDC_UPARROW = 32516 // {2, 8..14}
		IDC_SIZE = 32640 // {7..14}
		IDC_ICON = 32641 // {0, 7..14}
		IDC_SIZENWSE = 32642 // {1, 7..14}
		IDC_SIZENESW = 32643 // {0, 1, 7..14}
		IDC_SIZEWE = 32644 // {2, 7..14}
		IDC_SIZENS = 32645 // {0, 2, 7..14}
		IDC_SIZEALL = 32646 // {1, 2, 7..14}
		IDC_NO = 32648 // {3, 7..14}
		IDC_APPSTARTING = 32650 // {1, 3, 7..14}
		IDC_HELP = 32651 // {0, 1, 3, 7..14}
		IMAGE_BITMAP = 0 // {}
		IMAGE_ICON = 1 // {0}
		IMAGE_CURSOR = 2 // {1}
		IMAGE_ENHMETAFILE = 3 // {0, 1}
		LR_DEFAULTCOLOR = {}
		LR_MONOCHROME = {0}
		LR_COLOR = {1}
		LR_COPYRETURNORG = {2}
		LR_COPYDELETEORG = {3}
		LR_LOADFROMFILE = {4}
		LR_LOADTRANSPARENT = {5}
		LR_DEFAULTSIZE = {6}
		LR_VGACOLOR = {7}
		LR_LOADMAP3DCOLORS = {12}
		LR_CREATEDIBSECTION = {13}
		LR_COPYFROMRESOURCE = {14}
		LR_SHARED = {15}
		DI_MASK = {0}
		DI_IMAGE = {1}
		DI_NORMAL = {0, 1}
		DI_COMPAT = {2}
		DI_DEFAULTSIZE = {3}
		RES_ICON = 1 // {0}
		RES_CURSOR = 2 // {1}
		ORD_LANGDRIVER = 1 // {0}
		IDI_APPLICATION = 32512 // {8..14}
		IDI_HAND = 32513 // {0, 8..14}
		IDI_QUESTION = 32514 // {1, 8..14}
		IDI_EXCLAMATION = 32515 // {0, 1, 8..14}
		IDI_ASTERISK = 32516 // {2, 8..14}
		IDI_WINLOGO = 32517 // {0, 2, 8..14}
		IDI_WARNING = 32515 // {0, 1, 8..14}
		IDI_ERROR = 32513 // {0, 8..14}
		IDI_INFORMATION = 32516 // {2, 8..14}
		IDOK = 1 // {0}
		IDCANCEL = 2 // {1}
		IDABORT = 3 // {0, 1}
		IDRETRY = 4 // {2}
		IDIGNORE = 5 // {0, 2}
		IDYES = 6 // {1, 2}
		IDNO = 7 // {0..2}
		IDCLOSE = 8 // {3}
		IDHELP = 9 // {0, 3}
		ES_LEFT = {}
		ES_CENTER = {0}
		ES_RIGHT = {1}
		ES_MULTILINE = {2}
		ES_UPPERCASE = {3}
		ES_LOWERCASE = {4}
		ES_PASSWORD = {5}
		ES_AUTOVSCROLL = {6}
		ES_AUTOHSCROLL = {7}
		ES_NOHIDESEL = {8}
		ES_OEMCONVERT = {10}
		ES_READONLY = {11}
		ES_WANTRETURN = {12}
		ES_NUMBER = {13}
		EN_SETFOCUS = 256 // {8}
		EN_KILLFOCUS = 512 // {9}
		EN_CHANGE = 768 // {8, 9}
		EN_UPDATE = 1024 // {10}
		EN_ERRSPACE = 1280 // {8, 10}
		EN_MAXTEXT = 1281 // {0, 8, 10}
		EN_HSCROLL = 1537 // {0, 9, 10}
		EN_VSCROLL = 1538 // {1, 9, 10}
		EC_LEFTMARGIN = 1 // {0}
		EC_RIGHTMARGIN = 2 // {1}
		EC_USEFONTINFO = 65535 // {0..15}
		EM_GETSEL = 176 // {4, 5, 7}
		EM_SETSEL = 177 // {0, 4, 5, 7}
		EM_GETRECT = 178 // {1, 4, 5, 7}
		EM_SETRECT = 179 // {0, 1, 4, 5, 7}
		EM_SETRECTNP = 180 // {2, 4, 5, 7}
		EM_SCROLL = 181 // {0, 2, 4, 5, 7}
		EM_LINESCROLL = 182 // {1, 2, 4, 5, 7}
		EM_SCROLLCARET = 183 // {0..2, 4, 5, 7}
		EM_GETMODIFY = 184 // {3..5, 7}
		EM_SETMODIFY = 185 // {0, 3..5, 7}
		EM_GETLINECOUNT = 186 // {1, 3..5, 7}
		EM_LINEINDEX = 187 // {0, 1, 3..5, 7}
		EM_SETHANDLE = 188 // {2..5, 7}
		EM_GETHANDLE = 189 // {0, 2..5, 7}
		EM_GETTHUMB = 190 // {1..5, 7}
		EM_LINELENGTH = 193 // {0, 6, 7}
		EM_REPLACESEL = 194 // {1, 6, 7}
		EM_GETLINE = 196 // {2, 6, 7}
		EM_LIMITTEXT = 197 // {0, 2, 6, 7}
		EM_CANUNDO = 198 // {1, 2, 6, 7}
		EM_UNDO = 199 // {0..2, 6, 7}
		EM_FMTLINES = 200 // {3, 6, 7}
		EM_LINEFROMCHAR = 201 // {0, 3, 6, 7}
		EM_SETTABSTOPS = 203 // {0, 1, 3, 6, 7}
		EM_SETPASSWORDCHAR = 204 // {2, 3, 6, 7}
		EM_EMPTYUNDOBUFFER = 205 // {0, 2, 3, 6, 7}
		EM_GETFIRSTVISIBLELINE = 206 // {1..3, 6, 7}
		EM_SETREADONLY = 207 // {0..3, 6, 7}
		EM_SETWORDBREAKPROC = 208 // {4, 6, 7}
		EM_GETWORDBREAKPROC = 209 // {0, 4, 6, 7}
		EM_GETPASSWORDCHAR = 210 // {1, 4, 6, 7}
		EM_SETMARGINS = 211 // {0, 1, 4, 6, 7}
		EM_GETMARGINS = 212 // {2, 4, 6, 7}
		EM_SETLIMITTEXT = 197 // {0, 2, 6, 7}
		EM_GETLIMITTEXT = 213 // {0, 2, 4, 6, 7}
		EM_POSFROMCHAR = 214 // {1, 2, 4, 6, 7}
		EM_CHARFROMPOS = 215 // {0..2, 4, 6, 7}
		WB_LEFT = 0 // {}
		WB_RIGHT = 1 // {0}
		WB_ISDELIMITER = 2 // {1}
		BS_PUSHBUTTON = {}
		BS_DEFPUSHBUTTON = {0}
		BS_CHECKBOX = {1}
		BS_AUTOCHECKBOX = {0, 1}
		BS_RADIOBUTTON = {2}
		BS_3STATE = {0, 2}
		BS_AUTO3STATE = {1, 2}
		BS_GROUPBOX = {0..2}
		BS_USERBUTTON = {3}
		BS_AUTORADIOBUTTON = {0, 3}
		BS_OWNERDRAW = {0, 1, 3}
		BS_LEFTTEXT = {5}
		BS_TEXT = {}
		BS_ICON = {6}
		BS_BITMAP = {7}
		BS_LEFT = {8}
		BS_RIGHT = {9}
		BS_CENTER = {8, 9}
		BS_TOP = {10}
		BS_BOTTOM = {11}
		BS_VCENTER = {10, 11}
		BS_PUSHLIKE = {12}
		BS_MULTILINE = {13}
		BS_NOTIFY = {14}
		BS_FLAT = {15}
		BS_RIGHTBUTTON = {5}
		BN_CLICKED = 0 // {}
		BN_PAINT = 1 // {0}
		BN_HILITE = 2 // {1}
		BN_UNHILITE = 3 // {0, 1}
		BN_DISABLE = 4 // {2}
		BN_DOUBLECLICKED = 5 // {0, 2}
		BN_PUSHED = 2 // {1}
		BN_UNPUSHED = 3 // {0, 1}
		BN_DBLCLK = 5 // {0, 2}
		BN_SETFOCUS = 6 // {1, 2}
		BN_KILLFOCUS = 7 // {0..2}
		BM_GETCHECK = 240 // {4..7}
		BM_SETCHECK = 241 // {0, 4..7}
		BM_GETSTATE = 242 // {1, 4..7}
		BM_SETSTATE = 243 // {0, 1, 4..7}
		BM_SETSTYLE = 244 // {2, 4..7}
		BM_CLICK = 245 // {0, 2, 4..7}
		BM_GETIMAGE = 246 // {1, 2, 4..7}
		BM_SETIMAGE = 247 // {0..2, 4..7}
		BST_UNCHECKED = {}
		BST_CHECKED = {0}
		BST_INDETERMINATE = {1}
		BST_PUSHED = {2}
		BST_FOCUS = {3}
		SS_LEFT = {}
		SS_CENTER = {0}
		SS_RIGHT = {1}
		SS_ICON = {0, 1}
		SS_BLACKRECT = {2}
		SS_GRAYRECT = {0, 2}
		SS_WHITERECT = {1, 2}
		SS_BLACKFRAME = {0..2}
		SS_GRAYFRAME = {3}
		SS_WHITEFRAME = {0, 3}
		SS_USERITEM = {1, 3}
		SS_SIMPLE = {0, 1, 3}
		SS_LEFTNOWORDWRAP = {2, 3}
		SS_OWNERDRAW = {0, 2, 3}
		SS_BITMAP = {1..3}
		SS_ENHMETAFILE = {0..3}
		SS_ETCHEDHORZ = {4}
		SS_ETCHEDVERT = {0, 4}
		SS_ETCHEDFRAME = {1, 4}
		SS_TYPEMASK = {0..4}
		SS_NOPREFIX = {7}
		SS_NOTIFY = {8}
		SS_CENTERIMAGE = {9}
		SS_RIGHTJUST = {10}
		SS_REALSIZEIMAGE = {11}
		SS_SUNKEN = {12}
		SS_ENDELLIPSIS = {14}
		SS_PATHELLIPSIS = {15}
		SS_WORDELLIPSIS = {14, 15}
		SS_ELLIPSISMASK = {14, 15}
		STM_SETICON = 368 // {4..6, 8}
		STM_GETICON = 369 // {0, 4..6, 8}
		STM_SETIMAGE = 370 // {1, 4..6, 8}
		STM_GETIMAGE = 371 // {0, 1, 4..6, 8}
		STN_CLICKED = 0 // {}
		STN_DBLCLK = 1 // {0}
		STN_ENABLE = 2 // {1}
		STN_DISABLE = 3 // {0, 1}
		STM_MSGMAX = 372 // {2, 4..6, 8}
		WC_DIALOG = 32770 // {1, 15}
		DWL_MSGRESULT = 0 // {}
		DWL_DLGPROC = 4 // {2}
		DWL_USER = 8 // {3}
		DDL_READWRITE = 0 // {}
		DDL_READONLY = 1 // {0}
		DDL_HIDDEN = 2 // {1}
		DDL_SYSTEM = 4 // {2}
		DDL_DIRECTORY = 16 // {4}
		DDL_ARCHIVE = 32 // {5}
		DDL_POSTMSGS = 8192 // {13}
		DDL_DRIVES = 16384 // {14}
		DDL_EXCLUSIVE = 32768 // {15}
		DS_ABSALIGN = {0}
		DS_SYSMODAL = {1}
		DS_LOCALEDIT = {5}
		DS_SETFONT = {6}
		DS_MODALFRAME = {7}
		DS_NOIDLEMSG = {8}
		DS_SETFOREGROUND = {9}
		DS_3DLOOK = {2}
		DS_FIXEDSYS = {3}
		DS_NOFAILCREATE = {4}
		DS_CONTROL = {10}
		DS_CENTER = {11}
		DS_CENTERMOUSE = {12}
		DS_CONTEXTHELP = {13}
		DM_GETDEFID = 1024 // {10}
		DM_SETDEFID = 1025 // {0, 10}
		DM_REPOSITION = 1026 // {1, 10}
		PSM_PAGEINFO = 1124 // {2, 5, 6, 10}
		PSM_SHEETINFO = 1125 // {0, 2, 5, 6, 10}
		PSI_SETACTIVE = 1 // {0}
		PSI_KILLACTIVE = 2 // {1}
		PSI_APPLY = 3 // {0, 1}
		PSI_RESET = 4 // {2}
		PSI_HASHELP = 5 // {0, 2}
		PSI_HELP = 6 // {1, 2}
		PSI_CHANGED = 1 // {0}
		PSI_GUISTART = 2 // {1}
		PSI_REBOOT = 3 // {0, 1}
		PSI_GETSIBLINGS = 4 // {2}
		DC_HASDEFID = 21323 // {0, 1, 3, 6, 8, 9, 12, 14}
		DLGC_WANTARROWS = {0}
		DLGC_WANTTAB = {1}
		DLGC_WANTALLKEYS = {2}
		DLGC_WANTMESSAGE = {2}
		DLGC_HASSETSEL = {3}
		DLGC_DEFPUSHBUTTON = {4}
		DLGC_UNDEFPUSHBUTTON = {5}
		DLGC_RADIOBUTTON = {6}
		DLGC_WANTCHARS = {7}
		DLGC_STATIC = {8}
		DLGC_BUTTON = {13}
		LB_CTLCODE = 0 // {}
		LB_OKAY = 0 // {}
		LB_ERR = -1 // {0..31}
		LB_ERRSPACE = -2 // {1..31}
		LBN_ERRSPACE = -2 // {1..31}
		LBN_SELCHANGE = 1 // {0}
		LBN_DBLCLK = 2 // {1}
		LBN_SELCANCEL = 3 // {0, 1}
		LBN_SETFOCUS = 4 // {2}
		LBN_KILLFOCUS = 5 // {0, 2}
		LB_ADDSTRING = 384 // {7, 8}
		LB_INSERTSTRING = 385 // {0, 7, 8}
		LB_DELETESTRING = 386 // {1, 7, 8}
		LB_SELITEMRANGEEX = 387 // {0, 1, 7, 8}
		LB_RESETCONTENT = 388 // {2, 7, 8}
		LB_SETSEL = 389 // {0, 2, 7, 8}
		LB_SETCURSEL = 390 // {1, 2, 7, 8}
		LB_GETSEL = 391 // {0..2, 7, 8}
		LB_GETCURSEL = 392 // {3, 7, 8}
		LB_GETTEXT = 393 // {0, 3, 7, 8}
		LB_GETTEXTLEN = 394 // {1, 3, 7, 8}
		LB_GETCOUNT = 395 // {0, 1, 3, 7, 8}
		LB_SELECTSTRING = 396 // {2, 3, 7, 8}
		LB_DIR = 397 // {0, 2, 3, 7, 8}
		LB_GETTOPINDEX = 398 // {1..3, 7, 8}
		LB_FINDSTRING = 399 // {0..3, 7, 8}
		LB_GETSELCOUNT = 400 // {4, 7, 8}
		LB_GETSELITEMS = 401 // {0, 4, 7, 8}
		LB_SETTABSTOPS = 402 // {1, 4, 7, 8}
		LB_GETHORIZONTALEXTENT = 403 // {0, 1, 4, 7, 8}
		LB_SETHORIZONTALEXTENT = 404 // {2, 4, 7, 8}
		LB_SETCOLUMNWIDTH = 405 // {0, 2, 4, 7, 8}
		LB_ADDFILE = 406 // {1, 2, 4, 7, 8}
		LB_SETTOPINDEX = 407 // {0..2, 4, 7, 8}
		LB_GETITEMRECT = 408 // {3, 4, 7, 8}
		LB_GETITEMDATA = 409 // {0, 3, 4, 7, 8}
		LB_SETITEMDATA = 410 // {1, 3, 4, 7, 8}
		LB_SELITEMRANGE = 411 // {0, 1, 3, 4, 7, 8}
		LB_SETANCHORINDEX = 412 // {2..4, 7, 8}
		LB_GETANCHORINDEX = 413 // {0, 2..4, 7, 8}
		LB_SETCARETINDEX = 414 // {1..4, 7, 8}
		LB_GETCARETINDEX = 415 // {0..4, 7, 8}
		LB_SETITEMHEIGHT = 416 // {5, 7, 8}
		LB_GETITEMHEIGHT = 417 // {0, 5, 7, 8}
		LB_FINDSTRINGEXACT = 418 // {1, 5, 7, 8}
		LB_SETLOCALE = 421 // {0, 2, 5, 7, 8}
		LB_GETLOCALE = 422 // {1, 2, 5, 7, 8}
		LB_SETCOUNT = 423 // {0..2, 5, 7, 8}
		LB_INITSTORAGE = 424 // {3, 5, 7, 8}
		LB_ITEMFROMPOINT = 425 // {0, 3, 5, 7, 8}
		LB_MSGMAX = 432 // {4, 5, 7, 8}
		LBS_NOTIFY = {0}
		LBS_SORT = {1}
		LBS_NOREDRAW = {2}
		LBS_MULTIPLESEL = {3}
		LBS_OWNERDRAWFIXED = {4}
		LBS_OWNERDRAWVARIABLE = {5}
		LBS_HASSTRINGS = {6}
		LBS_USETABSTOPS = {7}
		LBS_NOINTEGRALHEIGHT = {8}
		LBS_MULTICOLUMN = {9}
		LBS_WANTKEYBOARDINPUT = {10}
		LBS_EXTENDEDSEL = {11}
		LBS_DISABLENOSCROLL = {12}
		LBS_NODATA = {13}
		LBS_NOSEL = {14}
		LBS_STANDARD = {0, 1, 21, 23}
		CB_OKAY = 0 // {}
		CB_ERR = -1 // {0..31}
		CB_ERRSPACE = -2 // {1..31}
		CBN_ERRSPACE = -1 // {0..31}
		CBN_SELCHANGE = 1 // {0}
		CBN_DBLCLK = 2 // {1}
		CBN_SETFOCUS = 3 // {0, 1}
		CBN_KILLFOCUS = 4 // {2}
		CBN_EDITCHANGE = 5 // {0, 2}
		CBN_EDITUPDATE = 6 // {1, 2}
		CBN_DROPDOWN = 7 // {0..2}
		CBN_CLOSEUP = 8 // {3}
		CBN_SELENDOK = 9 // {0, 3}
		CBN_SELENDCANCEL = 10 // {1, 3}
		CBS_SIMPLE = {0}
		CBS_DROPDOWN = {1}
		CBS_DROPDOWNLIST = {0, 1}
		CBS_OWNERDRAWFIXED = {4}
		CBS_OWNERDRAWVARIABLE = {5}
		CBS_AUTOHSCROLL = {6}
		CBS_OEMCONVERT = {7}
		CBS_SORT = {8}
		CBS_HASSTRINGS = {9}
		CBS_NOINTEGRALHEIGHT = {10}
		CBS_DISABLENOSCROLL = {11}
		CBS_UPPERCASE = {13}
		CBS_LOWERCASE = {14}
		CB_GETEDITSEL = 320 // {6, 8}
		CB_LIMITTEXT = 321 // {0, 6, 8}
		CB_SETEDITSEL = 322 // {1, 6, 8}
		CB_ADDSTRING = 323 // {0, 1, 6, 8}
		CB_DELETESTRING = 324 // {2, 6, 8}
		CB_DIR = 325 // {0, 2, 6, 8}
		CB_GETCOUNT = 326 // {1, 2, 6, 8}
		CB_GETCURSEL = 327 // {0..2, 6, 8}
		CB_GETLBTEXT = 328 // {3, 6, 8}
		CB_GETLBTEXTLEN = 329 // {0, 3, 6, 8}
		CB_INSERTSTRING = 330 // {1, 3, 6, 8}
		CB_RESETCONTENT = 331 // {0, 1, 3, 6, 8}
		CB_FINDSTRING = 332 // {2, 3, 6, 8}
		CB_SELECTSTRING = 333 // {0, 2, 3, 6, 8}
		CB_SETCURSEL = 334 // {1..3, 6, 8}
		CB_SHOWDROPDOWN = 335 // {0..3, 6, 8}
		CB_GETITEMDATA = 336 // {4, 6, 8}
		CB_SETITEMDATA = 337 // {0, 4, 6, 8}
		CB_GETDROPPEDCONTROLRECT = 338 // {1, 4, 6, 8}
		CB_SETITEMHEIGHT = 339 // {0, 1, 4, 6, 8}
		CB_GETITEMHEIGHT = 340 // {2, 4, 6, 8}
		CB_SETEXTENDEDUI = 341 // {0, 2, 4, 6, 8}
		CB_GETEXTENDEDUI = 342 // {1, 2, 4, 6, 8}
		CB_GETDROPPEDSTATE = 343 // {0..2, 4, 6, 8}
		CB_FINDSTRINGEXACT = 344 // {3, 4, 6, 8}
		CB_SETLOCALE = 345 // {0, 3, 4, 6, 8}
		CB_GETLOCALE = 346 // {1, 3, 4, 6, 8}
		CB_GETTOPINDEX = 347 // {0, 1, 3, 4, 6, 8}
		CB_SETTOPINDEX = 348 // {2..4, 6, 8}
		CB_GETHORIZONTALEXTENT = 349 // {0, 2..4, 6, 8}
		CB_SETHORIZONTALEXTENT = 350 // {1..4, 6, 8}
		CB_GETDROPPEDWIDTH = 351 // {0..4, 6, 8}
		CB_SETDROPPEDWIDTH = 352 // {5, 6, 8}
		CB_INITSTORAGE = 353 // {0, 5, 6, 8}
		CB_MSGMAX = 354 // {1, 5, 6, 8}
		SBS_HORZ = {}
		SBS_VERT = {0}
		SBS_TOPALIGN = {1}
		SBS_LEFTALIGN = {1}
		SBS_BOTTOMALIGN = {2}
		SBS_RIGHTALIGN = {2}
		SBS_SIZEBOXTOPLEFTALIGN = {1}
		SBS_SIZEBOXBOTTOMRIGHTALIGN = {2}
		SBS_SIZEBOX = {3}
		SBS_SIZEGRIP = {4}
		SBM_SETPOS = 224 // {5..7}
		SBM_GETPOS = 225 // {0, 5..7}
		SBM_SETRANGE = 226 // {1, 5..7}
		SBM_SETRANGEREDRAW = 230 // {1, 2, 5..7}
		SBM_GETRANGE = 227 // {0, 1, 5..7}
		SBM_ENABLE_ARROWS = 228 // {2, 5..7}
		SBM_SETSCROLLINFO = 233 // {0, 3, 5..7}
		SBM_GETSCROLLINFO = 234 // {1, 3, 5..7}
		SIF_RANGE = {0}
		SIF_PAGE = {1}
		SIF_POS = {2}
		SIF_DISABLENOSCROLL = {3}
		SIF_TRACKPOS = {4}
		SIF_ALL = {0..2, 4}
		MDIS_ALLCHILDSTYLES = {0}
		MDITILE_VERTICAL = 0 // {}
		MDITILE_HORIZONTAL = 1 // {0}
		MDITILE_SKIPDISABLED = 2 // {1}
		IMC_GETCANDIDATEPOS = 7 // {0..2}
		IMC_SETCANDIDATEPOS = 8 // {3}
		IMC_GETCOMPOSITIONFONT = 9 // {0, 3}
		IMC_SETCOMPOSITIONFONT = 10 // {1, 3}
		IMC_GETCOMPOSITIONWINDOW = 11 // {0, 1, 3}
		IMC_SETCOMPOSITIONWINDOW = 12 // {2, 3}
		IMC_GETSTATUSWINDOWPOS = 15 // {0..3}
		IMC_SETSTATUSWINDOWPOS = 16 // {4}
		IMC_CLOSESTATUSWINDOW = 33 // {0, 5}
		IMC_OPENSTATUSWINDOW = 34 // {1, 5}
		IMN_CLOSESTATUSWINDOW = 1 // {0}
		IMN_OPENSTATUSWINDOW = 2 // {1}
		IMN_CHANGECANDIDATE = 3 // {0, 1}
		IMN_CLOSECANDIDATE = 4 // {2}
		IMN_OPENCANDIDATE = 5 // {0, 2}
		IMN_SETCONVERSIONMODE = 6 // {1, 2}
		IMN_SETSENTENCEMODE = 7 // {0..2}
		IMN_SETOPENSTATUS = 8 // {3}
		IMN_SETCANDIDATEPOS = 9 // {0, 3}
		IMN_SETCOMPOSITIONFONT = 10 // {1, 3}
		IMN_SETCOMPOSITIONWINDOW = 11 // {0, 1, 3}
		IMN_SETSTATUSWINDOWPOS = 12 // {2, 3}
		IMN_GUIDELINE = 13 // {0, 2, 3}
		IMN_PRIVATE = 14 // {1..3}
		HELP_CONTEXT = 1 // {0}
		HELP_QUIT = 2 // {1}
		HELP_INDEX = 3 // {0, 1}
		HELP_CONTENTS = 3 // {0, 1}
		HELP_HELPONHELP = 4 // {2}
		HELP_SETINDEX = 5 // {0, 2}
		HELP_SETCONTENTS = 5 // {0, 2}
		HELP_CONTEXTPOPUP = 8 // {3}
		HELP_FORCEFILE = 9 // {0, 3}
		HELP_KEY = 257 // {0, 8}
		HELP_COMMAND = 258 // {1, 8}
		HELP_PARTIALKEY = 261 // {0, 2, 8}
		HELP_MULTIKEY = 513 // {0, 9}
		HELP_SETWINPOS = 515 // {0, 1, 9}
		HELP_CONTEXTMENU = 10 // {1, 3}
		HELP_FINDER = 11 // {0, 1, 3}
		HELP_WM_HELP = 12 // {2, 3}
		HELP_SETPOPUP_POS = 13 // {0, 2, 3}
		HELP_TCARD = 32768 // {15}
		HELP_TCARD_DATA = 16 // {4}
		HELP_TCARD_OTHER_CALLER = 17 // {0, 4}
		IDH_NO_HELP = 28440 // {3, 4, 8..11, 13, 14}
		IDH_MISSING_CONTEXT = 28441 // {0, 3, 4, 8..11, 13, 14}
		IDH_GENERIC_HELP_BUTTON = 28442 // {1, 3, 4, 8..11, 13, 14}
		IDH_OK = 28443 // {0, 1, 3, 4, 8..11, 13, 14}
		IDH_CANCEL = 28444 // {2..4, 8..11, 13, 14}
		IDH_HELP = 28445 // {0, 2..4, 8..11, 13, 14}
		SPI_GETBEEP = 1 // {0}
		SPI_SETBEEP = 2 // {1}
		SPI_GETMOUSE = 3 // {0, 1}
		SPI_SETMOUSE = 4 // {2}
		SPI_GETBORDER = 5 // {0, 2}
		SPI_SETBORDER = 6 // {1, 2}
		SPI_GETKEYBOARDSPEED = 10 // {1, 3}
		SPI_SETKEYBOARDSPEED = 11 // {0, 1, 3}
		SPI_LANGDRIVER = 12 // {2, 3}
		SPI_ICONHORIZONTALSPACING = 13 // {0, 2, 3}
		SPI_GETSCREENSAVETIMEOUT = 14 // {1..3}
		SPI_SETSCREENSAVETIMEOUT = 15 // {0..3}
		SPI_GETSCREENSAVEACTIVE = 16 // {4}
		SPI_SETSCREENSAVEACTIVE = 17 // {0, 4}
		SPI_GETGRIDGRANULARITY = 18 // {1, 4}
		SPI_SETGRIDGRANULARITY = 19 // {0, 1, 4}
		SPI_SETDESKWALLPAPER = 20 // {2, 4}
		SPI_SETDESKPATTERN = 21 // {0, 2, 4}
		SPI_GETKEYBOARDDELAY = 22 // {1, 2, 4}
		SPI_SETKEYBOARDDELAY = 23 // {0..2, 4}
		SPI_ICONVERTICALSPACING = 24 // {3, 4}
		SPI_GETICONTITLEWRAP = 25 // {0, 3, 4}
		SPI_SETICONTITLEWRAP = 26 // {1, 3, 4}
		SPI_GETMENUDROPALIGNMENT = 27 // {0, 1, 3, 4}
		SPI_SETMENUDROPALIGNMENT = 28 // {2..4}
		SPI_SETDOUBLECLKWIDTH = 29 // {0, 2..4}
		SPI_SETDOUBLECLKHEIGHT = 30 // {1..4}
		SPI_GETICONTITLELOGFONT = 31 // {0..4}
		SPI_SETDOUBLECLICKTIME = 32 // {5}
		SPI_SETMOUSEBUTTONSWAP = 33 // {0, 5}
		SPI_SETICONTITLELOGFONT = 34 // {1, 5}
		SPI_GETFASTTASKSWITCH = 35 // {0, 1, 5}
		SPI_SETFASTTASKSWITCH = 36 // {2, 5}
		SPI_SETDRAGFULLWINDOWS = 37 // {0, 2, 5}
		SPI_GETDRAGFULLWINDOWS = 38 // {1, 2, 5}
		SPI_GETNONCLIENTMETRICS = 41 // {0, 3, 5}
		SPI_SETNONCLIENTMETRICS = 42 // {1, 3, 5}
		SPI_GETMINIMIZEDMETRICS = 43 // {0, 1, 3, 5}
		SPI_SETMINIMIZEDMETRICS = 44 // {2, 3, 5}
		SPI_GETICONMETRICS = 45 // {0, 2, 3, 5}
		SPI_SETICONMETRICS = 46 // {1..3, 5}
		SPI_SETWORKAREA = 47 // {0..3, 5}
		SPI_GETWORKAREA = 48 // {4, 5}
		SPI_SETPENWINDOWS = 49 // {0, 4, 5}
		SPI_GETHIGHCONTRAST = 66 // {1, 6}
		SPI_SETHIGHCONTRAST = 67 // {0, 1, 6}
		SPI_GETKEYBOARDPREF = 68 // {2, 6}
		SPI_SETKEYBOARDPREF = 69 // {0, 2, 6}
		SPI_GETSCREENREADER = 70 // {1, 2, 6}
		SPI_SETSCREENREADER = 71 // {0..2, 6}
		SPI_GETANIMATION = 72 // {3, 6}
		SPI_SETANIMATION = 73 // {0, 3, 6}
		SPI_GETFONTSMOOTHING = 74 // {1, 3, 6}
		SPI_SETFONTSMOOTHING = 75 // {0, 1, 3, 6}
		SPI_SETDRAGWIDTH = 76 // {2, 3, 6}
		SPI_SETDRAGHEIGHT = 77 // {0, 2, 3, 6}
		SPI_SETHANDHELD = 78 // {1..3, 6}
		SPI_GETLOWPOWERTIMEOUT = 79 // {0..3, 6}
		SPI_GETPOWEROFFTIMEOUT = 80 // {4, 6}
		SPI_SETLOWPOWERTIMEOUT = 81 // {0, 4, 6}
		SPI_SETPOWEROFFTIMEOUT = 82 // {1, 4, 6}
		SPI_GETLOWPOWERACTIVE = 83 // {0, 1, 4, 6}
		SPI_GETPOWEROFFACTIVE = 84 // {2, 4, 6}
		SPI_SETLOWPOWERACTIVE = 85 // {0, 2, 4, 6}
		SPI_SETPOWEROFFACTIVE = 86 // {1, 2, 4, 6}
		SPI_SETCURSORS = 87 // {0..2, 4, 6}
		SPI_SETICONS = 88 // {3, 4, 6}
		SPI_GETDEFAULTINPUTLANG = 89 // {0, 3, 4, 6}
		SPI_SETDEFAULTINPUTLANG = 90 // {1, 3, 4, 6}
		SPI_SETLANGTOGGLE = 91 // {0, 1, 3, 4, 6}
		SPI_GETWINDOWSEXTENSION = 92 // {2..4, 6}
		SPI_SETMOUSETRAILS = 93 // {0, 2..4, 6}
		SPI_GETMOUSETRAILS = 94 // {1..4, 6}
		SPI_SCREENSAVERRUNNING = 97 // {0, 5, 6}
		SPI_GETFILTERKEYS = 50 // {1, 4, 5}
		SPI_SETFILTERKEYS = 51 // {0, 1, 4, 5}
		SPI_GETTOGGLEKEYS = 52 // {2, 4, 5}
		SPI_SETTOGGLEKEYS = 53 // {0, 2, 4, 5}
		SPI_GETMOUSEKEYS = 54 // {1, 2, 4, 5}
		SPI_SETMOUSEKEYS = 55 // {0..2, 4, 5}
		SPI_GETSHOWSOUNDS = 56 // {3..5}
		SPI_SETSHOWSOUNDS = 57 // {0, 3..5}
		SPI_GETSTICKYKEYS = 58 // {1, 3..5}
		SPI_SETSTICKYKEYS = 59 // {0, 1, 3..5}
		SPI_GETACCESSTIMEOUT = 60 // {2..5}
		SPI_SETACCESSTIMEOUT = 61 // {0, 2..5}
		SPI_GETSERIALKEYS = 62 // {1..5}
		SPI_SETSERIALKEYS = 63 // {0..5}
		SPI_GETSOUNDSENTRY = 64 // {6}
		SPI_SETSOUNDSENTRY = 65 // {0, 6}
		SPIF_UPDATEINIFILE = 1 // {0}
		SPIF_SENDWININICHANGE = 2 // {1}
		SPIF_SENDCHANGE = 2 // {1}
		METRICS_USEDEFAULT = -1 // {0..31}
		ARW_BOTTOMLEFT = 0 // {}
		ARW_BOTTOMRIGHT = 1 // {0}
		ARW_TOPLEFT = 2 // {1}
		ARW_TOPRIGHT = 3 // {0, 1}
		ARW_STARTMASK = 3 // {0, 1}
		ARW_STARTRIGHT = 1 // {0}
		ARW_STARTTOP = 2 // {1}
		ARW_LEFT = 0 // {}
		ARW_RIGHT = 0 // {}
		ARW_UP = 4 // {2}
		ARW_DOWN = 4 // {2}
		ARW_HIDE = 8 // {3}
		ARW_VALID = 15 // {0..3}
		SERKF_SERIALKEYSON = {0}
		SERKF_AVAILABLE = {1}
		SERKF_INDICATOR = {2}
		HCF_HIGHCONTRASTON = {0}
		HCF_AVAILABLE = {1}
		HCF_HOTKEYACTIVE = {2}
		HCF_CONFIRMHOTKEY = {3}
		HCF_HOTKEYSOUND = {4}
		HCF_INDICATOR = {5}
		HCF_HOTKEYAVAILABLE = {6}
		CDS_UPDATEREGISTRY = {0}
		CDS_TEST = {1}
		CDS_FULLSCREEN = {2}
		DISP_CHANGE_SUCCESSFUL = 0 // {}
		DISP_CHANGE_RESTART = 1 // {0}
		DISP_CHANGE_FAILED = -1 // {0..31}
		DISP_CHANGE_BADMODE = -2 // {1..31}
		DISP_CHANGE_NOTUPDATED = -3 // {0, 2..31}
		DISP_CHANGE_BADFLAGS = -4 // {2..31}
		FKF_FILTERKEYSON = {0}
		FKF_AVAILABLE = {1}
		FKF_HOTKEYACTIVE = {2}
		FKF_CONFIRMHOTKEY = {3}
		FKF_HOTKEYSOUND = {4}
		FKF_INDICATOR = {5}
		FKF_CLICKON = {6}
		SKF_STICKYKEYSON = {0}
		SKF_AVAILABLE = {1}
		SKF_HOTKEYACTIVE = {2}
		SKF_CONFIRMHOTKEY = {3}
		SKF_HOTKEYSOUND = {4}
		SKF_INDICATOR = {5}
		SKF_AUDIBLEFEEDBACK = {6}
		SKF_TRISTATE = {7}
		SKF_TWOKEYSOFF = {8}
		MKF_MOUSEKEYSON = {0}
		MKF_AVAILABLE = {1}
		MKF_HOTKEYACTIVE = {2}
		MKF_CONFIRMHOTKEY = {3}
		MKF_HOTKEYSOUND = {4}
		MKF_INDICATOR = {5}
		MKF_MODIFIERS = {6}
		MKF_REPLACENUMBERS = {7}
		ATF_TIMEOUTON = {0}
		ATF_ONOFFFEEDBACK = {1}
		SSGF_NONE = 0 // {}
		SSGF_DISPLAY = 3 // {0, 1}
		SSTF_NONE = 0 // {}
		SSTF_CHARS = 1 // {0}
		SSTF_BORDER = 2 // {1}
		SSTF_DISPLAY = 3 // {0, 1}
		SSWF_NONE = 0 // {}
		SSWF_TITLE = 1 // {0}
		SSWF_WINDOW = 2 // {1}
		SSWF_DISPLAY = 3 // {0, 1}
		SSWF_CUSTOM = 4 // {2}
		SSF_SOUNDSENTRYON = {0}
		SSF_AVAILABLE = {1}
		SSF_INDICATOR = {2}
		TKF_TOGGLEKEYSON = {0}
		TKF_AVAILABLE = {1}
		TKF_HOTKEYACTIVE = {2}
		TKF_CONFIRMHOTKEY = {3}
		TKF_HOTKEYSOUND = {4}
		TKF_INDICATOR = {5}
		SLE_ERROR = 1 // {0}
		SLE_MINORERROR = 2 // {1}
		SLE_WARNING = 3 // {0, 1}
		MAX_LEADBYTES = 12 // {2, 3}
		MAX_DEFAULTCHAR = 2 // {1}
		MB_PRECOMPOSED = {0}
		MB_COMPOSITE = {1}
		MB_USEGLYPHCHARS = {2}
		MB_ERR_INVALID_CHARS = {3}
		WC_DEFAULTCHECK = {8}
		WC_COMPOSITECHECK = {9}
		WC_DISCARDNS = {4}
		WC_SEPCHARS = {5}
		WC_DEFAULTCHAR = {6}
		CT_CTYPE1 = {0}
		CT_CTYPE2 = {1}
		CT_CTYPE3 = {2}
		C1_UPPER = 1 // {0}
		C1_LOWER = 2 // {1}
		C1_DIGIT = 4 // {2}
		C1_SPACE = 8 // {3}
		C1_PUNCT = 16 // {4}
		C1_CNTRL = 32 // {5}
		C1_BLANK = 64 // {6}
		C1_XDIGIT = 128 // {7}
		C1_ALPHA = 256 // {8}
		C2_LEFTTORIGHT = 1 // {0}
		C2_RIGHTTOLEFT = 2 // {1}
		C2_EUROPENUMBER = 3 // {0, 1}
		C2_EUROPESEPARATOR = 4 // {2}
		C2_EUROPETERMINATOR = 5 // {0, 2}
		C2_ARABICNUMBER = 6 // {1, 2}
		C2_COMMONSEPARATOR = 7 // {0..2}
		C2_BLOCKSEPARATOR = 8 // {3}
		C2_SEGMENTSEPARATOR = 9 // {0, 3}
		C2_WHITESPACE = 10 // {1, 3}
		C2_OTHERNEUTRAL = 11 // {0, 1, 3}
		C2_NOTAPPLICABLE = 0 // {}
		C3_NONSPACING = 1 // {0}
		C3_DIACRITIC = 2 // {1}
		C3_VOWELMARK = 4 // {2}
		C3_SYMBOL = 8 // {3}
		C3_KATAKANA = 16 // {4}
		C3_HIRAGANA = 32 // {5}
		C3_HALFWIDTH = 64 // {6}
		C3_FULLWIDTH = 128 // {7}
		C3_IDEOGRAPH = 256 // {8}
		C3_KASHIDA = 512 // {9}
		C3_LEXICAL = 1024 // {10}
		C3_ALPHA = 32768 // {15}
		C3_NOTAPPLICABLE = 0 // {}
		NORM_IGNORECASE = {0}
		NORM_IGNORENONSPACE = {1}
		NORM_IGNORESYMBOLS = {2}
		NORM_IGNOREKANATYPE = {16}
		NORM_IGNOREWIDTH = {17}
		MAP_FOLDCZONE = {4}
		MAP_PRECOMPOSED = {5}
		MAP_COMPOSITE = {6}
		MAP_FOLDDIGITS = {7}
		LCMAP_LOWERCASE = {8}
		LCMAP_UPPERCASE = {9}
		LCMAP_SORTKEY = {10}
		LCMAP_BYTEREV = {11}
		LCMAP_HIRAGANA = {20}
		LCMAP_KATAKANA = {21}
		LCMAP_HALFWIDTH = {22}
		LCMAP_FULLWIDTH = {23}
		LCMAP_LINGUISTIC_CASING = {24}
		LCID_INSTALLED = {0}
		LCID_SUPPORTED = {1}
		CP_INSTALLED = {0}
		CP_SUPPORTED = {1}
		SORT_STRINGSORT = {12}
		CP_ACP = 0 // {}
		CP_OEMCP = 1 // {0}
		CP_MACCP = 2 // {1}
		CTRY_DEFAULT = 0 // {}
		CTRY_AUSTRALIA = 61 // {0, 2..5}
		CTRY_AUSTRIA = 43 // {0, 1, 3, 5}
		CTRY_BELGIUM = 32 // {5}
		CTRY_BRAZIL = 55 // {0..2, 4, 5}
		CTRY_BULGARIA = 359 // {0..2, 5, 6, 8}
		CTRY_CANADA = 2 // {1}
		CTRY_CROATIA = 385 // {0, 7, 8}
		CTRY_CZECH = 42 // {1, 3, 5}
		CTRY_DENMARK = 45 // {0, 2, 3, 5}
		CTRY_FINLAND = 358 // {1, 2, 5, 6, 8}
		CTRY_FRANCE = 33 // {0, 5}
		CTRY_GERMANY = 49 // {0, 4, 5}
		CTRY_GREECE = 30 // {1..4}
		CTRY_HONG_KONG = 852 // {2, 4, 6, 8, 9}
		CTRY_HUNGARY = 36 // {2, 5}
		CTRY_ICELAND = 354 // {1, 5, 6, 8}
		CTRY_IRELAND = 353 // {0, 5, 6, 8}
		CTRY_ITALY = 39 // {0..2, 5}
		CTRY_JAPAN = 81 // {0, 4, 6}
		CTRY_MEXICO = 52 // {2, 4, 5}
		CTRY_NETHERLANDS = 31 // {0..4}
		CTRY_NEW_ZEALAND = 64 // {6}
		CTRY_NORWAY = 47 // {0..3, 5}
		CTRY_POLAND = 48 // {4, 5}
		CTRY_PORTUGAL = 351 // {0..4, 6, 8}
		CTRY_PRCHINA = 86 // {1, 2, 4, 6}
		CTRY_ROMANIA = 40 // {3, 5}
		CTRY_RUSSIA = 7 // {0..2}
		CTRY_SINGAPORE = 65 // {0, 6}
		CTRY_SLOVAK = 42 // {1, 3, 5}
		CTRY_SLOVENIA = 386 // {1, 7, 8}
		CTRY_SOUTH_KOREA = 82 // {1, 4, 6}
		CTRY_SPAIN = 34 // {1, 5}
		CTRY_SWEDEN = 46 // {1..3, 5}
		CTRY_SWITZERLAND = 41 // {0, 3, 5}
		CTRY_TAIWAN = 886 // {1, 2, 4..6, 8, 9}
		CTRY_TURKEY = 90 // {1, 3, 4, 6}
		CTRY_UNITED_KINGDOM = 44 // {2, 3, 5}
		CTRY_UNITED_STATES = 1 // {0}
		LOCALE_NOUSEROVERRIDE = 80000000h
		LOCALE_USE_CP_ACP = 1073741824 // {30}
		LOCALE_ILANGUAGE = 1 // {0}
		LOCALE_SLANGUAGE = 2 // {1}
		LOCALE_SENGLANGUAGE = 4097 // {0, 12}
		LOCALE_SABBREVLANGNAME = 3 // {0, 1}
		LOCALE_SNATIVELANGNAME = 4 // {2}
		LOCALE_ICOUNTRY = 5 // {0, 2}
		LOCALE_SCOUNTRY = 6 // {1, 2}
		LOCALE_SENGCOUNTRY = 4098 // {1, 12}
		LOCALE_SABBREVCTRYNAME = 7 // {0..2}
		LOCALE_SNATIVECTRYNAME = 8 // {3}
		LOCALE_IDEFAULTLANGUAGE = 9 // {0, 3}
		LOCALE_IDEFAULTCOUNTRY = 10 // {1, 3}
		LOCALE_IDEFAULTCODEPAGE = 11 // {0, 1, 3}
		LOCALE_IDEFAULTANSICODEPAGE = 4100 // {2, 12}
		LOCALE_SLIST = 12 // {2, 3}
		LOCALE_IMEASURE = 13 // {0, 2, 3}
		LOCALE_SDECIMAL = 14 // {1..3}
		LOCALE_STHOUSAND = 15 // {0..3}
		LOCALE_SGROUPING = 16 // {4}
		LOCALE_IDIGITS = 17 // {0, 4}
		LOCALE_ILZERO = 18 // {1, 4}
		LOCALE_INEGNUMBER = 4112 // {4, 12}
		LOCALE_SNATIVEDIGITS = 19 // {0, 1, 4}
		LOCALE_SCURRENCY = 20 // {2, 4}
		LOCALE_SINTLSYMBOL = 21 // {0, 2, 4}
		LOCALE_SMONDECIMALSEP = 22 // {1, 2, 4}
		LOCALE_SMONTHOUSANDSEP = 23 // {0..2, 4}
		LOCALE_SMONGROUPING = 24 // {3, 4}
		LOCALE_ICURRDIGITS = 25 // {0, 3, 4}
		LOCALE_IINTLCURRDIGITS = 26 // {1, 3, 4}
		LOCALE_ICURRENCY = 27 // {0, 1, 3, 4}
		LOCALE_INEGCURR = 28 // {2..4}
		LOCALE_SDATE = 29 // {0, 2..4}
		LOCALE_STIME = 30 // {1..4}
		LOCALE_SSHORTDATE = 31 // {0..4}
		LOCALE_SLONGDATE = 32 // {5}
		LOCALE_STIMEFORMAT = 4099 // {0, 1, 12}
		LOCALE_IDATE = 33 // {0, 5}
		LOCALE_ILDATE = 34 // {1, 5}
		LOCALE_ITIME = 35 // {0, 1, 5}
		LOCALE_ITIMEMARKPOSN = 4101 // {0, 2, 12}
		LOCALE_ICENTURY = 36 // {2, 5}
		LOCALE_ITLZERO = 37 // {0, 2, 5}
		LOCALE_IDAYLZERO = 38 // {1, 2, 5}
		LOCALE_IMONLZERO = 39 // {0..2, 5}
		LOCALE_S1159 = 40 // {3, 5}
		LOCALE_S2359 = 41 // {0, 3, 5}
		LOCALE_ICALENDARTYPE = 4105 // {0, 3, 12}
		LOCALE_IOPTIONALCALENDAR = 4107 // {0, 1, 3, 12}
		LOCALE_IFIRSTDAYOFWEEK = 4108 // {2, 3, 12}
		LOCALE_IFIRSTWEEKOFYEAR = 4109 // {0, 2, 3, 12}
		LOCALE_SDAYNAME1 = 42 // {1, 3, 5}
		LOCALE_SDAYNAME2 = 43 // {0, 1, 3, 5}
		LOCALE_SDAYNAME3 = 44 // {2, 3, 5}
		LOCALE_SDAYNAME4 = 45 // {0, 2, 3, 5}
		LOCALE_SDAYNAME5 = 46 // {1..3, 5}
		LOCALE_SDAYNAME6 = 47 // {0..3, 5}
		LOCALE_SDAYNAME7 = 48 // {4, 5}
		LOCALE_SABBREVDAYNAME1 = 49 // {0, 4, 5}
		LOCALE_SABBREVDAYNAME2 = 50 // {1, 4, 5}
		LOCALE_SABBREVDAYNAME3 = 51 // {0, 1, 4, 5}
		LOCALE_SABBREVDAYNAME4 = 52 // {2, 4, 5}
		LOCALE_SABBREVDAYNAME5 = 53 // {0, 2, 4, 5}
		LOCALE_SABBREVDAYNAME6 = 54 // {1, 2, 4, 5}
		LOCALE_SABBREVDAYNAME7 = 55 // {0..2, 4, 5}
		LOCALE_SMONTHNAME1 = 56 // {3..5}
		LOCALE_SMONTHNAME2 = 57 // {0, 3..5}
		LOCALE_SMONTHNAME3 = 58 // {1, 3..5}
		LOCALE_SMONTHNAME4 = 59 // {0, 1, 3..5}
		LOCALE_SMONTHNAME5 = 60 // {2..5}
		LOCALE_SMONTHNAME6 = 61 // {0, 2..5}
		LOCALE_SMONTHNAME7 = 62 // {1..5}
		LOCALE_SMONTHNAME8 = 63 // {0..5}
		LOCALE_SMONTHNAME9 = 64 // {6}
		LOCALE_SMONTHNAME10 = 65 // {0, 6}
		LOCALE_SMONTHNAME11 = 66 // {1, 6}
		LOCALE_SMONTHNAME12 = 67 // {0, 1, 6}
		LOCALE_SMONTHNAME13 = 4110 // {1..3, 12}
		LOCALE_SABBREVMONTHNAME1 = 68 // {2, 6}
		LOCALE_SABBREVMONTHNAME2 = 69 // {0, 2, 6}
		LOCALE_SABBREVMONTHNAME3 = 70 // {1, 2, 6}
		LOCALE_SABBREVMONTHNAME4 = 71 // {0..2, 6}
		LOCALE_SABBREVMONTHNAME5 = 72 // {3, 6}
		LOCALE_SABBREVMONTHNAME6 = 73 // {0, 3, 6}
		LOCALE_SABBREVMONTHNAME7 = 74 // {1, 3, 6}
		LOCALE_SABBREVMONTHNAME8 = 75 // {0, 1, 3, 6}
		LOCALE_SABBREVMONTHNAME9 = 76 // {2, 3, 6}
		LOCALE_SABBREVMONTHNAME10 = 77 // {0, 2, 3, 6}
		LOCALE_SABBREVMONTHNAME11 = 78 // {1..3, 6}
		LOCALE_SABBREVMONTHNAME12 = 79 // {0..3, 6}
		LOCALE_SABBREVMONTHNAME13 = 4111 // {0..3, 12}
		LOCALE_SPOSITIVESIGN = 80 // {4, 6}
		LOCALE_SNEGATIVESIGN = 81 // {0, 4, 6}
		LOCALE_IPOSSIGNPOSN = 82 // {1, 4, 6}
		LOCALE_INEGSIGNPOSN = 83 // {0, 1, 4, 6}
		LOCALE_IPOSSYMPRECEDES = 84 // {2, 4, 6}
		LOCALE_IPOSSEPBYSPACE = 85 // {0, 2, 4, 6}
		LOCALE_INEGSYMPRECEDES = 86 // {1, 2, 4, 6}
		LOCALE_INEGSEPBYSPACE = 87 // {0..2, 4, 6}
		LOCALE_FONTSIGNATURE = 88 // {3, 4, 6}
		TIME_NOMINUTESORSECONDS = {0}
		TIME_NOSECONDS = {1}
		TIME_NOTIMEMARKER = {2}
		TIME_FORCE24HOURFORMAT = {3}
		DATE_SHORTDATE = {0}
		DATE_LONGDATE = {1}
		DATE_USE_ALT_CALENDAR = {2}
		CAL_ICALINTVALUE = 1 // {0}
		CAL_SCALNAME = 2 // {1}
		CAL_IYEAROFFSETRANGE = 3 // {0, 1}
		CAL_SERASTRING = 4 // {2}
		CAL_SSHORTDATE = 5 // {0, 2}
		CAL_SLONGDATE = 6 // {1, 2}
		CAL_SDAYNAME1 = 7 // {0..2}
		CAL_SDAYNAME2 = 8 // {3}
		CAL_SDAYNAME3 = 9 // {0, 3}
		CAL_SDAYNAME4 = 10 // {1, 3}
		CAL_SDAYNAME5 = 11 // {0, 1, 3}
		CAL_SDAYNAME6 = 12 // {2, 3}
		CAL_SDAYNAME7 = 13 // {0, 2, 3}
		CAL_SABBREVDAYNAME1 = 14 // {1..3}
		CAL_SABBREVDAYNAME2 = 15 // {0..3}
		CAL_SABBREVDAYNAME3 = 16 // {4}
		CAL_SABBREVDAYNAME4 = 17 // {0, 4}
		CAL_SABBREVDAYNAME5 = 18 // {1, 4}
		CAL_SABBREVDAYNAME6 = 19 // {0, 1, 4}
		CAL_SABBREVDAYNAME7 = 20 // {2, 4}
		CAL_SMONTHNAME1 = 21 // {0, 2, 4}
		CAL_SMONTHNAME2 = 22 // {1, 2, 4}
		CAL_SMONTHNAME3 = 23 // {0..2, 4}
		CAL_SMONTHNAME4 = 24 // {3, 4}
		CAL_SMONTHNAME5 = 25 // {0, 3, 4}
		CAL_SMONTHNAME6 = 26 // {1, 3, 4}
		CAL_SMONTHNAME7 = 27 // {0, 1, 3, 4}
		CAL_SMONTHNAME8 = 28 // {2..4}
		CAL_SMONTHNAME9 = 29 // {0, 2..4}
		CAL_SMONTHNAME10 = 30 // {1..4}
		CAL_SMONTHNAME11 = 31 // {0..4}
		CAL_SMONTHNAME12 = 32 // {5}
		CAL_SMONTHNAME13 = 33 // {0, 5}
		CAL_SABBREVMONTHNAME1 = 34 // {1, 5}
		CAL_SABBREVMONTHNAME2 = 35 // {0, 1, 5}
		CAL_SABBREVMONTHNAME3 = 36 // {2, 5}
		CAL_SABBREVMONTHNAME4 = 37 // {0, 2, 5}
		CAL_SABBREVMONTHNAME5 = 38 // {1, 2, 5}
		CAL_SABBREVMONTHNAME6 = 39 // {0..2, 5}
		CAL_SABBREVMONTHNAME7 = 40 // {3, 5}
		CAL_SABBREVMONTHNAME8 = 41 // {0, 3, 5}
		CAL_SABBREVMONTHNAME9 = 42 // {1, 3, 5}
		CAL_SABBREVMONTHNAME10 = 43 // {0, 1, 3, 5}
		CAL_SABBREVMONTHNAME11 = 44 // {2, 3, 5}
		CAL_SABBREVMONTHNAME12 = 45 // {0, 2, 3, 5}
		CAL_SABBREVMONTHNAME13 = 46 // {1..3, 5}
		ENUM_ALL_CALENDARS = -1 // {0..31}
		CAL_GREGORIAN = 1 // {0}
		CAL_GREGORIAN_US = 2 // {1}
		CAL_JAPAN = 3 // {0, 1}
		CAL_TAIWAN = 4 // {2}
		CAL_KOREA = 5 // {0, 2}
		CAL_HIJRI = 6 // {1, 2}
		CAL_THAI = 7 // {0..2}
		CAL_HEBREW = 8 // {3}
		RIGHT_ALT_PRESSED = {0}
		LEFT_ALT_PRESSED = {1}
		RIGHT_CTRL_PRESSED = {2}
		LEFT_CTRL_PRESSED = {3}
		SHIFT_PRESSED = {4}
		NUMLOCK_ON = {5}
		SCROLLLOCK_ON = {6}
		CAPSLOCK_ON = {7}
		ENHANCED_KEY = {8}
		FROM_LEFT_1ST_BUTTON_PRESSED = {0}
		RIGHTMOST_BUTTON_PRESSED = {1}
		FROM_LEFT_2ND_BUTTON_PRESSED = {2}
		FROM_LEFT_3RD_BUTTON_PRESSED = {3}
		FROM_LEFT_4TH_BUTTON_PRESSED = {4}
		MOUSE_MOVED = {0}
		DOUBLE_CLICK = {1}
		KEY_EVENT = {0}
		MOUSE_EVENT = 2 // {1}
		WINDOW_BUFFER_SIZE_EVENT = 4 // {2}
		MENU_EVENT = 8 // {3}
		FOCUS_EVENT = 16 // {4}
		FOREGROUND_BLUE = 1 // {0}
		FOREGROUND_GREEN = 2 // {1}
		FOREGROUND_RED = 4 // {2}
		FOREGROUND_INTENSITY = 8 // {3}
		BACKGROUND_BLUE = 16 // {4}
		BACKGROUND_GREEN = 32 // {5}
		BACKGROUND_RED = 64 // {6}
		BACKGROUND_INTENSITY = 128 // {7}
		CTRL_C_EVENT = 0 // {}
		CTRL_BREAK_EVENT = 1 // {0}
		CTRL_CLOSE_EVENT = 2 // {1}
		CTRL_LOGOFF_EVENT = 5 // {0, 2}
		CTRL_SHUTDOWN_EVENT = 6 // {1, 2}
		ENABLE_PROCESSED_INPUT = {0}
		ENABLE_LINE_INPUT = {1}
		ENABLE_ECHO_INPUT = {2}
		ENABLE_WINDOW_INPUT = {3}
		ENABLE_MOUSE_INPUT = {4}
		ENABLE_PROCESSED_OUTPUT = {0}
		ENABLE_WRAP_AT_EOL_OUTPUT = {1}
		CONSOLE_TEXTMODE_BUFFER = {0}
		VS_FILE_INFO = 16 // {4}
		VS_VERSION_INFO = 1 // {0}
		VS_USER_DEFINED = 100 // {2, 5, 6}
		VS_FFI_SIGNATURE = -17890115 // {0, 2..5, 7, 10, 16..19, 21..23, 25..31}
		VS_FFI_STRUCVERSION = 65536 // {16}
		VS_FFI_FILEFLAGSMASK = 63 // {0..5}
		VS_FF_DEBUG = {0}
		VS_FF_PRERELEASE = {1}
		VS_FF_PATCHED = {2}
		VS_FF_PRIVATEBUILD = {3}
		VS_FF_INFOINFERRED = {4}
		VS_FF_SPECIALBUILD = {5}
		VOS_UNKNOWN = {}
		VOS_DOS = {16}
		VOS_OS216 = {17}
		VOS_OS232 = {16, 17}
		VOS_NT = {18}
		VOS__BASE = {}
		VOS__WINDOWS16 = {0}
		VOS__PM16 = {1}
		VOS__PM32 = {0, 1}
		VOS__WINDOWS32 = {2}
		VOS_DOS_WINDOWS16 = {0, 16}
		VOS_DOS_WINDOWS32 = {2, 16}
		VOS_OS216_PM16 = {1, 17}
		VOS_OS232_PM32 = {0, 1, 16, 17}
		VOS_NT_WINDOWS32 = {2, 18}
		VFT_UNKNOWN = 0 // {}
		VFT_APP = 1 // {0}
		VFT_DLL = 2 // {1}
		VFT_DRV = 3 // {0, 1}
		VFT_FONT = 4 // {2}
		VFT_VXD = 5 // {0, 2}
		VFT_STATIC_LIB = 7 // {0..2}
		VFT2_UNKNOWN = 0 // {}
		VFT2_DRV_PRINTER = 1 // {0}
		VFT2_DRV_KEYBOARD = 2 // {1}
		VFT2_DRV_LANGUAGE = 3 // {0, 1}
		VFT2_DRV_DISPLAY = 4 // {2}
		VFT2_DRV_MOUSE = 5 // {0, 2}
		VFT2_DRV_NETWORK = 6 // {1, 2}
		VFT2_DRV_SYSTEM = 7 // {0..2}
		VFT2_DRV_INSTALLABLE = 8 // {3}
		VFT2_DRV_SOUND = 9 // {0, 3}
		VFT2_DRV_COMM = 10 // {1, 3}
		VFT2_FONT_RASTER = 1 // {0}
		VFT2_FONT_VECTOR = 2 // {1}
		VFT2_FONT_TRUETYPE = 3 // {0, 1}
		VFFF_ISSHAREDFILE = {0}
		VFF_CURNEDEST = {0}
		VFF_FILEINUSE = {1}
		VFF_BUFFTOOSMALL = {2}
		VIFF_FORCEINSTALL = {0}
		VIFF_DONTDELETEOLD = {1}
		VIF_TEMPFILE = {0}
		VIF_MISMATCH = {1}
		VIF_SRCOLD = {2}
		VIF_DIFFLANG = {3}
		VIF_DIFFCODEPG = {4}
		VIF_DIFFTYPE = {5}
		VIF_WRITEPROT = {6}
		VIF_FILEINUSE = {7}
		VIF_OUTOFSPACE = {8}
		VIF_ACCESSVIOLATION = {9}
		VIF_SHARINGVIOLATION = {10}
		VIF_CANNOTCREATE = {11}
		VIF_CANNOTDELETE = {12}
		VIF_CANNOTRENAME = {13}
		VIF_CANNOTDELETECUR = {14}
		VIF_OUTOFMEMORY = {15}
		VIF_CANNOTREADSRC = {16}
		VIF_CANNOTREADDST = {17}
		VIF_BUFFTOOSMALL = {18}
		PROVIDER_KEEPS_VALUE_LENGTH = 1 // {0}
		WIN31_CLASS = 0 // {}
		CDERR_DIALOGFAILURE = 65535 // {0..15}
		CDERR_GENERALCODES = 0 // {}
		CDERR_STRUCTSIZE = 1 // {0}
		CDERR_INITIALIZATION = 2 // {1}
		CDERR_NOTEMPLATE = 3 // {0, 1}
		CDERR_NOHINSTANCE = 4 // {2}
		CDERR_LOADSTRFAILURE = 5 // {0, 2}
		CDERR_FINDRESFAILURE = 6 // {1, 2}
		CDERR_LOADRESFAILURE = 7 // {0..2}
		CDERR_LOCKRESFAILURE = 8 // {3}
		CDERR_MEMALLOCFAILURE = 9 // {0, 3}
		CDERR_MEMLOCKFAILURE = 10 // {1, 3}
		CDERR_NOHOOK = 11 // {0, 1, 3}
		CDERR_REGISTERMSGFAIL = 12 // {2, 3}
		PDERR_PRINTERCODES = 4096 // {12}
		PDERR_SETUPFAILURE = 4097 // {0, 12}
		PDERR_PARSEFAILURE = 4098 // {1, 12}
		PDERR_RETDEFFAILURE = 4099 // {0, 1, 12}
		PDERR_LOADDRVFAILURE = 4100 // {2, 12}
		PDERR_GETDEVMODEFAIL = 4101 // {0, 2, 12}
		PDERR_INITFAILURE = 4102 // {1, 2, 12}
		PDERR_NODEVICES = 4103 // {0..2, 12}
		PDERR_NODEFAULTPRN = 4104 // {3, 12}
		PDERR_DNDMMISMATCH = 4105 // {0, 3, 12}
		PDERR_CREATEICFAILURE = 4106 // {1, 3, 12}
		PDERR_PRINTERNOTFOUND = 4107 // {0, 1, 3, 12}
		PDERR_DEFAULTDIFFERENT = 4108 // {2, 3, 12}
		CFERR_CHOOSEFONTCODES = 8192 // {13}
		CFERR_NOFONTS = 8193 // {0, 13}
		CFERR_MAXLESSTHANMIN = 8194 // {1, 13}
		FNERR_FILENAMECODES = 12288 // {12, 13}
		FNERR_SUBCLASSFAILURE = 12289 // {0, 12, 13}
		FNERR_INVALIDFILENAME = 12290 // {1, 12, 13}
		FNERR_BUFFERTOOSMALL = 12291 // {0, 1, 12, 13}
		FRERR_FINDREPLACECODES = 16384 // {14}
		FRERR_BUFFERLENGTHZERO = 16385 // {0, 14}
		CCERR_CHOOSECOLORCODES = 20480 // {12, 14}
		WM_DDE_FIRST = 992 // {5..9}
		WM_DDE_INITIATE = 992 // {5..9}
		WM_DDE_TERMINATE = 993 // {0, 5..9}
		WM_DDE_ADVISE = 994 // {1, 5..9}
		WM_DDE_UNADVISE = 995 // {0, 1, 5..9}
		WM_DDE_ACK = 996 // {2, 5..9}
		WM_DDE_DATA = 997 // {0, 2, 5..9}
		WM_DDE_REQUEST = 998 // {1, 2, 5..9}
		WM_DDE_POKE = 999 // {0..2, 5..9}
		WM_DDE_EXECUTE = 1000 // {3, 5..9}
		WM_DDE_LAST = 1000 // {3, 5..9}
		XST_NULL = 0 // {}
		XST_INCOMPLETE = 1 // {0}
		XST_CONNECTED = 2 // {1}
		XST_INIT1 = 3 // {0, 1}
		XST_INIT2 = 4 // {2}
		XST_REQSENT = 5 // {0, 2}
		XST_DATARCVD = 6 // {1, 2}
		XST_POKESENT = 7 // {0..2}
		XST_POKEACKRCVD = 8 // {3}
		XST_EXECSENT = 9 // {0, 3}
		XST_EXECACKRCVD = 10 // {1, 3}
		XST_ADVSENT = 11 // {0, 1, 3}
		XST_UNADVSENT = 12 // {2, 3}
		XST_ADVACKRCVD = 13 // {0, 2, 3}
		XST_UNADVACKRCVD = 14 // {1..3}
		XST_ADVDATASENT = 15 // {0..3}
		XST_ADVDATAACKRCVD = 16 // {4}
		CADV_LATEACK = 65535 // {0..15}
		ST_CONNECTED = {0}
		ST_ADVISE = {1}
		ST_ISLOCAL = {2}
		ST_BLOCKED = {3}
		ST_CLIENT = {4}
		ST_TERMINATED = {5}
		ST_INLIST = {6}
		ST_BLOCKNEXT = {7}
		ST_ISSELF = {8}
		DDE_FACK = {15}
		DDE_FBUSY = {14}
		DDE_FDEFERUPD = {14}
		DDE_FACKREQ = {15}
		DDE_FRELEASE = {13}
		DDE_FREQUESTED = {12}
		DDE_FAPPSTATUS = {0..7}
		DDE_FNOTPROCESSED = {}
		DDE_FACKRESERVED = {8..13, 16..31}
		DDE_FADVRESERVED = {0..13, 16..31}
		DDE_FDATRESERVED = {0..11, 14, 16..31}
		DDE_FPOKRESERVED = {0..12, 14..31}
		MSGF_DDEMGR = 32769 // {0, 15}
		CP_WINANSI = 1004 // {2, 3, 5..9}
		CP_WINUNICODE = 1200 // {4, 5, 7, 10}
		CP_WINNEUTRAL = 1004 // {2, 3, 5..9}
		XTYPF_NOBLOCK = {1}
		XTYPF_NODATA = {2}
		XTYPF_ACKREQ = {3}
		XCLASS_MASK = {10..15}
		XCLASS_BOOL = {12}
		XCLASS_DATA = {13}
		XCLASS_FLAGS = {14}
		XCLASS_NOTIFICATION = {15}
		XTYP_ERROR = 32770 // {1, 15}
		XTYP_ADVDATA = 16400 // {4, 14}
		XTYP_ADVREQ = 8226 // {1, 5, 13}
		XTYP_ADVSTART = 4144 // {4, 5, 12}
		XTYP_ADVSTOP = 32832 // {6, 15}
		XTYP_EXECUTE = 16464 // {4, 6, 14}
		XTYP_CONNECT = 4194 // {1, 5, 6, 12}
		XTYP_CONNECT_CONFIRM = 32882 // {1, 4..6, 15}
		XTYP_XACT_COMPLETE = 32896 // {7, 15}
		XTYP_POKE = 16528 // {4, 7, 14}
		XTYP_REGISTER = 32930 // {1, 5, 7, 15}
		XTYP_REQUEST = 8368 // {4, 5, 7, 13}
		XTYP_DISCONNECT = 32962 // {1, 6, 7, 15}
		XTYP_UNREGISTER = 32978 // {1, 4, 6, 7, 15}
		XTYP_WILDCONNECT = 8418 // {1, 5..7, 13}
		XTYP_MASK = 240 // {4..7}
		XTYP_SHIFT = 4 // {2}
		TIMEOUT_ASYNC = -1 // {0..31}
		QID_SYNC = -1 // {0..31}
		SZDDESYS_TOPIC = "System"
		SZDDESYS_ITEM_TOPICS = "Topics"
		SZDDESYS_ITEM_SYSITEMS = "SysItems"
		SZDDESYS_ITEM_RTNMSG = "ReturnMessage"
		SZDDESYS_ITEM_STATUS = "Status"
		SZDDESYS_ITEM_FORMATS = "Formats"
		SZDDESYS_ITEM_HELP = "Help"
		SZDDE_ITEM_ITEMLIST = "TopicItemList"
		CBF_FAIL_SELFCONNECTIONS = 4096 // {12}
		CBF_FAIL_CONNECTIONS = 8192 // {13}
		CBF_FAIL_ADVISES = 16384 // {14}
		CBF_FAIL_EXECUTES = 32768 // {15}
		CBF_FAIL_POKES = 65536 // {16}
		CBF_FAIL_REQUESTS = 131072 // {17}
		CBF_FAIL_ALLSVRXACTIONS = 258048 // {12..17}
		CBF_SKIP_CONNECT_CONFIRMS = 262144 // {18}
		CBF_SKIP_REGISTRATIONS = 524288 // {19}
		CBF_SKIP_UNREGISTRATIONS = 1048576 // {20}
		CBF_SKIP_DISCONNECTS = 2097152 // {21}
		CBF_SKIP_ALLNOTIFICATIONS = 3932160 // {18..21}
		APPCMD_CLIENTONLY = 16 // {4}
		APPCMD_FILTERINITS = 32 // {5}
		APPCMD_MASK = 4080 // {4..11}
		APPCLASS_STANDARD = 0 // {}
		APPCLASS_MASK = 15 // {0..3}
		EC_ENABLEALL = 0 // {}
		EC_ENABLEONE = 128 // {7}
		EC_DISABLE = 8 // {3}
		EC_QUERYWAITING = 2 // {1}
		DNS_REGISTER = 1 // {0}
		DNS_UNREGISTER = 2 // {1}
		DNS_FILTERON = 4 // {2}
		DNS_FILTEROFF = 8 // {3}
		HDATA_APPOWNED = 1 // {0}
		DMLERR_NO_ERROR = 0 // {}
		DMLERR_FIRST = 16384 // {14}
		DMLERR_ADVACKTIMEOUT = 16384 // {14}
		DMLERR_BUSY = 16385 // {0, 14}
		DMLERR_DATAACKTIMEOUT = 16386 // {1, 14}
		DMLERR_DLL_NOT_INITIALIZED = 16387 // {0, 1, 14}
		DMLERR_DLL_USAGE = 16388 // {2, 14}
		DMLERR_EXECACKTIMEOUT = 16389 // {0, 2, 14}
		DMLERR_INVALIDPARAMETER = 16390 // {1, 2, 14}
		DMLERR_LOW_MEMORY = 16391 // {0..2, 14}
		DMLERR_MEMORY_ERROR = 16392 // {3, 14}
		DMLERR_NOTPROCESSED = 16393 // {0, 3, 14}
		DMLERR_NO_CONV_ESTABLISHED = 16394 // {1, 3, 14}
		DMLERR_POKEACKTIMEOUT = 16395 // {0, 1, 3, 14}
		DMLERR_POSTMSG_FAILED = 16396 // {2, 3, 14}
		DMLERR_REENTRANCY = 16397 // {0, 2, 3, 14}
		DMLERR_SERVER_DIED = 16398 // {1..3, 14}
		DMLERR_SYS_ERROR = 16399 // {0..3, 14}
		DMLERR_UNADVACKTIMEOUT = 16400 // {4, 14}
		DMLERR_UNFOUND_QUEUE_ID = 16401 // {0, 4, 14}
		DMLERR_LAST = 16401 // {0, 4, 14}
		MH_CREATE = 1 // {0}
		MH_KEEP = 2 // {1}
		MH_DELETE = 3 // {0, 1}
		MH_CLEANUP = 4 // {2}
		MAX_MONITORS = 4 // {2}
		APPCLASS_MONITOR = 1 // {0}
		XTYP_MONITOR = 33010 // {1, 4..7, 15}
		MF_HSZ_INFO = {24}
		MF_SENDMSGS = {25}
		MF_POSTMSGS = {26}
		MF_CALLBACKS = {27}
		MF_ERRORS = {28}
		MF_LINKS = {29}
		MF_CONV = {30}
		MF_MASK = {24..31}
		LZERROR_BADINHANDLE = -1 // {0..31}
		LZERROR_BADOUTHANDLE = -2 // {1..31}
		LZERROR_READ = -3 // {0, 2..31}
		LZERROR_WRITE = -4 // {2..31}
		LZERROR_GLOBALLOC = -5 // {0, 1, 3..31}
		LZERROR_GLOBLOCK = -6 // {1, 3..31}
		LZERROR_BADVALUE = -7 // {0, 3..31}
		LZERROR_UNKNOWNALG = -8 // {3..31}
		ABM_NEW = 0 // {}
		ABM_REMOVE = 1 // {0}
		ABM_QUERYPOS = 2 // {1}
		ABM_SETPOS = 3 // {0, 1}
		ABM_GETSTATE = 4 // {2}
		ABM_GETTASKBARPOS = 5 // {0, 2}
		ABM_ACTIVATE = 6 // {1, 2}
		ABM_GETAUTOHIDEBAR = 7 // {0..2}
		ABM_SETAUTOHIDEBAR = 8 // {3}
		ABM_WINDOWPOSCHANGED = 9 // {0, 3}
		ABN_STATECHANGE = 0 // {}
		ABN_POSCHANGED = 1 // {0}
		ABN_FULLSCREENAPP = 2 // {1}
		ABN_WINDOWARRANGE = 3 // {0, 1}
		ABS_AUTOHIDE = 1 // {0}
		ABS_ALWAYSONTOP = 2 // {1}
		ABE_LEFT = 0 // {}
		ABE_TOP = 1 // {0}
		ABE_RIGHT = 2 // {1}
		ABE_BOTTOM = 3 // {0, 1}
		FO_MOVE = 1 // {0}
		FO_COPY = 2 // {1}
		FO_DELETE = 3 // {0, 1}
		FO_RENAME = 4 // {2}
		FOF_MULTIDESTFILES = 1 // {0}
		FOF_CONFIRMMOUSE = 2 // {1}
		FOF_SILENT = 4 // {2}
		FOF_RENAMEONCOLLISION = 8 // {3}
		FOF_NOCONFIRMATION = 16 // {4}
		FOF_WANTMAPPINGHANDLE = 32 // {5}
		FOF_ALLOWUNDO = 64 // {6}
		FOF_FILESONLY = 128 // {7}
		FOF_SIMPLEPROGRESS = 256 // {8}
		FOF_NOCONFIRMMKDIR = 512 // {9}
		PO_DELETE = 19 // {0, 1, 4}
		PO_RENAME = 20 // {2, 4}
		PO_PORTCHANGE = 32 // {5}
		PO_REN_PORT = 52 // {2, 4, 5}
		SE_ERR_FNF = 2 // {1}
		SE_ERR_PNF = 3 // {0, 1}
		SE_ERR_ACCESSDENIED = 5 // {0, 2}
		SE_ERR_OOM = 8 // {3}
		SE_ERR_DLLNOTFOUND = 32 // {5}
		SE_ERR_SHARE = 26 // {1, 3, 4}
		SE_ERR_ASSOCINCOMPLETE = 27 // {0, 1, 3, 4}
		SE_ERR_DDETIMEOUT = 28 // {2..4}
		SE_ERR_DDEFAIL = 29 // {0, 2..4}
		SE_ERR_DDEBUSY = 30 // {1..4}
		SE_ERR_NOASSOC = 31 // {0..4}
		SEE_MASK_CLASSNAME = {0}
		SEE_MASK_CLASSKEY = {0, 1}
		SEE_MASK_IDLIST = {2}
		SEE_MASK_INVOKEIDLIST = {2, 3}
		SEE_MASK_ICON = {4}
		SEE_MASK_HOTKEY = {5}
		SEE_MASK_NOCLOSEPROCESS = {6}
		SEE_MASK_CONNECTNETDRV = {7}
		SEE_MASK_FLAG_DDEWAIT = {8}
		SEE_MASK_DOENVSUBST = {9}
		SEE_MASK_FLAG_NO_UI = {10}
		SEE_MASK_UNICODE = {14}
		SEE_MASK_NO_CONSOLE = {15}
		NIM_ADD = 0 // {}
		NIM_MODIFY = 1 // {0}
		NIM_DELETE = 2 // {1}
		NIF_MESSAGE = {0}
		NIF_ICON = {1}
		NIF_TIP = {2}
		SHGFI_ICON = {8}
		SHGFI_DISPLAYNAME = {9}
		SHGFI_TYPENAME = {10}
		SHGFI_ATTRIBUTES = {11}
		SHGFI_ICONLOCATION = {12}
		SHGFI_EXETYPE = {13}
		SHGFI_SYSICONINDEX = {14}
		SHGFI_LINKOVERLAY = {15}
		SHGFI_SELECTED = {16}
		SHGFI_LARGEICON = {}
		SHGFI_SMALLICON = {0}
		SHGFI_OPENICON = {1}
		SHGFI_SHELLICONSIZE = {2}
		SHGFI_PIDL = {3}
		SHGFI_USEFILEATTRIBUTES = {4}
		SHGNLI_PIDL = 1 // {0}
		SHGNLI_PREFIXNAME = 2 // {1}
		MAXPROPPAGES = 100 // {2, 5, 6}
		PSP_DEFAULT = {}
		PSP_DLGINDIRECT = {0}
		PSP_USEHICON = {1}
		PSP_USEICONID = {2}
		PSP_USETITLE = {3}
		PSP_RTLREADING = {4}
		PSP_HASHELP = {5}
		PSP_USEREFPARENT = {6}
		PSP_USECALLBACK = {7}
		PSPCB_RELEASE = 1 // {0}
		PSPCB_CREATE = 2 // {1}
		PSH_DEFAULT = {}
		PSH_PROPTITLE = {0}
		PSH_USEHICON = {1}
		PSH_USEICONID = {2}
		PSH_PROPSHEETPAGE = {3}
		PSH_WIZARD = {5}
		PSH_USEPSTARTPAGE = {6}
		PSH_NOAPPLYNOW = {7}
		PSH_USECALLBACK = {8}
		PSH_HASHELP = {9}
		PSH_MODELESS = {10}
		PSH_RTLREADING = {11}
		PSCB_INITIALIZED = 1 // {0}
		PSCB_PRECREATE = 2 // {1}
		PSN_FIRST = -200 // {3..5, 8..31}
		PSN_LAST = -299 // {0, 2, 4, 6, 7, 9..31}
		PSN_SETACTIVE = -200 // {3..5, 8..31}
		PSN_KILLACTIVE = -201 // {0..2, 4, 5, 8..31}
		PSN_APPLY = -202 // {1, 2, 4, 5, 8..31}
		PSN_RESET = -203 // {0, 2, 4, 5, 8..31}
		PSN_HELP = -205 // {0, 1, 4, 5, 8..31}
		PSN_WIZBACK = -206 // {1, 4, 5, 8..31}
		PSN_WIZNEXT = -207 // {0, 4, 5, 8..31}
		PSN_WIZFINISH = -208 // {4, 5, 8..31}
		PSN_QUERYCANCEL = -209 // {0..3, 5, 8..31}
		PSNRET_NOERROR = 0 // {}
		PSNRET_INVALID = 1 // {0}
		PSNRET_INVALID_NOCHANGEPAGE = 2 // {1}
		PSM_SETCURSEL = 1125 // {0, 2, 5, 6, 10}
		PSM_REMOVEPAGE = 1126 // {1, 2, 5, 6, 10}
		PSM_ADDPAGE = 1127 // {0..2, 5, 6, 10}
		PSM_CHANGED = 1128 // {3, 5, 6, 10}
		PSM_RESTARTWINDOWS = 1129 // {0, 3, 5, 6, 10}
		PSM_REBOOTSYSTEM = 1130 // {1, 3, 5, 6, 10}
		PSM_CANCELTOCLOSE = 1131 // {0, 1, 3, 5, 6, 10}
		PSM_QUERYSIBLINGS = 1132 // {2, 3, 5, 6, 10}
		PSM_UNCHANGED = 1133 // {0, 2, 3, 5, 6, 10}
		PSM_APPLY = 1134 // {1..3, 5, 6, 10}
		PSM_SETTITLEA = 1135 // {0..3, 5, 6, 10}
		PSM_SETTITLEW = 1144 // {3..6, 10}
		PSM_SETTITLE = 1135 // {0..3, 5, 6, 10}
		PSM_SETWIZBUTTONS = 1136 // {4..6, 10}
		PSWIZB_BACK = {0}
		PSWIZB_NEXT = {1}
		PSWIZB_FINISH = {2}
		PSWIZB_DISABLEDFINISH = {3}
		PSM_PRESSBUTTON = 1137 // {0, 4..6, 10}
		PSBTN_BACK = 0 // {}
		PSBTN_NEXT = 1 // {0}
		PSBTN_FINISH = 2 // {1}
		PSBTN_OK = 3 // {0, 1}
		PSBTN_APPLYNOW = 4 // {2}
		PSBTN_CANCEL = 5 // {0, 2}
		PSBTN_HELP = 6 // {1, 2}
		PSBTN_MAX = 6 // {1, 2}
		PSM_SETCURSELID = 1138 // {1, 4..6, 10}
		PSM_SETFINISHTEXTA = 1139 // {0, 1, 4..6, 10}
		PSM_SETFINISHTEXTW = 1145 // {0, 3..6, 10}
		PSM_SETFINISHTEXT = 1139 // {0, 1, 4..6, 10}
		PSM_GETTABCONTROL = 1140 // {2, 4..6, 10}
		PSM_ISDIALOGMESSAGE = 1141 // {0, 2, 4..6, 10}
		PSM_GETCURRENTPAGEHWND = 1142 // {1, 2, 4..6, 10}
		ID_PSRESTARTWINDOWS = 2 // {1}
		ID_PSREBOOTSYSTEM = 3 // {0, 1}
		WIZ_CXDLG = 276 // {2, 4, 8}
		WIZ_CYDLG = 140 // {2, 3, 7}
		WIZ_CXBMP = 80 // {4, 6}
		WIZ_BODYX = 92 // {2..4, 6}
		WIZ_BODYCX = 184 // {3..5, 7}
		PROP_SM_CXDLG = 212 // {2, 4, 6, 7}
		PROP_SM_CYDLG = 188 // {2..5, 7}
		PROP_MED_CXDLG = 227 // {0, 1, 5..7}
		PROP_MED_CYDLG = 215 // {0..2, 4, 6, 7}
		PROP_LG_CXDLG = 252 // {2..7}
		PROP_LG_CYDLG = 218 // {1, 3, 4, 6, 7}
		PRINTER_CONTROL_PAUSE = 1 // {0}
		PRINTER_CONTROL_RESUME = 2 // {1}
		PRINTER_CONTROL_PURGE = 3 // {0, 1}
		PRINTER_CONTROL_SET_STATUS = 4 // {2}
		PRINTER_STATUS_PAUSED = {0}
		PRINTER_STATUS_ERROR = {1}
		PRINTER_STATUS_PENDING_DELETION = {2}
		PRINTER_STATUS_PAPER_JAM = {3}
		PRINTER_STATUS_PAPER_OUT = {4}
		PRINTER_STATUS_MANUAL_FEED = {5}
		PRINTER_STATUS_PAPER_PROBLEM = {6}
		PRINTER_STATUS_OFFLINE = {7}
		PRINTER_STATUS_IO_ACTIVE = {8}
		PRINTER_STATUS_BUSY = {9}
		PRINTER_STATUS_PRINTING = {10}
		PRINTER_STATUS_OUTPUT_BIN_FULL = {11}
		PRINTER_STATUS_NOT_AVAILABLE = {12}
		PRINTER_STATUS_WAITING = {13}
		PRINTER_STATUS_PROCESSING = {14}
		PRINTER_STATUS_INITIALIZING = {15}
		PRINTER_STATUS_WARMING_UP = {16}
		PRINTER_STATUS_TONER_LOW = {17}
		PRINTER_STATUS_NO_TONER = {18}
		PRINTER_STATUS_PAGE_PUNT = {19}
		PRINTER_STATUS_USER_INTERVENTION = {20}
		PRINTER_STATUS_OUT_OF_MEMORY = {21}
		PRINTER_STATUS_DOOR_OPEN = {22}
		PRINTER_STATUS_SERVER_UNKNOWN = {23}
		PRINTER_STATUS_POWER_SAVE = {24}
		PRINTER_ATTRIBUTE_QUEUED = {0}
		PRINTER_ATTRIBUTE_DIRECT = {1}
		PRINTER_ATTRIBUTE_DEFAULT = {2}
		PRINTER_ATTRIBUTE_SHARED = {3}
		PRINTER_ATTRIBUTE_NETWORK = {4}
		PRINTER_ATTRIBUTE_HIDDEN = {5}
		PRINTER_ATTRIBUTE_LOCAL = {6}
		PRINTER_ATTRIBUTE_ENABLE_DEVQ = {7}
		PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = {8}
		PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = {9}
		PRINTER_ATTRIBUTE_WORK_OFFLINE = {10}
		PRINTER_ATTRIBUTE_ENABLE_BIDI = {11}
		NO_PRIORITY = 0 // {}
		MAX_PRIORITY = 99 // {0, 1, 5, 6}
		MIN_PRIORITY = 1 // {0}
		DEF_PRIORITY = 1 // {0}
		JOB_CONTROL_PAUSE = 1 // {0}
		JOB_CONTROL_RESUME = 2 // {1}
		JOB_CONTROL_CANCEL = 3 // {0, 1}
		JOB_CONTROL_RESTART = 4 // {2}
		JOB_CONTROL_DELETE = 5 // {0, 2}
		JOB_STATUS_PAUSED = {0}
		JOB_STATUS_ERROR = {1}
		JOB_STATUS_DELETING = {2}
		JOB_STATUS_SPOOLING = {3}
		JOB_STATUS_PRINTING = {4}
		JOB_STATUS_OFFLINE = {5}
		JOB_STATUS_PAPEROUT = {6}
		JOB_STATUS_PRINTED = {7}
		JOB_STATUS_DELETED = {8}
		JOB_STATUS_BLOCKED_DEVQ = {9}
		JOB_STATUS_USER_INTERVENTION = {10}
		JOB_POSITION_UNSPECIFIED = 0 // {}
		DI_CHANNEL = 1 // {0}
		DI_READ_SPOOL_JOB = 3 // {0, 1}
		FORM_BUILTIN = 1 // {0}
		PORT_TYPE_WRITE = 1 // {0}
		PORT_TYPE_READ = 2 // {1}
		PORT_TYPE_REDIRECTED = 4 // {2}
		PORT_TYPE_NET_ATTACHED = 8 // {3}
		PRINTER_ENUM_DEFAULT = {0}
		PRINTER_ENUM_LOCAL = {1}
		PRINTER_ENUM_CONNECTIONS = {2}
		PRINTER_ENUM_FAVORITE = {2}
		PRINTER_ENUM_NAME = {3}
		PRINTER_ENUM_REMOTE = {4}
		PRINTER_ENUM_SHARED = {5}
		PRINTER_ENUM_NETWORK = {6}
		PRINTER_ENUM_EXPAND = {14}
		PRINTER_ENUM_CONTAINER = {15}
		PRINTER_ENUM_ICONMASK = {16..23}
		PRINTER_ENUM_ICON1 = {16}
		PRINTER_ENUM_ICON2 = {17}
		PRINTER_ENUM_ICON3 = {18}
		PRINTER_ENUM_ICON4 = {19}
		PRINTER_ENUM_ICON5 = {20}
		PRINTER_ENUM_ICON6 = {21}
		PRINTER_ENUM_ICON7 = {22}
		PRINTER_ENUM_ICON8 = {23}
		PRINTER_NOTIFY_TYPE = 0 // {}
		JOB_NOTIFY_TYPE = 1 // {0}
		PRINTER_NOTIFY_FIELD_SERVER_NAME = 0 // {}
		PRINTER_NOTIFY_FIELD_PRINTER_NAME = 1 // {0}
		PRINTER_NOTIFY_FIELD_SHARE_NAME = 2 // {1}
		PRINTER_NOTIFY_FIELD_PORT_NAME = 3 // {0, 1}
		PRINTER_NOTIFY_FIELD_DRIVER_NAME = 4 // {2}
		PRINTER_NOTIFY_FIELD_COMMENT = 5 // {0, 2}
		PRINTER_NOTIFY_FIELD_LOCATION = 6 // {1, 2}
		PRINTER_NOTIFY_FIELD_DEVMODE = 7 // {0..2}
		PRINTER_NOTIFY_FIELD_SEPFILE = 8 // {3}
		PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 9 // {0, 3}
		PRINTER_NOTIFY_FIELD_PARAMETERS = 10 // {1, 3}
		PRINTER_NOTIFY_FIELD_DATATYPE = 11 // {0, 1, 3}
		PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTO = (* ... *)12 // {2, 3}
		PRINTER_NOTIFY_FIELD_ATTRIBUTES = 13 // {0, 2, 3}
		PRINTER_NOTIFY_FIELD_PRIORITY = 14 // {1..3}
		PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 15 // {0..3}
		PRINTER_NOTIFY_FIELD_START_TIME = 16 // {4}
		PRINTER_NOTIFY_FIELD_UNTIL_TIME = 17 // {0, 4}
		PRINTER_NOTIFY_FIELD_STATUS = 18 // {1, 4}
		PRINTER_NOTIFY_FIELD_STATUS_STRING = 19 // {0, 1, 4}
		PRINTER_NOTIFY_FIELD_CJOBS = 20 // {2, 4}
		PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 21 // {0, 2, 4}
		PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 22 // {1, 2, 4}
		PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 23 // {0..2, 4}
		PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 24 // {3, 4}
		PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 25 // {0, 3, 4}
		JOB_NOTIFY_FIELD_PRINTER_NAME = 0 // {}
		JOB_NOTIFY_FIELD_MACHINE_NAME = 1 // {0}
		JOB_NOTIFY_FIELD_PORT_NAME = 2 // {1}
		JOB_NOTIFY_FIELD_USER_NAME = 3 // {0, 1}
		JOB_NOTIFY_FIELD_NOTIFY_NAME = 4 // {2}
		JOB_NOTIFY_FIELD_DATATYPE = 5 // {0, 2}
		JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 6 // {1, 2}
		JOB_NOTIFY_FIELD_PARAMETERS = 7 // {0..2}
		JOB_NOTIFY_FIELD_DRIVER_NAME = 8 // {3}
		JOB_NOTIFY_FIELD_DEVMODE = 9 // {0, 3}
		JOB_NOTIFY_FIELD_STATUS = 10 // {1, 3}
		JOB_NOTIFY_FIELD_STATUS_STRING = 11 // {0, 1, 3}
		JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 12 // {2, 3}
		JOB_NOTIFY_FIELD_DOCUMENT = 13 // {0, 2, 3}
		JOB_NOTIFY_FIELD_PRIORITY = 14 // {1..3}
		JOB_NOTIFY_FIELD_POSITION = 15 // {0..3}
		JOB_NOTIFY_FIELD_SUBMITTED = 16 // {4}
		JOB_NOTIFY_FIELD_START_TIME = 17 // {0, 4}
		JOB_NOTIFY_FIELD_UNTIL_TIME = 18 // {1, 4}
		JOB_NOTIFY_FIELD_TIME = 19 // {0, 1, 4}
		JOB_NOTIFY_FIELD_TOTAL_PAGES = 20 // {2, 4}
		JOB_NOTIFY_FIELD_PAGES_PRINTED = 21 // {0, 2, 4}
		JOB_NOTIFY_FIELD_TOTAL_BYTES = 22 // {1, 2, 4}
		JOB_NOTIFY_FIELD_BYTES_PRINTED = 23 // {0..2, 4}
		PRINTER_NOTIFY_OPTIONS_REFRESH = 1 // {0}
		PRINTER_NOTIFY_INFO_DISCARDED = 1 // {0}
		PRINTER_CHANGE_ADD_PRINTER = {0}
		PRINTER_CHANGE_SET_PRINTER = {1}
		PRINTER_CHANGE_DELETE_PRINTER = {2}
		PRINTER_CHANGE_FAILED_CONNECTION_PRINTE = (* ... *){3}
		PRINTER_CHANGE_PRINTER = {0..7}
		PRINTER_CHANGE_ADD_JOB = {8}
		PRINTER_CHANGE_SET_JOB = {9}
		PRINTER_CHANGE_DELETE_JOB = {10}
		PRINTER_CHANGE_WRITE_JOB = {11}
		PRINTER_CHANGE_JOB = {8..15}
		PRINTER_CHANGE_ADD_FORM = {16}
		PRINTER_CHANGE_SET_FORM = {17}
		PRINTER_CHANGE_DELETE_FORM = {18}
		PRINTER_CHANGE_FORM = {16..18}
		PRINTER_CHANGE_ADD_PORT = {20}
		PRINTER_CHANGE_CONFIGURE_PORT = {21}
		PRINTER_CHANGE_DELETE_PORT = {22}
		PRINTER_CHANGE_PORT = {20..22}
		PRINTER_CHANGE_ADD_PRINT_PROCESSOR = {24}
		PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = {26}
		PRINTER_CHANGE_PRINT_PROCESSOR = {24..26}
		PRINTER_CHANGE_ADD_PRINTER_DRIVER = {28}
		PRINTER_CHANGE_SET_PRINTER_DRIVER = {29}
		PRINTER_CHANGE_DELETE_PRINTER_DRIVER = {30}
		PRINTER_CHANGE_PRINTER_DRIVER = {28..30}
		PRINTER_CHANGE_TIMEOUT = {31}
		PRINTER_CHANGE_ALL = {0..18, 20..22, 24..26, 28..30}
		PRINTER_ERROR_INFORMATION = 80000000h
		PRINTER_ERROR_WARNING = 1073741824 // {30}
		PRINTER_ERROR_SEVERE = 536870912 // {29}
		PRINTER_ERROR_OUTOFPAPER = 1 // {0}
		PRINTER_ERROR_JAM = 2 // {1}
		PRINTER_ERROR_OUTOFTONER = 4 // {2}
		SERVER_ACCESS_ADMINISTER = 1 // {0}
		SERVER_ACCESS_ENUMERATE = 2 // {1}
		PRINTER_ACCESS_ADMINISTER = 4 // {2}
		PRINTER_ACCESS_USE = 8 // {3}
		JOB_ACCESS_ADMINISTER = 16 // {4}
		SERVER_ALL_ACCESS = 983043 // {0, 1, 16..19}
		SERVER_READ = 131074 // {1, 17}
		SERVER_WRITE = 131075 // {0, 1, 17}
		SERVER_EXECUTE = 131074 // {1, 17}
		PRINTER_ALL_ACCESS = 983052 // {2, 3, 16..19}
		PRINTER_READ = 131080 // {3, 17}
		PRINTER_WRITE = 131080 // {3, 17}
		PRINTER_EXECUTE = 131080 // {3, 17}
		JOB_ALL_ACCESS = 983056 // {4, 16..19}
		JOB_READ = 131088 // {4, 17}
		JOB_WRITE = 131088 // {4, 17}
		JOB_EXECUTE = 131088 // {4, 17}
		SERVICES_ACTIVE_DATABASEW = "ServicesActive"
		SERVICES_FAILED_DATABASEW = "ServicesFailed"
		SERVICES_ACTIVE_DATABASEA = "ServicesActive"
		SERVICES_FAILED_DATABASEA = "ServicesFailed"
		SC_GROUP_IDENTIFIERW = 43 // {0, 1, 3, 5}
		SC_GROUP_IDENTIFIERA = 43 // {0, 1, 3, 5}
		SERVICES_ACTIVE_DATABASE = "ServicesActive"
		SERVICES_FAILED_DATABASE = "ServicesFailed"
		SC_GROUP_IDENTIFIER = 43 // {0, 1, 3, 5}
		SERVICE_NO_CHANGE = -1 // {0..31}
		SERVICE_ACTIVE = 1 // {0}
		SERVICE_INACTIVE = 2 // {1}
		SERVICE_STATE_ALL = 3 // {0, 1}
		SERVICE_CONTROL_STOP = 1 // {0}
		SERVICE_CONTROL_PAUSE = 2 // {1}
		SERVICE_CONTROL_CONTINUE = 3 // {0, 1}
		SERVICE_CONTROL_INTERROGATE = 4 // {2}
		SERVICE_CONTROL_SHUTDOWN = 5 // {0, 2}
		SERVICE_STOPPED = 1 // {0}
		SERVICE_START_PENDING = 2 // {1}
		SERVICE_STOP_PENDING = 3 // {0, 1}
		SERVICE_RUNNING = 4 // {2}
		SERVICE_CONTINUE_PENDING = 5 // {0, 2}
		SERVICE_PAUSE_PENDING = 6 // {1, 2}
		SERVICE_PAUSED = 7 // {0..2}
		SERVICE_ACCEPT_STOP = 1 // {0}
		SERVICE_ACCEPT_PAUSE_CONTINUE = 2 // {1}
		SERVICE_ACCEPT_SHUTDOWN = 4 // {2}
		SC_MANAGER_CONNECT = {0}
		SC_MANAGER_CREATE_SERVICE = {1}
		SC_MANAGER_ENUMERATE_SERVICE = {2}
		SC_MANAGER_LOCK = {3}
		SC_MANAGER_QUERY_LOCK_STATUS = {4}
		SC_MANAGER_MODIFY_BOOT_CONFIG = {5}
		SC_MANAGER_ALL_ACCESS = {0..5, 16..19}
		SERVICE_QUERY_CONFIG = {0}
		SERVICE_CHANGE_CONFIG = {1}
		SERVICE_QUERY_STATUS = {2}
		SERVICE_ENUMERATE_DEPENDENTS = {3}
		SERVICE_START = {4}
		SERVICE_STOP = 32 // {5}
		SERVICE_PAUSE_CONTINUE = {6}
		SERVICE_INTERROGATE = {7}
		SERVICE_USER_DEFINED_CONTROL = {8}
		SERVICE_ALL_ACCESS = {0..8, 16..19}
		DIALOPTION_BILLING = {6}
		DIALOPTION_QUIET = {7}
		DIALOPTION_DIALTONE = {8}
		MDMVOLFLAG_LOW = {0}
		MDMVOLFLAG_MEDIUM = {1}
		MDMVOLFLAG_HIGH = {2}
		MDMVOL_LOW = {}
		MDMVOL_MEDIUM = {0}
		MDMVOL_HIGH = {1}
		MDMSPKRFLAG_OFF = {0}
		MDMSPKRFLAG_DIAL = {1}
		MDMSPKRFLAG_ON = {2}
		MDMSPKRFLAG_CALLSETUP = {3}
		MDMSPKR_OFF = {}
		MDMSPKR_DIAL = {0}
		MDMSPKR_ON = {1}
		MDMSPKR_CALLSETUP = {0, 1}
		MDM_COMPRESSION = {0}
		MDM_ERROR_CONTROL = {1}
		MDM_FORCED_EC = {2}
		MDM_CELLULAR = {3}
		MDM_FLOWCONTROL_HARD = {4}
		MDM_FLOWCONTROL_SOFT = {5}
		MDM_CCITT_OVERRIDE = {6}
		MDM_SPEED_ADJUST = {7}
		MDM_TONE_DIAL = {8}
		MDM_BLIND_DIAL = {9}
		MDM_V23_OVERRIDE = {10}
	
	const  // enumerations
		SidTypeUser = 1
		SidTypeGroup = 2
		SidTypeDomain = 3
		SidTypeAlias = 4
		SidTypeWellKnownGroup = 5
		SidTypeDeletedAccount = 6
		SidTypeInvalid = 7
		SidTypeUnknown = 8
		AclRevisionInformation = 1
		AclSizeInformation = 2
		SecurityAnonymous = 0
		SecurityIdentification = 1
		SecurityImpersonation = 2
		SecurityDelegation = 3
		TokenPrimary = 1
		TokenImpersonation = 2
		TokenUser = 1
		TokenGroups = 2
		TokenPrivileges = 3
		TokenOwner = 4
		TokenPrimaryGroup = 5
		TokenDefaultDacl = 6
		TokenSource = 7
		TokenType = 8
		TokenImpersonationLevel = 9
		TokenStatistics = 10
		DriverType = 1
		FileSystemType = 2
		Win32ServiceOwnProcess = 16
		Win32ServiceShareProcess = 32
		AdapterType = 4
		RecognizerType = 8
		BootLoad = 0
		SystemLoad = 1
		AutoLoad = 2
		DemandLoad = 3
		DisableLoad = 4
		IgnoreError = 0
		NormalError = 1
		SevereError = 2
		CriticalError = 3
		GetFileExInfoStandard = 0
		GetFileExMaxInfoLevel = 1
		FindExInfoStandard = 0
		FindExInfoMaxInfoLevel = 1
		FindExSearchNameMatch = 0
		FindExSearchLimitToDirectories = 1
		FindExSearchLimitToDevices = 2
		FindExSearchMaxSearchOp = 3
	
	type 
		BOOL = integer
		HANDLE = PtrVoid
		LCID = integer
		LANGID = shortint
		USN = longint
		LUID = longint
		PtrLIST_ENTRY = unsafe pointer to LIST_ENTRY
		LIST_ENTRY = cstruct 
				Flink: PtrLIST_ENTRY
				Blink: PtrLIST_ENTRY 
			end 
		PtrSINGLE_LIST_ENTRY = unsafe pointer to SINGLE_LIST_ENTRY
		SINGLE_LIST_ENTRY = cstruct 
				Next: PtrSINGLE_LIST_ENTRY 
			end 
		OBJECTID = cstruct 
				Lineage: COM.GUID
				Uniquifier: integer 
			end 
		KSPIN_LOCK = integer
		FLOATING_SAVE_AREA = cstruct 
				ControlWord: integer
				StatusWord: integer
				TagWord: integer
				ErrorOffset: integer
				ErrorSelector: integer
				DataOffset: integer
				DataSelector: integer
				RegisterArea: carray 80 of char
				Cr0NpxState: integer 
			end 
		PtrFLOATING_SAVE_AREA = unsafe pointer to FLOATING_SAVE_AREA
		CONTEXT = cstruct 
				ContextFlags: set
				Dr0: integer
				Dr1: integer
				Dr2: integer
				Dr3: integer
				Dr6: integer
				Dr7: integer
				FloatSave: FLOATING_SAVE_AREA
				SegGs: integer
				SegFs: integer
				SegEs: integer
				SegDs: integer
				Edi: integer
				Esi: integer
				Ebx: integer
				Edx: integer
				Ecx: integer
				Eax: integer
				Ebp: integer
				Eip: integer
				SegCs: integer
				EFlags: integer
				Esp: integer
				SegSs: integer 
			end 
		PtrCONTEXT = unsafe pointer to CONTEXT
		LDT_ENTRY = cstruct 
				LimitLow: shortint
				BaseLow: shortint
				HighWord: cstruct 
						Bytes: cstruct 
								BaseMid: char
								Flags1: char
								Flags2: char
								BaseHi: char 
							end 
						Bits: cstruct 
								fBits0: set 
							// BaseMid*: LONGINT; (8 bits)
							// Type*: LONGINT; (5 bits)
							// Dpl*: LONGINT; (2 bits)
							// Pres*: LONGINT; (1 bits)
							// LimitHi*: LONGINT; (4 bits)
							// Sys*: LONGINT; (1 bits)
							// Reserved_0*: LONGINT; (1 bits)
							// Default_Big*: LONGINT; (1 bits)
							// Granularity*: LONGINT; (1 bits)
							// BaseHi*: LONGINT; (8 bits)
							end  
					end  
			end 
		PtrLDT_ENTRY = unsafe pointer to LDT_ENTRY
		PtrEXCEPTION_RECORD = unsafe pointer to EXCEPTION_RECORD
		EXCEPTION_RECORD = cstruct 
				ExceptionCode: integer
				ExceptionFlags: set
				ExceptionRecord: PtrEXCEPTION_RECORD
				ExceptionAddress: PtrVoid
				NumberParameters: integer
				ExceptionInformation: carray 15 of integer 
			end 
		EXCEPTION_POINTERS = cstruct 
				ExceptionRecord: PtrEXCEPTION_RECORD
				ContextRecord: PtrCONTEXT 
			end 
		PtrEXCEPTION_POINTERS = unsafe pointer to EXCEPTION_POINTERS
		_EXCEPTION_REGISTRATION_RECORD = cstruct (* i *)end 
		Ptr_EXCEPTION_REGISTRATION_RECORD = unsafe pointer to _EXCEPTION_REGISTRATION_RECORD
		PtrNT_TIB = unsafe pointer to NT_TIB
		NT_TIB = cstruct 
				ExceptionList: Ptr_EXCEPTION_REGISTRATION_RECORD
				StackBase: PtrVoid
				StackLimit: PtrVoid
				SubSystemTib: PtrVoid
				u: cstruct 
						FiberData: PtrVoid
						Version: integer 
					end 
				ArbitraryUserPointer: PtrVoid
				Self: PtrNT_TIB 
			end 
		QUOTA_LIMITS = cstruct 
				PagedPoolLimit: integer
				NonPagedPoolLimit: integer
				MinimumWorkingSetSize: integer
				MaximumWorkingSetSize: integer
				PagefileLimit: integer
				TimeLimit: longint 
			end 
		PtrQUOTA_LIMITS = unsafe pointer to QUOTA_LIMITS
		MEMORY_BASIC_INFORMATION = cstruct 
				BaseAddress: PtrVoid
				AllocationBase: PtrVoid
				AllocationProtect: integer
				RegionSize: integer
				State: integer
				Protect: integer
				Type: integer 
			end 
		PtrMEMORY_BASIC_INFORMATION = unsafe pointer to MEMORY_BASIC_INFORMATION
		FILE_NOTIFY_INFORMATION = cstruct 
				NextEntryOffset: integer
				Action: integer
				FileNameLength: integer
				FileName: carray 1 of wchar 
			end 
		PtrFILE_NOTIFY_INFORMATION = unsafe pointer to FILE_NOTIFY_INFORMATION
		PACCESS_TOKEN = PtrVoid
		PSECURITY_DESCRIPTOR = PtrVoid
		PSID = PtrVoid
		GENERIC_MAPPING = cstruct 
				GenericRead: ACCESS_MASK
				GenericWrite: ACCESS_MASK
				GenericExecute: ACCESS_MASK
				GenericAll: ACCESS_MASK 
			end 
		PtrGENERIC_MAPPING = unsafe pointer to GENERIC_MAPPING
		LUID_AND_ATTRIBUTES = cstruct 
				Luid: LUID
				Attributes: set 
			end 
		PtrLUID_AND_ATTRIBUTES = unsafe pointer to LUID_AND_ATTRIBUTES
		LUID_AND_ATTRIBUTES_ARRAY = carray 1 of LUID_AND_ATTRIBUTES
		PtrLUID_AND_ATTRIBUTES_ARRAY = unsafe pointer to LUID_AND_ATTRIBUTES_ARRAY
		SID_IDENTIFIER_AUTHORITY = cstruct 
				Value: carray 6 of char 
			end 
		PtrSID_IDENTIFIER_AUTHORITY = unsafe pointer to SID_IDENTIFIER_AUTHORITY
		SID = cstruct 
				Revision: char
				SubAuthorityCount: char
				IdentifierAuthority: SID_IDENTIFIER_AUTHORITY
				SubAuthority: carray 1 of integer 
			end 
		PtrSID = unsafe pointer to SID
		SID_NAME_USE = integer
		SID_AND_ATTRIBUTES = cstruct 
				Sid: PSID
				Attributes: set 
			end 
		PtrSID_AND_ATTRIBUTES = unsafe pointer to SID_AND_ATTRIBUTES
		SID_AND_ATTRIBUTES_ARRAY = carray 1 of SID_AND_ATTRIBUTES
		PtrSID_AND_ATTRIBUTES_ARRAY = unsafe pointer to SID_AND_ATTRIBUTES_ARRAY
		ACL = cstruct 
				AclRevision: char
				Sbz1: char
				AclSize: shortint
				AceCount: shortint
				Sbz2: shortint 
			end 
		PtrACL = unsafe pointer to ACL
		ACE_HEADER = cstruct 
				AceType: char
				AceFlags: char
				AceSize: shortint 
			end 
		PtrACE_HEADER = unsafe pointer to ACE_HEADER
		ACCESS_ALLOWED_ACE = cstruct 
				Header: ACE_HEADER
				Mask: ACCESS_MASK
				SidStart: integer 
			end 
		PtrACCESS_ALLOWED_ACE = unsafe pointer to ACCESS_ALLOWED_ACE
		ACCESS_DENIED_ACE = cstruct 
				Header: ACE_HEADER
				Mask: ACCESS_MASK
				SidStart: integer 
			end 
		PtrACCESS_DENIED_ACE = unsafe pointer to ACCESS_DENIED_ACE
		SYSTEM_AUDIT_ACE = cstruct 
				Header: ACE_HEADER
				Mask: ACCESS_MASK
				SidStart: integer 
			end 
		PtrSYSTEM_AUDIT_ACE = unsafe pointer to SYSTEM_AUDIT_ACE
		SYSTEM_ALARM_ACE = cstruct 
				Header: ACE_HEADER
				Mask: ACCESS_MASK
				SidStart: integer 
			end 
		PtrSYSTEM_ALARM_ACE = unsafe pointer to SYSTEM_ALARM_ACE
		COMPOUND_ACCESS_ALLOWED_ACE = cstruct 
				Header: ACE_HEADER
				Mask: ACCESS_MASK
				CompoundAceType: shortint
				Reserved: shortint
				SidStart: integer 
			end 
		PtrCOMPOUND_ACCESS_ALLOWED_ACE = unsafe pointer to COMPOUND_ACCESS_ALLOWED_ACE
		ACL_INFORMATION_CLASS = integer
		ACL_REVISION_INFORMATION = cstruct 
				AclRevision: integer 
			end 
		PtrACL_REVISION_INFORMATION = unsafe pointer to ACL_REVISION_INFORMATION
		ACL_SIZE_INFORMATION = cstruct 
				AceCount: integer
				AclBytesInUse: integer
				AclBytesFree: integer 
			end 
		PtrACL_SIZE_INFORMATION = unsafe pointer to ACL_SIZE_INFORMATION
		SECURITY_DESCRIPTOR_CONTROL = shortint
		SECURITY_DESCRIPTOR = cstruct 
				Revision: char
				Sbz1: char
				Control: SECURITY_DESCRIPTOR_CONTROL
				Owner: PSID
				Group: PSID
				Sacl: PtrACL
				Dacl: PtrACL 
			end 
		PtrSECURITY_DESCRIPTOR = unsafe pointer to SECURITY_DESCRIPTOR
		PRIVILEGE_SET = cstruct 
				PrivilegeCount: integer
				Control: integer
				Privilege: carray 1 of LUID_AND_ATTRIBUTES 
			end 
		PtrPRIVILEGE_SET = unsafe pointer to PRIVILEGE_SET
		SECURITY_IMPERSONATION_LEVEL = integer
		TOKEN_TYPE = integer
		TOKEN_INFORMATION_CLASS = integer
		TOKEN_USER = cstruct 
				User: SID_AND_ATTRIBUTES 
			end 
		PtrTOKEN_USER = unsafe pointer to TOKEN_USER
		TOKEN_GROUPS = cstruct 
				GroupCount: integer
				Groups: carray 1 of SID_AND_ATTRIBUTES 
			end 
		PtrTOKEN_GROUPS = unsafe pointer to TOKEN_GROUPS
		TOKEN_PRIVILEGES = cstruct 
				PrivilegeCount: integer
				Privileges: carray 1 of LUID_AND_ATTRIBUTES 
			end 
		PtrTOKEN_PRIVILEGES = unsafe pointer to TOKEN_PRIVILEGES
		TOKEN_OWNER = cstruct 
				Owner: PSID 
			end 
		PtrTOKEN_OWNER = unsafe pointer to TOKEN_OWNER
		TOKEN_PRIMARY_GROUP = cstruct 
				PrimaryGroup: PSID 
			end 
		PtrTOKEN_PRIMARY_GROUP = unsafe pointer to TOKEN_PRIMARY_GROUP
		TOKEN_DEFAULT_DACL = cstruct 
				DefaultDacl: PtrACL 
			end 
		PtrTOKEN_DEFAULT_DACL = unsafe pointer to TOKEN_DEFAULT_DACL
		TOKEN_SOURCE = cstruct 
				SourceName: carray 8 of char
				SourceIdentifier: LUID 
			end 
		PtrTOKEN_SOURCE = unsafe pointer to TOKEN_SOURCE
		TOKEN_STATISTICS = cstruct 
				TokenId: LUID
				AuthenticationId: LUID
				ExpirationTime: longint
				TokenType: TOKEN_TYPE
				ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL
				DynamicCharged: integer
				DynamicAvailable: integer
				GroupCount: integer
				PrivilegeCount: integer
				ModifiedId: LUID 
			end 
		PtrTOKEN_STATISTICS = unsafe pointer to TOKEN_STATISTICS
		TOKEN_CONTROL = cstruct 
				TokenId: LUID
				AuthenticationId: LUID
				ModifiedId: LUID
				TokenSource: TOKEN_SOURCE 
			end 
		PtrTOKEN_CONTROL = unsafe pointer to TOKEN_CONTROL
		SECURITY_CONTEXT_TRACKING_MODE = boolean
		SECURITY_QUALITY_OF_SERVICE = cstruct 
				Length: integer
				ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL
				ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE
				EffectiveOnly: boolean 
			end 
		PtrSECURITY_QUALITY_OF_SERVICE = unsafe pointer to SECURITY_QUALITY_OF_SERVICE
		SE_IMPERSONATION_STATE = cstruct 
				Token: PACCESS_TOKEN
				CopyOnOpen: boolean
				EffectiveOnly: boolean
				Level: SECURITY_IMPERSONATION_LEVEL 
			end 
		PtrSE_IMPERSONATION_STATE = unsafe pointer to SE_IMPERSONATION_STATE
		IMAGE_DOS_HEADER = cstruct 
				e_magic: shortint
				e_cblp: shortint
				e_cp: shortint
				e_crlc: shortint
				e_cparhdr: shortint
				e_minalloc: shortint
				e_maxalloc: shortint
				e_ss: shortint
				e_sp: shortint
				e_csum: shortint
				e_ip: shortint
				e_cs: shortint
				e_lfarlc: shortint
				e_ovno: shortint
				e_res: carray 4 of shortint
				e_oemid: shortint
				e_oeminfo: shortint
				e_res2: carray 10 of shortint
				e_lfanew: integer 
			end 
		PtrIMAGE_DOS_HEADER = unsafe pointer to IMAGE_DOS_HEADER
		IMAGE_OS2_HEADER = cstruct 
				ne_magic: shortint
				ne_ver: char
				ne_rev: char
				ne_enttab: shortint
				ne_cbenttab: shortint
				ne_crc: integer
				ne_flags: shortint
				ne_autodata: shortint
				ne_heap: shortint
				ne_stack: shortint
				ne_csip: integer
				ne_sssp: integer
				ne_cseg: shortint
				ne_cmod: shortint
				ne_cbnrestab: shortint
				ne_segtab: shortint
				ne_rsrctab: shortint
				ne_restab: shortint
				ne_modtab: shortint
				ne_imptab: shortint
				ne_nrestab: integer
				ne_cmovent: shortint
				ne_align: shortint
				ne_cres: shortint
				ne_exetyp: char
				ne_flagsothers: char
				ne_pretthunks: shortint
				ne_psegrefbytes: shortint
				ne_swaparea: shortint
				ne_expver: shortint 
			end 
		PtrIMAGE_OS2_HEADER = unsafe pointer to IMAGE_OS2_HEADER
		IMAGE_VXD_HEADER = cstruct 
				e32_magic: shortint
				e32_border: char
				e32_worder: char
				e32_level: integer
				e32_cpu: shortint
				e32_os: shortint
				e32_ver: integer
				e32_mflags: integer
				e32_mpages: integer
				e32_startobj: integer
				e32_eip: integer
				e32_stackobj: integer
				e32_esp: integer
				e32_pagesize: integer
				e32_lastpagesize: integer
				e32_fixupsize: integer
				e32_fixupsum: integer
				e32_ldrsize: integer
				e32_ldrsum: integer
				e32_objtab: integer
				e32_objcnt: integer
				e32_objmap: integer
				e32_itermap: integer
				e32_rsrctab: integer
				e32_rsrccnt: integer
				e32_restab: integer
				e32_enttab: integer
				e32_dirtab: integer
				e32_dircnt: integer
				e32_fpagetab: integer
				e32_frectab: integer
				e32_impmod: integer
				e32_impmodcnt: integer
				e32_impproc: integer
				e32_pagesum: integer
				e32_datapage: integer
				e32_preload: integer
				e32_nrestab: integer
				e32_cbnrestab: integer
				e32_nressum: integer
				e32_autodata: integer
				e32_debuginfo: integer
				e32_debuglen: integer
				e32_instpreload: integer
				e32_instdemand: integer
				e32_heapsize: integer
				e32_res3: carray 12 of char
				e32_winresoff: integer
				e32_winreslen: integer
				e32_devid: shortint
				e32_ddkver: shortint 
			end 
		PtrIMAGE_VXD_HEADER = unsafe pointer to IMAGE_VXD_HEADER
		IMAGE_FILE_HEADER = cstruct 
				Machine: shortint
				NumberOfSections: shortint
				TimeDateStamp: integer
				PointerToSymbolTable: integer
				NumberOfSymbols: integer
				SizeOfOptionalHeader: shortint
				Characteristics: shortint 
			end 
		PtrIMAGE_FILE_HEADER = unsafe pointer to IMAGE_FILE_HEADER
		IMAGE_DATA_DIRECTORY = cstruct 
				VirtualAddress: integer
				Size: integer 
			end 
		PtrIMAGE_DATA_DIRECTORY = unsafe pointer to IMAGE_DATA_DIRECTORY
		IMAGE_OPTIONAL_HEADER = cstruct 
				Magic: shortint
				MajorLinkerVersion: char
				MinorLinkerVersion: char
				SizeOfCode: integer
				SizeOfInitializedData: integer
				SizeOfUninitializedData: integer
				AddressOfEntryPoint: integer
				BaseOfCode: integer
				BaseOfData: integer
				ImageBase: integer
				SectionAlignment: integer
				FileAlignment: integer
				MajorOperatingSystemVersion: shortint
				MinorOperatingSystemVersion: shortint
				MajorImageVersion: shortint
				MinorImageVersion: shortint
				MajorSubsystemVersion: shortint
				MinorSubsystemVersion: shortint
				Reserved1: integer
				SizeOfImage: integer
				SizeOfHeaders: integer
				CheckSum: integer
				Subsystem: shortint
				DllCharacteristics: shortint
				SizeOfStackReserve: integer
				SizeOfStackCommit: integer
				SizeOfHeapReserve: integer
				SizeOfHeapCommit: integer
				LoaderFlags: integer
				NumberOfRvaAndSizes: integer
				DataDirectory: carray 16 of IMAGE_DATA_DIRECTORY 
			end 
		PtrIMAGE_OPTIONAL_HEADER = unsafe pointer to IMAGE_OPTIONAL_HEADER
		IMAGE_ROM_OPTIONAL_HEADER = cstruct 
				Magic: shortint
				MajorLinkerVersion: char
				MinorLinkerVersion: char
				SizeOfCode: integer
				SizeOfInitializedData: integer
				SizeOfUninitializedData: integer
				AddressOfEntryPoint: integer
				BaseOfCode: integer
				BaseOfData: integer
				BaseOfBss: integer
				GprMask: integer
				CprMask: carray 4 of integer
				GpValue: integer 
			end 
		PtrIMAGE_ROM_OPTIONAL_HEADER = unsafe pointer to IMAGE_ROM_OPTIONAL_HEADER
		IMAGE_NT_HEADERS = cstruct 
				Signature: integer
				FileHeader: IMAGE_FILE_HEADER
				OptionalHeader: IMAGE_OPTIONAL_HEADER 
			end 
		PtrIMAGE_NT_HEADERS = unsafe pointer to IMAGE_NT_HEADERS
		IMAGE_ROM_HEADERS = cstruct 
				FileHeader: IMAGE_FILE_HEADER
				OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER 
			end 
		PtrIMAGE_ROM_HEADERS = unsafe pointer to IMAGE_ROM_HEADERS
		IMAGE_SECTION_HEADER = cstruct 
				Name: carray 8 of char
				Misc: cstruct 
						PhysicalAddress: integer
						VirtualSize: integer 
					end 
				VirtualAddress: integer
				SizeOfRawData: integer
				PointerToRawData: integer
				PointerToRelocations: integer
				PointerToLinenumbers: integer
				NumberOfRelocations: shortint
				NumberOfLinenumbers: shortint
				Characteristics: integer 
			end 
		PtrIMAGE_SECTION_HEADER = unsafe pointer to IMAGE_SECTION_HEADER
		IMAGE_SYMBOL = cstruct 
				N: cstruct 
						ShortName: carray 8 of char
						Name: cstruct 
								Short: integer
								Long: integer 
							end 
						LongName: carray 2 of unsafe pointer to (* ? *)carray of char 
					end 
				Value: integer
				SectionNumber: shortint
				Type: shortint
				StorageClass: char
				NumberOfAuxSymbols: char 
			end 
		PtrIMAGE_SYMBOL = unsafe pointer to IMAGE_SYMBOL
		IMAGE_AUX_SYMBOL = cstruct 
				Sym: cstruct 
						TagIndex: integer
						Misc: cstruct 
								LnSz: cstruct 
										Linenumber: shortint
										Size: shortint 
									end 
								TotalSize: integer 
							end 
						FcnAry: cstruct 
								Function: cstruct 
										PointerToLinenumber: integer
										PointerToNextFunction: integer 
									end 
								Array: cstruct 
										Dimension: carray 4 of shortint 
									end  
							end 
						TvIndex: shortint 
					end 
				File: cstruct 
						Name: carray 18 of char 
					end 
				Section: cstruct 
						Length: integer
						NumberOfRelocations: shortint
						NumberOfLinenumbers: shortint
						CheckSum: integer
						Number: shortint
						Selection: char 
					end  
			end 
		PtrIMAGE_AUX_SYMBOL = unsafe pointer to IMAGE_AUX_SYMBOL
		IMAGE_RELOCATION = cstruct 
				u: cstruct 
						VirtualAddress: integer
						RelocCount: integer 
					end 
				SymbolTableIndex: integer
				Type: shortint 
			end 
		PtrIMAGE_RELOCATION = unsafe pointer to IMAGE_RELOCATION
		IMAGE_BASE_RELOCATION = cstruct 
				VirtualAddress: integer
				SizeOfBlock: integer 
			end 
		PtrIMAGE_BASE_RELOCATION = unsafe pointer to IMAGE_BASE_RELOCATION
		IMAGE_LINENUMBER = cstruct 
				Type: cstruct 
						SymbolTableIndex: integer
						VirtualAddress: integer 
					end 
				Linenumber: shortint 
			end 
		PtrIMAGE_LINENUMBER = unsafe pointer to IMAGE_LINENUMBER
		IMAGE_ARCHIVE_MEMBER_HEADER = cstruct 
				Name: carray 16 of char
				Date: carray 12 of char
				UserID: carray 6 of char
				GroupID: carray 6 of char
				Mode: carray 8 of char
				Size: carray 10 of char
				EndHeader: carray 2 of char 
			end 
		PtrIMAGE_ARCHIVE_MEMBER_HEADER = unsafe pointer to IMAGE_ARCHIVE_MEMBER_HEADER
		IMAGE_EXPORT_DIRECTORY = cstruct 
				Characteristics: integer
				TimeDateStamp: integer
				MajorVersion: shortint
				MinorVersion: shortint
				Name: integer
				Base: integer
				NumberOfFunctions: integer
				NumberOfNames: integer
				AddressOfFunctions: unsafe pointer to (* ? *)carray of unsafe pointer to (* ? *)carray of integer
				AddressOfNames: unsafe pointer to (* ? *)carray of unsafe pointer to (* ? *)carray of integer
				AddressOfNameOrdinals: unsafe pointer to (* ? *)carray of unsafe pointer to (* ? *)carray of shortint 
			end 
		PtrIMAGE_EXPORT_DIRECTORY = unsafe pointer to IMAGE_EXPORT_DIRECTORY
		IMAGE_IMPORT_BY_NAME = cstruct 
				Hint: shortint
				Name: carray 1 of char 
			end 
		PtrIMAGE_IMPORT_BY_NAME = unsafe pointer to IMAGE_IMPORT_BY_NAME
		IMAGE_THUNK_DATA = cstruct 
				u1: cstruct 
						ForwarderString: unsafe pointer to (* ? *)carray of char
						Function: unsafe pointer to (* ? *)carray of integer
						Ordinal: integer
						AddressOfData: PtrIMAGE_IMPORT_BY_NAME 
					end  
			end 
		PtrIMAGE_THUNK_DATA = unsafe pointer to IMAGE_THUNK_DATA
		IMAGE_IMPORT_DESCRIPTOR = cstruct 
				u: cstruct 
						Characteristics: integer
						OriginalFirstThunk: PtrIMAGE_THUNK_DATA 
					end 
				TimeDateStamp: integer
				ForwarderChain: integer
				Name: integer
				FirstThunk: PtrIMAGE_THUNK_DATA 
			end 
		PtrIMAGE_IMPORT_DESCRIPTOR = unsafe pointer to IMAGE_IMPORT_DESCRIPTOR
		IMAGE_BOUND_IMPORT_DESCRIPTOR = cstruct 
				TimeDateStamp: integer
				OffsetModuleName: shortint
				NumberOfModuleForwarderRefs: shortint 
			end 
		PtrIMAGE_BOUND_IMPORT_DESCRIPTOR = unsafe pointer to IMAGE_BOUND_IMPORT_DESCRIPTOR
		IMAGE_BOUND_FORWARDER_REF = cstruct 
				TimeDateStamp: integer
				OffsetModuleName: shortint
				Reserved: shortint 
			end 
		PtrIMAGE_BOUND_FORWARDER_REF = unsafe pointer to IMAGE_BOUND_FORWARDER_REF
		IMAGE_TLS_CALLBACK = proc (DllHandle: PtrVoid; Reason: integer; Reserved: PtrVoid)
		IMAGE_TLS_DIRECTORY = cstruct 
				StartAddressOfRawData: integer
				EndAddressOfRawData: integer
				AddressOfIndex: unsafe pointer to (* ? *)carray of integer
				AddressOfCallBacks: unsafe pointer to (* ? *)carray of IMAGE_TLS_CALLBACK
				SizeOfZeroFill: integer
				Characteristics: integer 
			end 
		PtrIMAGE_TLS_DIRECTORY = unsafe pointer to IMAGE_TLS_DIRECTORY
		IMAGE_RESOURCE_DIRECTORY = cstruct 
				Characteristics: integer
				TimeDateStamp: integer
				MajorVersion: shortint
				MinorVersion: shortint
				NumberOfNamedEntries: shortint
				NumberOfIdEntries: shortint 
			end 
		PtrIMAGE_RESOURCE_DIRECTORY = unsafe pointer to IMAGE_RESOURCE_DIRECTORY
		IMAGE_RESOURCE_DIRECTORY_ENTRY = cstruct 
				u: cstruct 
						r: cstruct 
								fBits0: set 
							// NameOffset*: LONGINT; (31 bits)
							// NameIsString*: LONGINT; (1 bits)
							end 
						Name: integer
						Id: shortint 
					end 
				u1: cstruct 
						OffsetToData: integer
						r: cstruct 
								fBits0: set 
							// OffsetToDirectory*: LONGINT; (31 bits)
							// DataIsDirectory*: LONGINT; (1 bits)
							end  
					end  
			end 
		PtrIMAGE_RESOURCE_DIRECTORY_ENTRY = unsafe pointer to IMAGE_RESOURCE_DIRECTORY_ENTRY
		IMAGE_RESOURCE_DIRECTORY_STRING = cstruct 
				Length: shortint
				NameString: carray 1 of char 
			end 
		PtrIMAGE_RESOURCE_DIRECTORY_STRING = unsafe pointer to IMAGE_RESOURCE_DIRECTORY_STRING
		IMAGE_RESOURCE_DIR_STRING_U = cstruct 
				Length: shortint
				NameString: carray 1 of wchar 
			end 
		PtrIMAGE_RESOURCE_DIR_STRING_U = unsafe pointer to IMAGE_RESOURCE_DIR_STRING_U
		IMAGE_RESOURCE_DATA_ENTRY = cstruct 
				OffsetToData: integer
				Size: integer
				CodePage: integer
				Reserved: integer 
			end 
		PtrIMAGE_RESOURCE_DATA_ENTRY = unsafe pointer to IMAGE_RESOURCE_DATA_ENTRY
		IMAGE_LOAD_CONFIG_DIRECTORY = cstruct 
				Characteristics: integer
				TimeDateStamp: integer
				MajorVersion: shortint
				MinorVersion: shortint
				GlobalFlagsClear: integer
				GlobalFlagsSet: integer
				CriticalSectionDefaultTimeout: integer
				DeCommitFreeBlockThreshold: integer
				DeCommitTotalFreeThreshold: integer
				LockPrefixTable: PtrVoid
				MaximumAllocationSize: integer
				VirtualMemoryThreshold: integer
				ProcessHeapFlags: integer
				Reserved: carray 4 of integer 
			end 
		PtrIMAGE_LOAD_CONFIG_DIRECTORY = unsafe pointer to IMAGE_LOAD_CONFIG_DIRECTORY
		IMAGE_RUNTIME_FUNCTION_ENTRY = cstruct 
				BeginAddress: integer
				EndAddress: integer
				ExceptionHandler: PtrVoid
				HandlerData: PtrVoid
				PrologEndAddress: integer 
			end 
		PtrIMAGE_RUNTIME_FUNCTION_ENTRY = unsafe pointer to IMAGE_RUNTIME_FUNCTION_ENTRY
		IMAGE_DEBUG_DIRECTORY = cstruct 
				Characteristics: integer
				TimeDateStamp: integer
				MajorVersion: shortint
				MinorVersion: shortint
				Type: integer
				SizeOfData: integer
				AddressOfRawData: integer
				PointerToRawData: integer 
			end 
		PtrIMAGE_DEBUG_DIRECTORY = unsafe pointer to IMAGE_DEBUG_DIRECTORY
		IMAGE_COFF_SYMBOLS_HEADER = cstruct 
				NumberOfSymbols: integer
				LvaToFirstSymbol: integer
				NumberOfLinenumbers: integer
				LvaToFirstLinenumber: integer
				RvaToFirstByteOfCode: integer
				RvaToLastByteOfCode: integer
				RvaToFirstByteOfData: integer
				RvaToLastByteOfData: integer 
			end 
		PtrIMAGE_COFF_SYMBOLS_HEADER = unsafe pointer to IMAGE_COFF_SYMBOLS_HEADER
		FPO_DATA = cstruct 
				ulOffStart: integer
				cbProcSize: integer
				cdwLocals: integer
				cdwParams: shortint
				fBits0: shortint 
			// cbProlog*: INTEGER; (8 bits)
			// cbRegs*: INTEGER; (3 bits)
			// fHasSEH*: INTEGER; (1 bits)
			// fUseBP*: INTEGER; (1 bits)
			// reserved*: INTEGER; (1 bits)
			// cbFrame*: INTEGER; (2 bits)
			end 
		PtrFPO_DATA = unsafe pointer to FPO_DATA
		IMAGE_DEBUG_MISC = cstruct 
				DataType: integer
				Length: integer
				Unicode: boolean
				Reserved: carray 3 of char
				Data: carray 1 of char 
			end 
		PtrIMAGE_DEBUG_MISC = unsafe pointer to IMAGE_DEBUG_MISC
		IMAGE_FUNCTION_ENTRY = cstruct 
				StartingAddress: integer
				EndingAddress: integer
				EndOfPrologue: integer 
			end 
		PtrIMAGE_FUNCTION_ENTRY = unsafe pointer to IMAGE_FUNCTION_ENTRY
		IMAGE_SEPARATE_DEBUG_HEADER = cstruct 
				Signature: shortint
				Flags: shortint
				Machine: shortint
				Characteristics: shortint
				TimeDateStamp: integer
				CheckSum: integer
				ImageBase: integer
				SizeOfImage: integer
				NumberOfSections: integer
				ExportedNamesSize: integer
				DebugDirectorySize: integer
				Reserved: carray 3 of integer 
			end 
		PtrIMAGE_SEPARATE_DEBUG_HEADER = unsafe pointer to IMAGE_SEPARATE_DEBUG_HEADER
		MESSAGE_RESOURCE_ENTRY = cstruct 
				Length: shortint
				Flags: shortint
				Text: carray 1 of char 
			end 
		PtrMESSAGE_RESOURCE_ENTRY = unsafe pointer to MESSAGE_RESOURCE_ENTRY
		MESSAGE_RESOURCE_BLOCK = cstruct 
				LowId: integer
				HighId: integer
				OffsetToEntries: integer 
			end 
		PtrMESSAGE_RESOURCE_BLOCK = unsafe pointer to MESSAGE_RESOURCE_BLOCK
		MESSAGE_RESOURCE_DATA = cstruct 
				NumberOfBlocks: integer
				Blocks: carray 1 of MESSAGE_RESOURCE_BLOCK 
			end 
		PtrMESSAGE_RESOURCE_DATA = unsafe pointer to MESSAGE_RESOURCE_DATA
		PtrRTL_CRITICAL_SECTION = unsafe pointer to RTL_CRITICAL_SECTION
		RTL_CRITICAL_SECTION_DEBUG = cstruct 
				Type: shortint
				CreatorBackTraceIndex: shortint
				CriticalSection: PtrRTL_CRITICAL_SECTION
				ProcessLocksList: LIST_ENTRY
				EntryCount: integer
				ContentionCount: integer
				Spare: carray 2 of integer 
			end 
		PtrRTL_CRITICAL_SECTION_DEBUG = unsafe pointer to RTL_CRITICAL_SECTION_DEBUG
		RTL_CRITICAL_SECTION = cstruct 
				DebugInfo: PtrRTL_CRITICAL_SECTION_DEBUG
				LockCount: integer
				RecursionCount: integer
				OwningThread: HANDLE
				LockSemaphore: HANDLE
				Reserved: integer 
			end 
		EVENTLOGRECORD = cstruct 
				Length: integer
				Reserved: integer
				RecordNumber: integer
				TimeGenerated: integer
				TimeWritten: integer
				EventID: integer
				EventType: shortint
				NumStrings: shortint
				EventCategory: shortint
				ReservedFlags: shortint
				ClosingRecordNumber: integer
				StringOffset: integer
				UserSidLength: integer
				UserSidOffset: integer
				DataLength: integer
				DataOffset: integer 
			end 
		PtrEVENTLOGRECORD = unsafe pointer to EVENTLOGRECORD
		SERVICE_NODE_TYPE = integer
		SERVICE_LOAD_TYPE = integer
		SERVICE_ERROR_TYPE = integer
		TAPE_ERASE = cstruct 
				Type: integer
				Immediate: boolean 
			end 
		PtrTAPE_ERASE = unsafe pointer to TAPE_ERASE
		TAPE_PREPARE = cstruct 
				Operation: integer
				Immediate: boolean 
			end 
		PtrTAPE_PREPARE = unsafe pointer to TAPE_PREPARE
		TAPE_WRITE_MARKS = cstruct 
				Type: integer
				Count: integer
				Immediate: boolean 
			end 
		PtrTAPE_WRITE_MARKS = unsafe pointer to TAPE_WRITE_MARKS
		TAPE_GET_POSITION = cstruct 
				Type: integer
				Partition: integer
				Offset: longint 
			end 
		PtrTAPE_GET_POSITION = unsafe pointer to TAPE_GET_POSITION
		TAPE_SET_POSITION = cstruct 
				Method: integer
				Partition: integer
				Offset: longint
				Immediate: boolean 
			end 
		PtrTAPE_SET_POSITION = unsafe pointer to TAPE_SET_POSITION
		TAPE_GET_DRIVE_PARAMETERS = cstruct 
				ECC: boolean
				Compression: boolean
				DataPadding: boolean
				ReportSetmarks: boolean
				DefaultBlockSize: integer
				MaximumBlockSize: integer
				MinimumBlockSize: integer
				MaximumPartitionCount: integer
				FeaturesLow: set
				FeaturesHigh: set
				EOTWarningZoneSize: integer 
			end 
		PtrTAPE_GET_DRIVE_PARAMETERS = unsafe pointer to TAPE_GET_DRIVE_PARAMETERS
		TAPE_SET_DRIVE_PARAMETERS = cstruct 
				ECC: boolean
				Compression: boolean
				DataPadding: boolean
				ReportSetmarks: boolean
				EOTWarningZoneSize: integer 
			end 
		PtrTAPE_SET_DRIVE_PARAMETERS = unsafe pointer to TAPE_SET_DRIVE_PARAMETERS
		TAPE_GET_MEDIA_PARAMETERS = cstruct 
				Capacity: longint
				Remaining: longint
				BlockSize: integer
				PartitionCount: integer
				WriteProtected: boolean 
			end 
		PtrTAPE_GET_MEDIA_PARAMETERS = unsafe pointer to TAPE_GET_MEDIA_PARAMETERS
		TAPE_SET_MEDIA_PARAMETERS = cstruct 
				BlockSize: integer 
			end 
		PtrTAPE_SET_MEDIA_PARAMETERS = unsafe pointer to TAPE_SET_MEDIA_PARAMETERS
		TAPE_CREATE_PARTITION = cstruct 
				Method: integer
				Count: integer
				Size: integer 
			end 
		PtrTAPE_CREATE_PARTITION = unsafe pointer to TAPE_CREATE_PARTITION
		WPARAM = integer
		LPARAM = integer
		LRESULT = integer
		HWND = HANDLE
		HHOOK = HANDLE
		ATOM = shortint
		HGLOBAL = HANDLE
		HLOCAL = HANDLE
		GLOBALHANDLE = HANDLE
		LOCALHANDLE = HANDLE
		FARPROC = proc (): integer
		NEARPROC = proc (): integer
		ROC = proc (): integer
		HGDIOBJ = HANDLE
		HACCEL = HANDLE
		HBITMAP = HANDLE
		HBRUSH = HANDLE
		HCOLORSPACE = HANDLE
		HDC = HANDLE
		HGLRC = HANDLE
		HDESK = HANDLE
		HENHMETAFILE = HANDLE
		HMETAFILEPICT = HANDLE
		HFONT = HANDLE
		HICON = HANDLE
		HMENU = HANDLE
		HMETAFILE = HANDLE
		HINSTANCE = HANDLE
		HMODULE = HINSTANCE
		HPALETTE = HANDLE
		HPEN = HANDLE
		HRGN = HANDLE
		HRSRC = HANDLE
		HSTR = HANDLE
		HTASK = HANDLE
		HWINSTA = HANDLE
		HKL = HANDLE
		HFILE = integer
		HCURSOR = HICON
		COLORREF = integer
		RECT = cstruct 
				left: integer
				top: integer
				right: integer
				bottom: integer 
			end 
		PtrRECT = unsafe pointer to RECT
		_RECTL = cstruct 
				left: integer
				top: integer
				right: integer
				bottom: integer 
			end 
		POINT = cstruct 
				x: integer
				y: integer 
			end 
		PtrPOINT = unsafe pointer to POINT
		_POINTL = cstruct 
				x: integer
				y: integer 
			end 
		SIZE = cstruct 
				cx: integer
				cy: integer 
			end 
		PtrSIZE = unsafe pointer to SIZE
		POINTS = cstruct 
				x: shortint
				y: shortint 
			end 
		PtrPOINTS = unsafe pointer to POINTS
		OVERLAPPED = cstruct 
				Internal: integer
				InternalHigh: integer
				Offset: integer
				OffsetHigh: integer
				hEvent: HANDLE 
			end 
		PtrOVERLAPPED = unsafe pointer to OVERLAPPED
		SECURITY_ATTRIBUTES = cstruct 
				nLength: integer
				lpSecurityDescriptor: PtrVoid
				bInheritHandle: BOOL 
			end 
		PtrSECURITY_ATTRIBUTES = unsafe pointer to SECURITY_ATTRIBUTES
		PROCESS_INFORMATION = cstruct 
				hProcess: HANDLE
				hThread: HANDLE
				dwProcessId: integer
				dwThreadId: integer 
			end 
		PtrPROCESS_INFORMATION = unsafe pointer to PROCESS_INFORMATION
		FILETIME = cstruct 
				dwLowDateTime: integer
				dwHighDateTime: integer 
			end 
		PtrFILETIME = unsafe pointer to FILETIME
		SYSTEMTIME = cstruct 
				wYear: shortint
				wMonth: shortint
				wDayOfWeek: shortint
				wDay: shortint
				wHour: shortint
				wMinute: shortint
				wSecond: shortint
				wMilliseconds: shortint 
			end 
		PtrSYSTEMTIME = unsafe pointer to SYSTEMTIME
		THREAD_START_ROUTINE = proc (lpThreadParameter: PtrVoid): integer
		FIBER_START_ROUTINE = proc (lpFiberParameter: PtrVoid)
		CRITICAL_SECTION = RTL_CRITICAL_SECTION
		PtrCRITICAL_SECTION = PtrRTL_CRITICAL_SECTION
		CRITICAL_SECTION_DEBUG = RTL_CRITICAL_SECTION_DEBUG
		PtrCRITICAL_SECTION_DEBUG = PtrRTL_CRITICAL_SECTION_DEBUG
		COMMPROP = cstruct 
				wPacketLength: shortint
				wPacketVersion: shortint
				dwServiceMask: integer
				dwReserved1: integer
				dwMaxTxQueue: integer
				dwMaxRxQueue: integer
				dwMaxBaud: set
				dwProvSubType: integer
				dwProvCapabilities: set
				dwSettableParams: set
				dwSettableBaud: set
				wSettableData: shortint
				wSettableStopParity: shortint
				dwCurrentTxQueue: integer
				dwCurrentRxQueue: integer
				dwProvSpec1: integer
				dwProvSpec2: integer
				wcProvChar: carray 1 of wchar 
			end 
		PtrCOMMPROP = unsafe pointer to COMMPROP
		COMSTAT = cstruct 
				fBits0: set
				// fCtsHold*: LONGINT; (1 bits)
				// fDsrHold*: LONGINT; (1 bits)
				// fRlsdHold*: LONGINT; (1 bits)
				// fXoffHold*: LONGINT; (1 bits)
				// fXoffSent*: LONGINT; (1 bits)
				// fEof*: LONGINT; (1 bits)
				// fTxim*: LONGINT; (1 bits)
				// fReserved*: LONGINT; (25 bits)
				cbInQue: integer
				cbOutQue: integer 
			end 
		PtrCOMSTAT = unsafe pointer to COMSTAT
		DCB = cstruct 
				DCBlength: integer
				BaudRate: integer
				fBits0: set
				// fBinary*: LONGINT; (1 bits)
				// fParity*: LONGINT; (1 bits)
				// fOutxCtsFlow*: LONGINT; (1 bits)
				// fOutxDsrFlow*: LONGINT; (1 bits)
				// fDtrControl*: LONGINT; (2 bits)
				// fDsrSensitivity*: LONGINT; (1 bits)
				// fTXContinueOnXoff*: LONGINT; (1 bits)
				// fOutX*: LONGINT; (1 bits)
				// fInX*: LONGINT; (1 bits)
				// fErrorChar*: LONGINT; (1 bits)
				// fNull*: LONGINT; (1 bits)
				// fRtsControl*: LONGINT; (2 bits)
				// fAbortOnError*: LONGINT; (1 bits)
				// fDummy2*: LONGINT; (17 bits)
				wReserved: shortint
				XonLim: shortint
				XoffLim: shortint
				ByteSize: char
				Parity: char
				StopBits: char
				XonChar: char
				XoffChar: char
				ErrorChar: char
				EofChar: char
				EvtChar: char
				wReserved1: shortint 
			end 
		PtrDCB = unsafe pointer to DCB
		COMMTIMEOUTS = cstruct 
				ReadIntervalTimeout: integer
				ReadTotalTimeoutMultiplier: integer
				ReadTotalTimeoutConstant: integer
				WriteTotalTimeoutMultiplier: integer
				WriteTotalTimeoutConstant: integer 
			end 
		PtrCOMMTIMEOUTS = unsafe pointer to COMMTIMEOUTS
		COMMCONFIG = cstruct 
				dwSize: integer
				wVersion: shortint
				wReserved: shortint
				dcb: DCB
				dwProviderSubType: integer
				dwProviderOffset: integer
				dwProviderSize: integer
				wcProviderData: carray 1 of wchar 
			end 
		PtrCOMMCONFIG = unsafe pointer to COMMCONFIG
		SYSTEM_INFO = cstruct 
				u: cstruct 
						dwOemId: integer
						r: cstruct 
								wProcessorArchitecture: shortint
								wReserved: shortint 
							end  
					end 
				dwPageSize: integer
				lpMinimumApplicationAddress: PtrVoid
				lpMaximumApplicationAddress: PtrVoid
				dwActiveProcessorMask: integer
				dwNumberOfProcessors: integer
				dwProcessorType: integer
				dwAllocationGranularity: integer
				wProcessorLevel: shortint
				wProcessorRevision: shortint 
			end 
		PtrSYSTEM_INFO = unsafe pointer to SYSTEM_INFO
		MEMORYSTATUS = cstruct 
				dwLength: integer
				dwMemoryLoad: integer
				dwTotalPhys: integer
				dwAvailPhys: integer
				dwTotalPageFile: integer
				dwAvailPageFile: integer
				dwTotalVirtual: integer
				dwAvailVirtual: integer 
			end 
		PtrMEMORYSTATUS = unsafe pointer to MEMORYSTATUS
		EXCEPTION_DEBUG_INFO = cstruct 
				ExceptionRecord: EXCEPTION_RECORD
				dwFirstChance: integer 
			end 
		PtrEXCEPTION_DEBUG_INFO = unsafe pointer to EXCEPTION_DEBUG_INFO
		CREATE_THREAD_DEBUG_INFO = cstruct 
				hThread: HANDLE
				lpThreadLocalBase: PtrVoid
				lpStartAddress: THREAD_START_ROUTINE 
			end 
		PtrCREATE_THREAD_DEBUG_INFO = unsafe pointer to CREATE_THREAD_DEBUG_INFO
		CREATE_PROCESS_DEBUG_INFO = cstruct 
				hFile: HANDLE
				hProcess: HANDLE
				hThread: HANDLE
				lpBaseOfImage: PtrVoid
				dwDebugInfoFileOffset: integer
				nDebugInfoSize: integer
				lpThreadLocalBase: PtrVoid
				lpStartAddress: THREAD_START_ROUTINE
				lpImageName: PtrVoid
				fUnicode: shortint 
			end 
		PtrCREATE_PROCESS_DEBUG_INFO = unsafe pointer to CREATE_PROCESS_DEBUG_INFO
		EXIT_THREAD_DEBUG_INFO = cstruct 
				dwExitCode: integer 
			end 
		PtrEXIT_THREAD_DEBUG_INFO = unsafe pointer to EXIT_THREAD_DEBUG_INFO
		EXIT_PROCESS_DEBUG_INFO = cstruct 
				dwExitCode: integer 
			end 
		PtrEXIT_PROCESS_DEBUG_INFO = unsafe pointer to EXIT_PROCESS_DEBUG_INFO
		LOAD_DLL_DEBUG_INFO = cstruct 
				hFile: HANDLE
				lpBaseOfDll: PtrVoid
				dwDebugInfoFileOffset: integer
				nDebugInfoSize: integer
				lpImageName: PtrVoid
				fUnicode: shortint 
			end 
		PtrLOAD_DLL_DEBUG_INFO = unsafe pointer to LOAD_DLL_DEBUG_INFO
		UNLOAD_DLL_DEBUG_INFO = cstruct 
				lpBaseOfDll: PtrVoid 
			end 
		PtrUNLOAD_DLL_DEBUG_INFO = unsafe pointer to UNLOAD_DLL_DEBUG_INFO
		OUTPUT_DEBUG_STRING_INFO = cstruct 
				lpDebugStringData: PtrSTR
				fUnicode: shortint
				nDebugStringLength: shortint 
			end 
		PtrOUTPUT_DEBUG_STRING_INFO = unsafe pointer to OUTPUT_DEBUG_STRING_INFO
		RIP_INFO = cstruct 
				dwError: integer
				dwType: integer 
			end 
		PtrRIP_INFO = unsafe pointer to RIP_INFO
		DEBUG_EVENT = cstruct 
				dwDebugEventCode: integer
				dwProcessId: integer
				dwThreadId: integer
				u: cstruct 
						Exception: EXCEPTION_DEBUG_INFO
						CreateThread: CREATE_THREAD_DEBUG_INFO
						CreateProcessInfo: CREATE_PROCESS_DEBUG_INFO
						ExitThread: EXIT_THREAD_DEBUG_INFO
						ExitProcess: EXIT_PROCESS_DEBUG_INFO
						LoadDll: LOAD_DLL_DEBUG_INFO
						UnloadDll: UNLOAD_DLL_DEBUG_INFO
						DebugString: OUTPUT_DEBUG_STRING_INFO
						RipInfo: RIP_INFO 
					end  
			end 
		PtrDEBUG_EVENT = unsafe pointer to DEBUG_EVENT
		OFSTRUCT = cstruct 
				cBytes: char
				fFixedDisk: char
				nErrCode: shortint
				Reserved1: shortint
				Reserved2: shortint
				szPathName: carray 128 of char 
			end 
		PtrOFSTRUCT = unsafe pointer to OFSTRUCT
		PROCESS_HEAP_ENTRY = cstruct 
				lpData: PtrVoid
				cbData: integer
				cbOverhead: char
				iRegionIndex: char
				wFlags: shortint
				u: cstruct 
						Block: cstruct 
								hMem: HANDLE
								dwReserved: carray 3 of integer 
							end 
						Region: cstruct 
								dwCommittedSize: integer
								dwUnCommittedSize: integer
								lpFirstBlock: PtrVoid
								lpLastBlock: PtrVoid 
							end  
					end  
			end 
		PtrPROCESS_HEAP_ENTRY = unsafe pointer to PROCESS_HEAP_ENTRY
		TOP_LEVEL_EXCEPTION_FILTER = proc (var ExceptionInfo: EXCEPTION_POINTERS): integer
		APCFUNC = proc (dwParam: integer)
		BY_HANDLE_FILE_INFORMATION = cstruct 
				dwFileAttributes: set
				ftCreationTime: FILETIME
				ftLastAccessTime: FILETIME
				ftLastWriteTime: FILETIME
				dwVolumeSerialNumber: integer
				nFileSizeHigh: integer
				nFileSizeLow: integer
				nNumberOfLinks: integer
				nFileIndexHigh: integer
				nFileIndexLow: integer 
			end 
		PtrBY_HANDLE_FILE_INFORMATION = unsafe pointer to BY_HANDLE_FILE_INFORMATION
		TIME_ZONE_INFORMATION = cstruct 
				Bias: integer
				StandardName: carray 32 of wchar
				StandardDate: SYSTEMTIME
				StandardBias: integer
				DaylightName: carray 32 of wchar
				DaylightDate: SYSTEMTIME
				DaylightBias: integer 
			end 
		PtrTIME_ZONE_INFORMATION = unsafe pointer to TIME_ZONE_INFORMATION
		OVERLAPPED_COMPLETION_ROUTINE = proc (dwErrorCode: integer; dwNumberOfBytesTransfered: integer; var lpOverlapped: OVERLAPPED)
		WIN32_STREAM_ID = cstruct 
				dwStreamId: integer
				dwStreamAttributes: set
				Size: longint
				dwStreamNameSize: integer
				cStreamName: carray 1 of wchar 
			end 
		PtrWIN32_STREAM_ID = unsafe pointer to WIN32_STREAM_ID
		STARTUPINFOA = cstruct 
				cb: integer
				lpReserved: PtrSTR
				lpDesktop: PtrSTR
				lpTitle: PtrSTR
				dwX: integer
				dwY: integer
				dwXSize: integer
				dwYSize: integer
				dwXCountChars: integer
				dwYCountChars: integer
				dwFillAttribute: integer
				dwFlags: set
				wShowWindow: shortint
				cbReserved2: shortint
				lpReserved2: unsafe pointer to (* ? *)carray of char
				hStdInput: HANDLE
				hStdOutput: HANDLE
				hStdError: HANDLE 
			end 
		PtrSTARTUPINFOA = unsafe pointer to STARTUPINFOA
		STARTUPINFOW = cstruct 
				cb: integer
				lpReserved: PtrWSTR
				lpDesktop: PtrWSTR
				lpTitle: PtrWSTR
				dwX: integer
				dwY: integer
				dwXSize: integer
				dwYSize: integer
				dwXCountChars: integer
				dwYCountChars: integer
				dwFillAttribute: integer
				dwFlags: set
				wShowWindow: shortint
				cbReserved2: shortint
				lpReserved2: unsafe pointer to (* ? *)carray of char
				hStdInput: HANDLE
				hStdOutput: HANDLE
				hStdError: HANDLE 
			end 
		PtrSTARTUPINFOW = unsafe pointer to STARTUPINFOW
		STARTUPINFO = STARTUPINFOA
		PtrSTARTUPINFO = PtrSTARTUPINFOA
		WIN32_FIND_DATAA = cstruct 
				dwFileAttributes: set
				ftCreationTime: FILETIME
				ftLastAccessTime: FILETIME
				ftLastWriteTime: FILETIME
				nFileSizeHigh: integer
				nFileSizeLow: integer
				dwReserved0: integer
				dwReserved1: integer
				cFileName: carray 260 of char
				cAlternateFileName: carray 14 of char 
			end 
		PtrWIN32_FIND_DATAA = unsafe pointer to WIN32_FIND_DATAA
		WIN32_FIND_DATAW = cstruct 
				dwFileAttributes: set
				ftCreationTime: FILETIME
				ftLastAccessTime: FILETIME
				ftLastWriteTime: FILETIME
				nFileSizeHigh: integer
				nFileSizeLow: integer
				dwReserved0: integer
				dwReserved1: integer
				cFileName: carray 260 of wchar
				cAlternateFileName: carray 14 of wchar 
			end 
		PtrWIN32_FIND_DATAW = unsafe pointer to WIN32_FIND_DATAW
		WIN32_FIND_DATA = WIN32_FIND_DATAA
		PtrWIN32_FIND_DATA = PtrWIN32_FIND_DATAA
		WIN32_FILE_ATTRIBUTE_DATA = cstruct 
				dwFileAttributes: set
				ftCreationTime: FILETIME
				ftLastAccessTime: FILETIME
				ftLastWriteTime: FILETIME
				nFileSizeHigh: integer
				nFileSizeLow: integer 
			end 
		PtrWIN32_FILE_ATTRIBUTE_DATA = unsafe pointer to WIN32_FILE_ATTRIBUTE_DATA
		TIMERAPCROUTINE = proc (lpArgToCompletionRoutine: PtrVoid; dwTimerLowValue: integer; dwTimerHighValue: integer)
		ENUMRESTYPEPROC = proc (): integer
		ENUMRESNAMEPROC = proc (): integer
		ENUMRESLANGPROC = proc (): integer
		GET_FILEEX_INFO_LEVELS = integer
		FINDEX_INFO_LEVELS = integer
		FINDEX_SEARCH_OPS = integer
		PROGRESS_ROUTINE = proc (TotalFileSize: longint; TotalBytesTransferred: longint; StreamSize: longint; StreamBytesTransferred: longint; dwStreamNumber: integer; dwCallbackReason: integer; hSourceFile: HANDLE; hDestinationFile: HANDLE; lpData: PtrVoid): integer
		HW_PROFILE_INFOA = cstruct 
				dwDockInfo: integer
				szHwProfileGuid: carray 39 of char
				szHwProfileName: carray 80 of char 
			end 
		PtrHW_PROFILE_INFOA = unsafe pointer to HW_PROFILE_INFOA
		HW_PROFILE_INFOW = cstruct 
				dwDockInfo: integer
				szHwProfileGuid: carray 39 of wchar
				szHwProfileName: carray 80 of wchar 
			end 
		PtrHW_PROFILE_INFOW = unsafe pointer to HW_PROFILE_INFOW
		HW_PROFILE_INFO = HW_PROFILE_INFOA
		PtrHW_PROFILE_INFO = PtrHW_PROFILE_INFOA
		OSVERSIONINFOA = cstruct 
				dwOSVersionInfoSize: integer
				dwMajorVersion: integer
				dwMinorVersion: integer
				dwBuildNumber: integer
				dwPlatformId: integer
				szCSDVersion: carray 128 of char 
			end 
		PtrOSVERSIONINFOA = unsafe pointer to OSVERSIONINFOA
		OSVERSIONINFOW = cstruct 
				dwOSVersionInfoSize: integer
				dwMajorVersion: integer
				dwMinorVersion: integer
				dwBuildNumber: integer
				dwPlatformId: integer
				szCSDVersion: carray 128 of wchar 
			end 
		PtrOSVERSIONINFOW = unsafe pointer to OSVERSIONINFOW
		OSVERSIONINFO = OSVERSIONINFOA
		PtrOSVERSIONINFO = PtrOSVERSIONINFOA
		SYSTEM_POWER_STATUS = cstruct 
				ACLineStatus: char
				BatteryFlag: char
				BatteryLifePercent: char
				Reserved1: char
				BatteryLifeTime: integer
				BatteryFullLifeTime: integer 
			end 
		PtrSYSTEM_POWER_STATUS = unsafe pointer to SYSTEM_POWER_STATUS
		WIN_CERTIFICATE = cstruct 
				dwLength: integer
				wRevision: shortint
				wCertificateType: shortint
				bCertificate: carray 1 of char 
			end 
		PtrWIN_CERTIFICATE = unsafe pointer to WIN_CERTIFICATE
		WIN_TRUST_SUBJECT = PtrVoid
		WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT = cstruct 
				hClientToken: HANDLE
				dwSubjectType: integer
				Subject: WIN_TRUST_SUBJECT 
			end 
		PtrWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJE = (* ... *)unsafe pointer to WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT
		WIN_TRUST_ACTDATA_SUBJECT_ONLY = cstruct 
				dwSubjectType: integer
				Subject: WIN_TRUST_SUBJECT 
			end 
		PtrWIN_TRUST_ACTDATA_SUBJECT_ONLY = unsafe pointer to WIN_TRUST_ACTDATA_SUBJECT_ONLY
		WIN_TRUST_SUBJECT_FILE = cstruct 
				hFile: HANDLE
				lpPath: PtrWSTR 
			end 
		PtrWIN_TRUST_SUBJECT_FILE = unsafe pointer to WIN_TRUST_SUBJECT_FILE
		WIN_SPUB_TRUSTEDPUB_DATA = cstruct 
				hClientToken: HANDLE
				lpCertificate: PtrWIN_CERTIFICATE 
			end 
		PtrWIN_SPUB_TRUSTEDPUB_DATA = unsafe pointer to WIN_SPUB_TRUSTEDPUB_DATA
		XFORM = cstruct 
				eM11: real
				eM12: real
				eM21: real
				eM22: real
				eDx: real
				eDy: real 
			end 
		PtrXFORM = unsafe pointer to XFORM
		BITMAP = cstruct 
				bmType: integer
				bmWidth: integer
				bmHeight: integer
				bmWidthBytes: integer
				bmPlanes: shortint
				bmBitsPixel: shortint
				bmBits: PtrVoid 
			end 
		PtrBITMAP = unsafe pointer to BITMAP
		RGBTRIPLE = cstruct 
				rgbtBlue: char
				rgbtGreen: char
				rgbtRed: char 
			end 
		RGBQUAD = cstruct 
				rgbBlue: char
				rgbGreen: char
				rgbRed: char
				rgbReserved: char 
			end 
		PtrRGBQUAD = unsafe pointer to RGBQUAD
		LCSCSTYPE = integer
		LCSGAMUTMATCH = integer
		FXPT16DOT16 = integer
		FXPT2DOT30 = integer
		CIEXYZ = cstruct 
				ciexyzX: FXPT2DOT30
				ciexyzY: FXPT2DOT30
				ciexyzZ: FXPT2DOT30 
			end 
		PtrCIEXYZ = unsafe pointer to CIEXYZ
		CIEXYZTRIPLE = cstruct 
				ciexyzRed: CIEXYZ
				ciexyzGreen: CIEXYZ
				ciexyzBlue: CIEXYZ 
			end 
		PtrCIEXYZTRIPLE = unsafe pointer to CIEXYZTRIPLE
		LOGCOLORSPACEA = cstruct 
				lcsSignature: integer
				lcsVersion: integer
				lcsSize: integer
				lcsCSType: LCSCSTYPE
				lcsIntent: LCSGAMUTMATCH
				lcsEndpoints: CIEXYZTRIPLE
				lcsGammaRed: integer
				lcsGammaGreen: integer
				lcsGammaBlue: integer
				lcsFilename: carray 260 of char 
			end 
		PtrLOGCOLORSPACEA = unsafe pointer to LOGCOLORSPACEA
		LOGCOLORSPACEW = cstruct 
				lcsSignature: integer
				lcsVersion: integer
				lcsSize: integer
				lcsCSType: LCSCSTYPE
				lcsIntent: LCSGAMUTMATCH
				lcsEndpoints: CIEXYZTRIPLE
				lcsGammaRed: integer
				lcsGammaGreen: integer
				lcsGammaBlue: integer
				lcsFilename: carray 260 of wchar 
			end 
		PtrLOGCOLORSPACEW = unsafe pointer to LOGCOLORSPACEW
		LOGCOLORSPACE = LOGCOLORSPACEA
		PtrLOGCOLORSPACE = PtrLOGCOLORSPACEA
		BITMAPCOREHEADER = cstruct 
				bcSize: integer
				bcWidth: shortint
				bcHeight: shortint
				bcPlanes: shortint
				bcBitCount: shortint 
			end 
		PtrBITMAPCOREHEADER = unsafe pointer to BITMAPCOREHEADER
		BITMAPINFOHEADER = cstruct 
				biSize: integer
				biWidth: integer
				biHeight: integer
				biPlanes: shortint
				biBitCount: shortint
				biCompression: integer
				biSizeImage: integer
				biXPelsPerMeter: integer
				biYPelsPerMeter: integer
				biClrUsed: integer
				biClrImportant: integer 
			end 
		PtrBITMAPINFOHEADER = unsafe pointer to BITMAPINFOHEADER
		BITMAPV4HEADER = cstruct 
				bV4Size: integer
				bV4Width: integer
				bV4Height: integer
				bV4Planes: shortint
				bV4BitCount: shortint
				bV4V4Compression: integer
				bV4SizeImage: integer
				bV4XPelsPerMeter: integer
				bV4YPelsPerMeter: integer
				bV4ClrUsed: integer
				bV4ClrImportant: integer
				bV4RedMask: integer
				bV4GreenMask: integer
				bV4BlueMask: integer
				bV4AlphaMask: integer
				bV4CSType: integer
				bV4Endpoints: CIEXYZTRIPLE
				bV4GammaRed: integer
				bV4GammaGreen: integer
				bV4GammaBlue: integer 
			end 
		PtrBITMAPV4HEADER = unsafe pointer to BITMAPV4HEADER
		BITMAPINFO = cstruct 
				bmiHeader: BITMAPINFOHEADER
				bmiColors: carray 1 of RGBQUAD 
			end 
		PtrBITMAPINFO = unsafe pointer to BITMAPINFO
		BITMAPCOREINFO = cstruct 
				bmciHeader: BITMAPCOREHEADER
				bmciColors: carray 1 of RGBTRIPLE 
			end 
		PtrBITMAPCOREINFO = unsafe pointer to BITMAPCOREINFO
		BITMAPFILEHEADER = cstruct 
				bfType: shortint
				bfSize: integer
				bfReserved1: shortint
				bfReserved2: shortint
				bfOffBits: integer 
			end 
		PtrBITMAPFILEHEADER = unsafe pointer to BITMAPFILEHEADER
		FONTSIGNATURE = cstruct 
				fsUsb: carray 4 of integer
				fsCsb: carray 2 of integer 
			end 
		PtrFONTSIGNATURE = unsafe pointer to FONTSIGNATURE
		CHARSETINFO = cstruct 
				ciCharset: integer
				ciACP: integer
				fs: FONTSIGNATURE 
			end 
		PtrCHARSETINFO = unsafe pointer to CHARSETINFO
		LOCALESIGNATURE = cstruct 
				lsUsb: carray 4 of integer
				lsCsbDefault: carray 2 of integer
				lsCsbSupported: carray 2 of integer 
			end 
		PtrLOCALESIGNATURE = unsafe pointer to LOCALESIGNATURE
		HANDLETABLE = cstruct 
				objectHandle: carray 1 of HGDIOBJ 
			end 
		PtrHANDLETABLE = unsafe pointer to HANDLETABLE
		METARECORD = cstruct 
				rdSize: integer
				rdFunction: shortint
				rdParm: carray 1 of shortint 
			end 
		PtrMETARECORD = unsafe pointer to METARECORD
		METAFILEPICT = cstruct 
				mm: integer
				xExt: integer
				yExt: integer
				hMF: HMETAFILE 
			end 
		PtrMETAFILEPICT = unsafe pointer to METAFILEPICT
		METAHEADER = cstruct 
				mtType: shortint
				mtHeaderSize: shortint
				mtVersion: shortint
				mtSize: integer
				mtNoObjects: shortint
				mtMaxRecord: integer
				mtNoParameters: shortint 
			end 
		PtrMETAHEADER = unsafe pointer to METAHEADER
		ENHMETARECORD = cstruct 
				iType: integer
				nSize: integer
				dParm: carray 1 of integer 
			end 
		PtrENHMETARECORD = unsafe pointer to ENHMETARECORD
		ENHMETAHEADER = cstruct 
				iType: integer
				nSize: integer
				rclBounds: RECT
				rclFrame: RECT
				dSignature: integer
				nVersion: integer
				nBytes: integer
				nRecords: integer
				nHandles: shortint
				sReserved: shortint
				nDescription: integer
				offDescription: integer
				nPalEntries: integer
				szlDevice: SIZE
				szlMillimeters: SIZE
				cbPixelFormat: integer
				offPixelFormat: integer
				bOpenGL: integer 
			end 
		PtrENHMETAHEADER = unsafe pointer to ENHMETAHEADER
		BCHAR = char
		TEXTMETRICA = cstruct 
				tmHeight: integer
				tmAscent: integer
				tmDescent: integer
				tmInternalLeading: integer
				tmExternalLeading: integer
				tmAveCharWidth: integer
				tmMaxCharWidth: integer
				tmWeight: integer
				tmOverhang: integer
				tmDigitizedAspectX: integer
				tmDigitizedAspectY: integer
				tmFirstChar: char
				tmLastChar: char
				tmDefaultChar: char
				tmBreakChar: char
				tmItalic: char
				tmUnderlined: char
				tmStruckOut: char
				tmPitchAndFamily: char
				tmCharSet: char 
			end 
		PtrTEXTMETRICA = unsafe pointer to TEXTMETRICA
		TEXTMETRICW = cstruct 
				tmHeight: integer
				tmAscent: integer
				tmDescent: integer
				tmInternalLeading: integer
				tmExternalLeading: integer
				tmAveCharWidth: integer
				tmMaxCharWidth: integer
				tmWeight: integer
				tmOverhang: integer
				tmDigitizedAspectX: integer
				tmDigitizedAspectY: integer
				tmFirstChar: wchar
				tmLastChar: wchar
				tmDefaultChar: wchar
				tmBreakChar: wchar
				tmItalic: char
				tmUnderlined: char
				tmStruckOut: char
				tmPitchAndFamily: char
				tmCharSet: char 
			end 
		PtrTEXTMETRICW = unsafe pointer to TEXTMETRICW
		TEXTMETRIC = TEXTMETRICA
		PtrTEXTMETRIC = PtrTEXTMETRICA
		NEWTEXTMETRICA = cstruct 
				tmHeight: integer
				tmAscent: integer
				tmDescent: integer
				tmInternalLeading: integer
				tmExternalLeading: integer
				tmAveCharWidth: integer
				tmMaxCharWidth: integer
				tmWeight: integer
				tmOverhang: integer
				tmDigitizedAspectX: integer
				tmDigitizedAspectY: integer
				tmFirstChar: char
				tmLastChar: char
				tmDefaultChar: char
				tmBreakChar: char
				tmItalic: char
				tmUnderlined: char
				tmStruckOut: char
				tmPitchAndFamily: char
				tmCharSet: char
				ntmFlags: integer
				ntmSizeEM: integer
				ntmCellHeight: integer
				ntmAvgWidth: integer 
			end 
		PtrNEWTEXTMETRICA = unsafe pointer to NEWTEXTMETRICA
		NEWTEXTMETRICW = cstruct 
				tmHeight: integer
				tmAscent: integer
				tmDescent: integer
				tmInternalLeading: integer
				tmExternalLeading: integer
				tmAveCharWidth: integer
				tmMaxCharWidth: integer
				tmWeight: integer
				tmOverhang: integer
				tmDigitizedAspectX: integer
				tmDigitizedAspectY: integer
				tmFirstChar: wchar
				tmLastChar: wchar
				tmDefaultChar: wchar
				tmBreakChar: wchar
				tmItalic: char
				tmUnderlined: char
				tmStruckOut: char
				tmPitchAndFamily: char
				tmCharSet: char
				ntmFlags: integer
				ntmSizeEM: integer
				ntmCellHeight: integer
				ntmAvgWidth: integer 
			end 
		PtrNEWTEXTMETRICW = unsafe pointer to NEWTEXTMETRICW
		NEWTEXTMETRIC = NEWTEXTMETRICA
		PtrNEWTEXTMETRIC = PtrNEWTEXTMETRICA
		NEWTEXTMETRICEXA = cstruct 
				ntmTm: NEWTEXTMETRICA
				ntmFontSig: FONTSIGNATURE 
			end 
		NEWTEXTMETRICEXW = cstruct 
				ntmTm: NEWTEXTMETRICW
				ntmFontSig: FONTSIGNATURE 
			end 
		NEWTEXTMETRICEX = NEWTEXTMETRICEXA
		PELARRAY = cstruct 
				paXCount: integer
				paYCount: integer
				paXExt: integer
				paYExt: integer
				paRGBs: char 
			end 
		PtrPELARRAY = unsafe pointer to PELARRAY
		LOGBRUSH = cstruct 
				lbStyle: integer
				lbColor: COLORREF
				lbHatch: integer 
			end 
		PtrLOGBRUSH = unsafe pointer to LOGBRUSH
		PATTERN = LOGBRUSH
		PtrPATTERN = PtrLOGBRUSH
		LOGPEN = cstruct 
				lopnStyle: integer
				lopnWidth: POINT
				lopnColor: COLORREF 
			end 
		PtrLOGPEN = unsafe pointer to LOGPEN
		EXTLOGPEN = cstruct 
				elpPenStyle: integer
				elpWidth: integer
				elpBrushStyle: integer
				elpColor: COLORREF
				elpHatch: integer
				elpNumEntries: integer
				elpStyleEntry: carray 1 of integer 
			end 
		PtrEXTLOGPEN = unsafe pointer to EXTLOGPEN
		PALETTEENTRY = cstruct 
				peRed: char
				peGreen: char
				peBlue: char
				peFlags: char 
			end 
		PtrPALETTEENTRY = unsafe pointer to PALETTEENTRY
		LOGPALETTE = cstruct 
				palVersion: shortint
				palNumEntries: shortint
				palPalEntry: carray 1 of PALETTEENTRY 
			end 
		PtrLOGPALETTE = unsafe pointer to LOGPALETTE
		LOGFONTA = cstruct 
				lfHeight: integer
				lfWidth: integer
				lfEscapement: integer
				lfOrientation: integer
				lfWeight: integer
				lfItalic: char
				lfUnderline: char
				lfStrikeOut: char
				lfCharSet: char
				lfOutPrecision: char
				lfClipPrecision: char
				lfQuality: char
				lfPitchAndFamily: char
				lfFaceName: carray 32 of char 
			end 
		PtrLOGFONTA = unsafe pointer to LOGFONTA
		LOGFONTW = cstruct 
				lfHeight: integer
				lfWidth: integer
				lfEscapement: integer
				lfOrientation: integer
				lfWeight: integer
				lfItalic: char
				lfUnderline: char
				lfStrikeOut: char
				lfCharSet: char
				lfOutPrecision: char
				lfClipPrecision: char
				lfQuality: char
				lfPitchAndFamily: char
				lfFaceName: carray 32 of wchar 
			end 
		PtrLOGFONTW = unsafe pointer to LOGFONTW
		LOGFONT = LOGFONTA
		PtrLOGFONT = PtrLOGFONTA
		ENUMLOGFONTA = cstruct 
				elfLogFont: LOGFONTA
				elfFullName: carray 64 of char
				elfStyle: carray 32 of char 
			end 
		PtrENUMLOGFONTA = unsafe pointer to ENUMLOGFONTA
		ENUMLOGFONTW = cstruct 
				elfLogFont: LOGFONTW
				elfFullName: carray 64 of wchar
				elfStyle: carray 32 of wchar 
			end 
		PtrENUMLOGFONTW = unsafe pointer to ENUMLOGFONTW
		ENUMLOGFONT = ENUMLOGFONTA
		PtrENUMLOGFONT = PtrENUMLOGFONTA
		ENUMLOGFONTEXA = cstruct 
				elfLogFont: LOGFONTA
				elfFullName: carray 64 of char
				elfStyle: carray 32 of char
				elfScript: carray 32 of char 
			end 
		PtrENUMLOGFONTEXA = unsafe pointer to ENUMLOGFONTEXA
		ENUMLOGFONTEXW = cstruct 
				elfLogFont: LOGFONTW
				elfFullName: carray 64 of wchar
				elfStyle: carray 32 of wchar
				elfScript: carray 32 of wchar 
			end 
		PtrENUMLOGFONTEXW = unsafe pointer to ENUMLOGFONTEXW
		ENUMLOGFONTEX = ENUMLOGFONTEXA
		PtrENUMLOGFONTEX = PtrENUMLOGFONTEXA
		PANOSE = cstruct 
				bFamilyType: char
				bSerifStyle: char
				bWeight: char
				bProportion: char
				bContrast: char
				bStrokeVariation: char
				bArmStyle: char
				bLetterform: char
				bMidline: char
				bXHeight: char 
			end 
		PtrPANOSE = unsafe pointer to PANOSE
		EXTLOGFONTA = cstruct 
				elfLogFont: LOGFONTA
				elfFullName: carray 64 of char
				elfStyle: carray 32 of char
				elfVersion: integer
				elfStyleSize: integer
				elfMatch: integer
				elfReserved: integer
				elfVendorId: carray 4 of char
				elfCulture: integer
				elfPanose: PANOSE 
			end 
		PtrEXTLOGFONTA = unsafe pointer to EXTLOGFONTA
		EXTLOGFONTW = cstruct 
				elfLogFont: LOGFONTW
				elfFullName: carray 64 of wchar
				elfStyle: carray 32 of wchar
				elfVersion: integer
				elfStyleSize: integer
				elfMatch: integer
				elfReserved: integer
				elfVendorId: carray 4 of char
				elfCulture: integer
				elfPanose: PANOSE 
			end 
		PtrEXTLOGFONTW = unsafe pointer to EXTLOGFONTW
		EXTLOGFONT = EXTLOGFONTA
		PtrEXTLOGFONT = PtrEXTLOGFONTA
		DEVMODEA = cstruct 
				dmDeviceName: carray 32 of char
				dmSpecVersion: shortint
				dmDriverVersion: shortint
				dmSize: shortint
				dmDriverExtra: shortint
				dmFields: set
				dmOrientation: shortint
				dmPaperSize: shortint
				dmPaperLength: shortint
				dmPaperWidth: shortint
				dmScale: shortint
				dmCopies: shortint
				dmDefaultSource: shortint
				dmPrintQuality: shortint
				dmColor: shortint
				dmDuplex: shortint
				dmYResolution: shortint
				dmTTOption: shortint
				dmCollate: shortint
				dmFormName: carray 32 of char
				dmLogPixels: shortint
				dmBitsPerPel: integer
				dmPelsWidth: integer
				dmPelsHeight: integer
				dmDisplayFlags: set
				dmDisplayFrequency: integer
				dmICMMethod: integer
				dmICMIntent: integer
				dmMediaType: integer
				dmDitherType: integer
				dmICCManufacturer: integer
				dmICCModel: integer
				dmPanningWidth: integer
				dmPanningHeight: integer 
			end 
		PtrDEVMODEA = unsafe pointer to DEVMODEA
		DEVMODEW = cstruct 
				dmDeviceName: carray 32 of wchar
				dmSpecVersion: shortint
				dmDriverVersion: shortint
				dmSize: shortint
				dmDriverExtra: shortint
				dmFields: set
				dmOrientation: shortint
				dmPaperSize: shortint
				dmPaperLength: shortint
				dmPaperWidth: shortint
				dmScale: shortint
				dmCopies: shortint
				dmDefaultSource: shortint
				dmPrintQuality: shortint
				dmColor: shortint
				dmDuplex: shortint
				dmYResolution: shortint
				dmTTOption: shortint
				dmCollate: shortint
				dmFormName: carray 32 of wchar
				dmLogPixels: shortint
				dmBitsPerPel: integer
				dmPelsWidth: integer
				dmPelsHeight: integer
				dmDisplayFlags: set
				dmDisplayFrequency: integer
				dmICMMethod: integer
				dmICMIntent: integer
				dmMediaType: integer
				dmDitherType: integer
				dmICCManufacturer: integer
				dmICCModel: integer
				dmPanningWidth: integer
				dmPanningHeight: integer 
			end 
		PtrDEVMODEW = unsafe pointer to DEVMODEW
		DEVMODE = DEVMODEA
		PtrDEVMODE = PtrDEVMODEA
		RGNDATAHEADER = cstruct 
				dwSize: integer
				iType: integer
				nCount: integer
				nRgnSize: integer
				rcBound: RECT 
			end 
		PtrRGNDATAHEADER = unsafe pointer to RGNDATAHEADER
		RGNDATA = cstruct 
				rdh: RGNDATAHEADER
				Buffer: carray 1 of char 
			end 
		PtrRGNDATA = unsafe pointer to RGNDATA
		ABC = cstruct 
				abcA: integer
				abcB: integer
				abcC: integer 
			end 
		PtrABC = unsafe pointer to ABC
		ABCFLOAT = cstruct 
				abcfA: real
				abcfB: real
				abcfC: real 
			end 
		PtrABCFLOAT = unsafe pointer to ABCFLOAT
		OUTLINETEXTMETRICA = cstruct 
				otmSize: integer
				otmTextMetrics: TEXTMETRICA
				otmFiller: char
				otmPanoseNumber: PANOSE
				otmfsSelection: integer
				otmfsType: integer
				otmsCharSlopeRise: integer
				otmsCharSlopeRun: integer
				otmItalicAngle: integer
				otmEMSquare: integer
				otmAscent: integer
				otmDescent: integer
				otmLineGap: integer
				otmsCapEmHeight: integer
				otmsXHeight: integer
				otmrcFontBox: RECT
				otmMacAscent: integer
				otmMacDescent: integer
				otmMacLineGap: integer
				otmusMinimumPPEM: integer
				otmptSubscriptSize: POINT
				otmptSubscriptOffset: POINT
				otmptSuperscriptSize: POINT
				otmptSuperscriptOffset: POINT
				otmsStrikeoutSize: integer
				otmsStrikeoutPosition: integer
				otmsUnderscoreSize: integer
				otmsUnderscorePosition: integer
				otmpFamilyName: PtrSTR
				otmpFaceName: PtrSTR
				otmpStyleName: PtrSTR
				otmpFullName: PtrSTR 
			end 
		PtrOUTLINETEXTMETRICA = unsafe pointer to OUTLINETEXTMETRICA
		OUTLINETEXTMETRICW = cstruct 
				otmSize: integer
				otmTextMetrics: TEXTMETRICW
				otmFiller: char
				otmPanoseNumber: PANOSE
				otmfsSelection: integer
				otmfsType: integer
				otmsCharSlopeRise: integer
				otmsCharSlopeRun: integer
				otmItalicAngle: integer
				otmEMSquare: integer
				otmAscent: integer
				otmDescent: integer
				otmLineGap: integer
				otmsCapEmHeight: integer
				otmsXHeight: integer
				otmrcFontBox: RECT
				otmMacAscent: integer
				otmMacDescent: integer
				otmMacLineGap: integer
				otmusMinimumPPEM: integer
				otmptSubscriptSize: POINT
				otmptSubscriptOffset: POINT
				otmptSuperscriptSize: POINT
				otmptSuperscriptOffset: POINT
				otmsStrikeoutSize: integer
				otmsStrikeoutPosition: integer
				otmsUnderscoreSize: integer
				otmsUnderscorePosition: integer
				otmpFamilyName: PtrSTR
				otmpFaceName: PtrSTR
				otmpStyleName: PtrSTR
				otmpFullName: PtrSTR 
			end 
		PtrOUTLINETEXTMETRICW = unsafe pointer to OUTLINETEXTMETRICW
		OUTLINETEXTMETRIC = OUTLINETEXTMETRICA
		PtrOUTLINETEXTMETRIC = PtrOUTLINETEXTMETRICA
		POLYTEXTA = cstruct 
				x: integer
				y: integer
				n: integer
				lpstr: PtrSTR
				uiFlags: set
				rcl: RECT
				pdx: unsafe pointer to (* ? *)carray of integer 
			end 
		PtrPOLYTEXTA = unsafe pointer to POLYTEXTA
		POLYTEXTW = cstruct 
				x: integer
				y: integer
				n: integer
				lpstr: PtrWSTR
				uiFlags: set
				rcl: RECT
				pdx: unsafe pointer to (* ? *)carray of integer 
			end 
		PtrPOLYTEXTW = unsafe pointer to POLYTEXTW
		POLYTEXT = POLYTEXTA
		PtrPOLYTEXT = PtrPOLYTEXTA
		FIXED = cstruct 
				fract: shortint
				value: shortint 
			end 
		MAT2 = cstruct 
				eM11: FIXED
				eM12: FIXED
				eM21: FIXED
				eM22: FIXED 
			end 
		PtrMAT2 = unsafe pointer to MAT2
		GLYPHMETRICS = cstruct 
				gmBlackBoxX: integer
				gmBlackBoxY: integer
				gmptGlyphOrigin: POINT
				gmCellIncX: shortint
				gmCellIncY: shortint 
			end 
		PtrGLYPHMETRICS = unsafe pointer to GLYPHMETRICS
		POINTFX = cstruct 
				x: FIXED
				y: FIXED 
			end 
		PtrPOINTFX = unsafe pointer to POINTFX
		TTPOLYCURVE = cstruct 
				wType: shortint
				cpfx: shortint
				apfx: carray 1 of POINTFX 
			end 
		PtrTTPOLYCURVE = unsafe pointer to TTPOLYCURVE
		TTPOLYGONHEADER = cstruct 
				cb: integer
				dwType: integer
				pfxStart: POINTFX 
			end 
		PtrTTPOLYGONHEADER = unsafe pointer to TTPOLYGONHEADER
		GCP_RESULTSA = cstruct 
				lStructSize: integer
				lpOutString: PtrSTR
				lpOrder: unsafe pointer to (* ? *)carray of integer
				lpDx: unsafe pointer to (* ? *)carray of integer
				lpCaretPos: unsafe pointer to (* ? *)carray of integer
				lpClass: PtrSTR
				lpGlyphs: PtrWSTR
				nGlyphs: integer
				nMaxFit: integer 
			end 
		PtrGCP_RESULTSA = unsafe pointer to GCP_RESULTSA
		GCP_RESULTSW = cstruct 
				lStructSize: integer
				lpOutString: PtrWSTR
				lpOrder: unsafe pointer to (* ? *)carray of integer
				lpDx: unsafe pointer to (* ? *)carray of integer
				lpCaretPos: unsafe pointer to (* ? *)carray of integer
				lpClass: PtrSTR
				lpGlyphs: PtrWSTR
				nGlyphs: integer
				nMaxFit: integer 
			end 
		PtrGCP_RESULTSW = unsafe pointer to GCP_RESULTSW
		GCP_RESULTS = GCP_RESULTSA
		PtrGCP_RESULTS = PtrGCP_RESULTSA
		RASTERIZER_STATUS = cstruct 
				nSize: shortint
				wFlags: shortint
				nLanguageID: shortint 
			end 
		PtrRASTERIZER_STATUS = unsafe pointer to RASTERIZER_STATUS
		PIXELFORMATDESCRIPTOR = cstruct 
				nSize: shortint
				nVersion: shortint
				dwFlags: set
				iPixelType: char
				cColorBits: char
				cRedBits: char
				cRedShift: char
				cGreenBits: char
				cGreenShift: char
				cBlueBits: char
				cBlueShift: char
				cAlphaBits: char
				cAlphaShift: char
				cAccumBits: char
				cAccumRedBits: char
				cAccumGreenBits: char
				cAccumBlueBits: char
				cAccumAlphaBits: char
				cDepthBits: char
				cStencilBits: char
				cAuxBuffers: char
				iLayerType: char
				bReserved: char
				dwLayerMask: set
				dwVisibleMask: set
				dwDamageMask: set 
			end 
		PtrPIXELFORMATDESCRIPTOR = unsafe pointer to PIXELFORMATDESCRIPTOR
		OLDFONTENUMPROC = proc (): integer
		FONTENUMPROCA = proc (var lplf: LOGFONTA; var lptm: TEXTMETRICA; dwType, lParam: integer): integer
		FONTENUMPROCW = proc (var lplf: LOGFONTW; var lptm: TEXTMETRICW; dwType, lParam: integer): integer
		FONTENUMPROC = proc (var lplf: LOGFONTA; var lptm: TEXTMETRICA; dwType, lParam: integer): integer
		FONTENUMPROCEXA = proc (var lpelf: ENUMLOGFONTEXA; var lpntm: NEWTEXTMETRICEXA; FontType, lParam: integer): integer
		FONTENUMPROCEXW = proc (var lpelf: ENUMLOGFONTEXW; var lpntm: NEWTEXTMETRICEXW; FontType, lParam: integer): integer
		FONTENUMPROCEX = proc (var lpelf: ENUMLOGFONTEXA; var lpntm: NEWTEXTMETRICEXA; FontType, lParam: integer): integer
		NEWFONTENUMPROCA = proc (var lpelf: ENUMLOGFONTA; var lpntm: NEWTEXTMETRICA; FontType, lParam: integer): integer
		NEWFONTENUMPROCW = proc (var lpelf: ENUMLOGFONTW; var lpntm: NEWTEXTMETRICW; FontType, lParam: integer): integer
		NEWFONTENUMPROC = proc (var lpelf: ENUMLOGFONTA; var lpntm: NEWTEXTMETRICA; FontType, lParam: integer): integer
		GOBJENUMPROC = proc (): integer
		LINEDDAPROC = proc (): integer
		FNDEVMODE = proc (p0: HWND; p1: HMODULE; var p2: DEVMODEA; p3: PtrSTR; p4: PtrSTR; var p5: DEVMODEA; p6: PtrSTR; p7: integer): integer
		FNDEVCAPS = proc (p0: PtrSTR; p1: PtrSTR; p2: integer; p3: PtrSTR; var p4: DEVMODEA): integer
		MFENUMPROC = proc (p0: HDC; var p1: HANDLETABLE; var p2: METARECORD; p3: integer; p4: LPARAM): integer
		ENHMFENUMPROC = proc (p0: HDC; var p1: HANDLETABLE; var p2: ENHMETARECORD; p3: integer; p4: LPARAM): integer
		DIBSECTION = cstruct 
				dsBm: BITMAP
				dsBmih: BITMAPINFOHEADER
				dsBitfields: carray 3 of integer
				dshSection: HANDLE
				dsOffset: integer 
			end 
		PtrDIBSECTION = unsafe pointer to DIBSECTION
		COLORADJUSTMENT = cstruct 
				caSize: shortint
				caFlags: shortint
				caIlluminantIndex: shortint
				caRedGamma: shortint
				caGreenGamma: shortint
				caBlueGamma: shortint
				caReferenceBlack: shortint
				caReferenceWhite: shortint
				caContrast: shortint
				caBrightness: shortint
				caColorfulness: shortint
				caRedGreenTint: shortint 
			end 
		PtrCOLORADJUSTMENT = unsafe pointer to COLORADJUSTMENT
		ABORTPROC = proc (hdc: HDC; iError: integer): integer
		DOCINFOA = cstruct 
				cbSize: integer
				lpszDocName: PtrSTR
				lpszOutput: PtrSTR
				lpszDatatype: PtrSTR
				fwType: integer 
			end 
		PtrDOCINFOA = unsafe pointer to DOCINFOA
		DOCINFOW = cstruct 
				cbSize: integer
				lpszDocName: PtrWSTR
				lpszOutput: PtrWSTR
				lpszDatatype: PtrWSTR
				fwType: integer 
			end 
		PtrDOCINFOW = unsafe pointer to DOCINFOW
		DOCINFO = DOCINFOA
		PtrDOCINFO = PtrDOCINFOA
		KERNINGPAIR = cstruct 
				wFirst: shortint
				wSecond: shortint
				iKernAmount: integer 
			end 
		PtrKERNINGPAIR = unsafe pointer to KERNINGPAIR
		ICMENUMPROCA = proc (p0: PtrSTR; p1: LPARAM): integer
		ICMENUMPROCW = proc (p0: PtrWSTR; p1: LPARAM): integer
		EMR = cstruct 
				iType: integer
				nSize: integer 
			end 
		PtrEMR = unsafe pointer to EMR
		EMRTEXT = cstruct 
				ptlReference: POINT
				nChars: integer
				offString: integer
				fOptions: integer
				rcl: RECT
				offDx: integer 
			end 
		PtrEMRTEXT = unsafe pointer to EMRTEXT
		EMRABORTPATH = cstruct 
				emr: EMR 
			end 
		PtrEMRABORTPATH = unsafe pointer to EMRABORTPATH
		EMRBEGINPATH = EMRABORTPATH
		PtrEMRBEGINPATH = PtrEMRABORTPATH
		EMRENDPATH = EMRABORTPATH
		PtrEMRENDPATH = PtrEMRABORTPATH
		EMRCLOSEFIGURE = EMRABORTPATH
		PtrEMRCLOSEFIGURE = PtrEMRABORTPATH
		EMRFLATTENPATH = EMRABORTPATH
		PtrEMRFLATTENPATH = PtrEMRABORTPATH
		EMRWIDENPATH = EMRABORTPATH
		PtrEMRWIDENPATH = PtrEMRABORTPATH
		EMRSETMETARGN = EMRABORTPATH
		PtrEMRSETMETARGN = PtrEMRABORTPATH
		EMRSAVEDC = EMRABORTPATH
		PtrEMRSAVEDC = PtrEMRABORTPATH
		EMRREALIZEPALETTE = EMRABORTPATH
		PtrEMRREALIZEPALETTE = PtrEMRABORTPATH
		EMRSELECTCLIPPATH = cstruct 
				emr: EMR
				iMode: integer 
			end 
		PtrEMRSELECTCLIPPATH = unsafe pointer to EMRSELECTCLIPPATH
		EMRSETBKMODE = EMRSELECTCLIPPATH
		PtrEMRSETBKMODE = PtrEMRSELECTCLIPPATH
		EMRSETMAPMODE = EMRSELECTCLIPPATH
		PtrEMRSETMAPMODE = PtrEMRSELECTCLIPPATH
		EMRSETPOLYFILLMODE = EMRSELECTCLIPPATH
		PtrEMRSETPOLYFILLMODE = PtrEMRSELECTCLIPPATH
		EMRSETROP2 = EMRSELECTCLIPPATH
		PtrEMRSETROP2 = PtrEMRSELECTCLIPPATH
		EMRSETSTRETCHBLTMODE = EMRSELECTCLIPPATH
		PtrEMRSETSTRETCHBLTMODE = PtrEMRSELECTCLIPPATH
		EMRSETICMMODE = EMRSELECTCLIPPATH
		PtrEMRSETICMMODE = PtrEMRSELECTCLIPPATH
		EMRSETTEXTALIGN = EMRSELECTCLIPPATH
		PtrEMRSETTEXTALIGN = PtrEMRSELECTCLIPPATH
		EMRSETMITERLIMIT = cstruct 
				emr: EMR
				eMiterLimit: real 
			end 
		PtrEMRSETMITERLIMIT = unsafe pointer to EMRSETMITERLIMIT
		EMRRESTOREDC = cstruct 
				emr: EMR
				iRelative: integer 
			end 
		PtrEMRRESTOREDC = unsafe pointer to EMRRESTOREDC
		EMRSETARCDIRECTION = cstruct 
				emr: EMR
				iArcDirection: integer 
			end 
		PtrEMRSETARCDIRECTION = unsafe pointer to EMRSETARCDIRECTION
		EMRSETMAPPERFLAGS = cstruct 
				emr: EMR
				dwFlags: set 
			end 
		PtrEMRSETMAPPERFLAGS = unsafe pointer to EMRSETMAPPERFLAGS
		EMRSETBKCOLOR = cstruct 
				emr: EMR
				crColor: COLORREF 
			end 
		PtrEMRSETBKCOLOR = unsafe pointer to EMRSETBKCOLOR
		EMRSETTEXTCOLOR = EMRSETBKCOLOR
		PtrEMRSETTEXTCOLOR = PtrEMRSETBKCOLOR
		EMRSELECTOBJECT = cstruct 
				emr: EMR
				ihObject: integer 
			end 
		PtrEMRSELECTOBJECT = unsafe pointer to EMRSELECTOBJECT
		EMRDELETEOBJECT = EMRSELECTOBJECT
		PtrEMRDELETEOBJECT = PtrEMRSELECTOBJECT
		EMRSELECTCOLORSPACE = cstruct 
				emr: EMR
				ihCS: integer 
			end 
		PtrEMRSELECTCOLORSPACE = unsafe pointer to EMRSELECTCOLORSPACE
		EMRDELETECOLORSPACE = EMRSELECTCOLORSPACE
		PtrEMRDELETECOLORSPACE = PtrEMRSELECTCOLORSPACE
		EMRSELECTPALETTE = cstruct 
				emr: EMR
				ihPal: integer 
			end 
		PtrEMRSELECTPALETTE = unsafe pointer to EMRSELECTPALETTE
		EMRRESIZEPALETTE = cstruct 
				emr: EMR
				ihPal: integer
				cEntries: integer 
			end 
		PtrEMRRESIZEPALETTE = unsafe pointer to EMRRESIZEPALETTE
		EMRSETPALETTEENTRIES = cstruct 
				emr: EMR
				ihPal: integer
				iStart: integer
				cEntries: integer
				aPalEntries: carray 1 of PALETTEENTRY 
			end 
		PtrEMRSETPALETTEENTRIES = unsafe pointer to EMRSETPALETTEENTRIES
		EMRSETCOLORADJUSTMENT = cstruct 
				emr: EMR
				ColorAdjustment: COLORADJUSTMENT 
			end 
		PtrEMRSETCOLORADJUSTMENT = unsafe pointer to EMRSETCOLORADJUSTMENT
		EMRGDICOMMENT = cstruct 
				emr: EMR
				cbData: integer
				Data: carray 1 of char 
			end 
		PtrEMRGDICOMMENT = unsafe pointer to EMRGDICOMMENT
		EMREOF = cstruct 
				emr: EMR
				nPalEntries: integer
				offPalEntries: integer
				nSizeLast: integer 
			end 
		PtrEMREOF = unsafe pointer to EMREOF
		EMRLINETO = cstruct 
				emr: EMR
				ptl: POINT 
			end 
		PtrEMRLINETO = unsafe pointer to EMRLINETO
		EMRMOVETOEX = EMRLINETO
		PtrEMRMOVETOEX = PtrEMRLINETO
		EMROFFSETCLIPRGN = cstruct 
				emr: EMR
				ptlOffset: POINT 
			end 
		PtrEMROFFSETCLIPRGN = unsafe pointer to EMROFFSETCLIPRGN
		EMRFILLPATH = cstruct 
				emr: EMR
				rclBounds: RECT 
			end 
		PtrEMRFILLPATH = unsafe pointer to EMRFILLPATH
		EMRSTROKEANDFILLPATH = EMRFILLPATH
		PtrEMRSTROKEANDFILLPATH = PtrEMRFILLPATH
		EMRSTROKEPATH = EMRFILLPATH
		PtrEMRSTROKEPATH = PtrEMRFILLPATH
		EMREXCLUDECLIPRECT = cstruct 
				emr: EMR
				rclClip: RECT 
			end 
		PtrEMREXCLUDECLIPRECT = unsafe pointer to EMREXCLUDECLIPRECT
		EMRINTERSECTCLIPRECT = EMREXCLUDECLIPRECT
		PtrEMRINTERSECTCLIPRECT = PtrEMREXCLUDECLIPRECT
		EMRSETVIEWPORTORGEX = cstruct 
				emr: EMR
				ptlOrigin: POINT 
			end 
		PtrEMRSETVIEWPORTORGEX = unsafe pointer to EMRSETVIEWPORTORGEX
		EMRSETWINDOWORGEX = EMRSETVIEWPORTORGEX
		PtrEMRSETWINDOWORGEX = PtrEMRSETVIEWPORTORGEX
		EMRSETBRUSHORGEX = EMRSETVIEWPORTORGEX
		PtrEMRSETBRUSHORGEX = PtrEMRSETVIEWPORTORGEX
		EMRSETVIEWPORTEXTEX = cstruct 
				emr: EMR
				szlExtent: SIZE 
			end 
		PtrEMRSETVIEWPORTEXTEX = unsafe pointer to EMRSETVIEWPORTEXTEX
		EMRSETWINDOWEXTEX = EMRSETVIEWPORTEXTEX
		PtrEMRSETWINDOWEXTEX = PtrEMRSETVIEWPORTEXTEX
		EMRSCALEVIEWPORTEXTEX = cstruct 
				emr: EMR
				xNum: integer
				xDenom: integer
				yNum: integer
				yDenom: integer 
			end 
		PtrEMRSCALEVIEWPORTEXTEX = unsafe pointer to EMRSCALEVIEWPORTEXTEX
		EMRSCALEWINDOWEXTEX = EMRSCALEVIEWPORTEXTEX
		PtrEMRSCALEWINDOWEXTEX = PtrEMRSCALEVIEWPORTEXTEX
		EMRSETWORLDTRANSFORM = cstruct 
				emr: EMR
				xform: XFORM 
			end 
		PtrEMRSETWORLDTRANSFORM = unsafe pointer to EMRSETWORLDTRANSFORM
		EMRMODIFYWORLDTRANSFORM = cstruct 
				emr: EMR
				xform: XFORM
				iMode: integer 
			end 
		PtrEMRMODIFYWORLDTRANSFORM = unsafe pointer to EMRMODIFYWORLDTRANSFORM
		EMRSETPIXELV = cstruct 
				emr: EMR
				ptlPixel: POINT
				crColor: COLORREF 
			end 
		PtrEMRSETPIXELV = unsafe pointer to EMRSETPIXELV
		EMREXTFLOODFILL = cstruct 
				emr: EMR
				ptlStart: POINT
				crColor: COLORREF
				iMode: integer 
			end 
		PtrEMREXTFLOODFILL = unsafe pointer to EMREXTFLOODFILL
		EMRELLIPSE = cstruct 
				emr: EMR
				rclBox: RECT 
			end 
		PtrEMRELLIPSE = unsafe pointer to EMRELLIPSE
		EMRRECTANGLE = EMRELLIPSE
		PtrEMRRECTANGLE = PtrEMRELLIPSE
		EMRROUNDRECT = cstruct 
				emr: EMR
				rclBox: RECT
				szlCorner: SIZE 
			end 
		PtrEMRROUNDRECT = unsafe pointer to EMRROUNDRECT
		EMRARC = cstruct 
				emr: EMR
				rclBox: RECT
				ptlStart: POINT
				ptlEnd: POINT 
			end 
		PtrEMRARC = unsafe pointer to EMRARC
		EMRARCTO = EMRARC
		PtrEMRARCTO = PtrEMRARC
		EMRCHORD = EMRARC
		PtrEMRCHORD = PtrEMRARC
		EMRPIE = EMRARC
		PtrEMRPIE = PtrEMRARC
		EMRANGLEARC = cstruct 
				emr: EMR
				ptlCenter: POINT
				nRadius: integer
				eStartAngle: real
				eSweepAngle: real 
			end 
		PtrEMRANGLEARC = unsafe pointer to EMRANGLEARC
		EMRPOLYLINE = cstruct 
				emr: EMR
				rclBounds: RECT
				cptl: integer
				aptl: carray 1 of POINT 
			end 
		PtrEMRPOLYLINE = unsafe pointer to EMRPOLYLINE
		EMRPOLYBEZIER = EMRPOLYLINE
		PtrEMRPOLYBEZIER = PtrEMRPOLYLINE
		EMRPOLYGON = EMRPOLYLINE
		PtrEMRPOLYGON = PtrEMRPOLYLINE
		EMRPOLYBEZIERTO = EMRPOLYLINE
		PtrEMRPOLYBEZIERTO = PtrEMRPOLYLINE
		EMRPOLYLINETO = EMRPOLYLINE
		PtrEMRPOLYLINETO = PtrEMRPOLYLINE
		EMRPOLYLINE16 = cstruct 
				emr: EMR
				rclBounds: RECT
				cpts: integer
				apts: carray 1 of POINTS 
			end 
		PtrEMRPOLYLINE16 = unsafe pointer to EMRPOLYLINE16
		EMRPOLYBEZIER16 = EMRPOLYLINE16
		PtrEMRPOLYBEZIER16 = PtrEMRPOLYLINE16
		EMRPOLYGON16 = EMRPOLYLINE16
		PtrEMRPOLYGON16 = PtrEMRPOLYLINE16
		EMRPOLYBEZIERTO16 = EMRPOLYLINE16
		PtrEMRPOLYBEZIERTO16 = PtrEMRPOLYLINE16
		EMRPOLYLINETO16 = EMRPOLYLINE16
		PtrEMRPOLYLINETO16 = PtrEMRPOLYLINE16
		EMRPOLYDRAW = cstruct 
				emr: EMR
				rclBounds: RECT
				cptl: integer
				aptl: carray 1 of POINT
				abTypes: carray 1 of char 
			end 
		PtrEMRPOLYDRAW = unsafe pointer to EMRPOLYDRAW
		EMRPOLYDRAW16 = cstruct 
				emr: EMR
				rclBounds: RECT
				cpts: integer
				apts: carray 1 of POINTS
				abTypes: carray 1 of char 
			end 
		PtrEMRPOLYDRAW16 = unsafe pointer to EMRPOLYDRAW16
		EMRPOLYPOLYLINE = cstruct 
				emr: EMR
				rclBounds: RECT
				nPolys: integer
				cptl: integer
				aPolyCounts: carray 1 of integer
				aptl: carray 1 of POINT 
			end 
		PtrEMRPOLYPOLYLINE = unsafe pointer to EMRPOLYPOLYLINE
		EMRPOLYPOLYGON = EMRPOLYPOLYLINE
		PtrEMRPOLYPOLYGON = PtrEMRPOLYPOLYLINE
		EMRPOLYPOLYLINE16 = cstruct 
				emr: EMR
				rclBounds: RECT
				nPolys: integer
				cpts: integer
				aPolyCounts: carray 1 of integer
				apts: carray 1 of POINTS 
			end 
		PtrEMRPOLYPOLYLINE16 = unsafe pointer to EMRPOLYPOLYLINE16
		EMRPOLYPOLYGON16 = EMRPOLYPOLYLINE16
		PtrEMRPOLYPOLYGON16 = PtrEMRPOLYPOLYLINE16
		EMRINVERTRGN = cstruct 
				emr: EMR
				rclBounds: RECT
				cbRgnData: integer
				RgnData: carray 1 of char 
			end 
		PtrEMRINVERTRGN = unsafe pointer to EMRINVERTRGN
		EMRPAINTRGN = EMRINVERTRGN
		PtrEMRPAINTRGN = PtrEMRINVERTRGN
		EMRFILLRGN = cstruct 
				emr: EMR
				rclBounds: RECT
				cbRgnData: integer
				ihBrush: integer
				RgnData: carray 1 of char 
			end 
		PtrEMRFILLRGN = unsafe pointer to EMRFILLRGN
		EMRFRAMERGN = cstruct 
				emr: EMR
				rclBounds: RECT
				cbRgnData: integer
				ihBrush: integer
				szlStroke: SIZE
				RgnData: carray 1 of char 
			end 
		PtrEMRFRAMERGN = unsafe pointer to EMRFRAMERGN
		EMREXTSELECTCLIPRGN = cstruct 
				emr: EMR
				cbRgnData: integer
				iMode: integer
				RgnData: carray 1 of char 
			end 
		PtrEMREXTSELECTCLIPRGN = unsafe pointer to EMREXTSELECTCLIPRGN
		EMREXTTEXTOUTA = cstruct 
				emr: EMR
				rclBounds: RECT
				iGraphicsMode: integer
				exScale: real
				eyScale: real
				emrtext: EMRTEXT 
			end 
		PtrEMREXTTEXTOUTA = unsafe pointer to EMREXTTEXTOUTA
		EMREXTTEXTOUTW = EMREXTTEXTOUTA
		PtrEMREXTTEXTOUTW = PtrEMREXTTEXTOUTA
		EMRPOLYTEXTOUTA = cstruct 
				emr: EMR
				rclBounds: RECT
				iGraphicsMode: integer
				exScale: real
				eyScale: real
				cStrings: integer
				aemrtext: carray 1 of EMRTEXT 
			end 
		PtrEMRPOLYTEXTOUTA = unsafe pointer to EMRPOLYTEXTOUTA
		EMRPOLYTEXTOUTW = EMRPOLYTEXTOUTA
		PtrEMRPOLYTEXTOUTW = PtrEMRPOLYTEXTOUTA
		EMRBITBLT = cstruct 
				emr: EMR
				rclBounds: RECT
				xDest: integer
				yDest: integer
				cxDest: integer
				cyDest: integer
				dwRop: integer
				xSrc: integer
				ySrc: integer
				xformSrc: XFORM
				crBkColorSrc: COLORREF
				iUsageSrc: integer
				offBmiSrc: integer
				cbBmiSrc: integer
				offBitsSrc: integer
				cbBitsSrc: integer 
			end 
		PtrEMRBITBLT = unsafe pointer to EMRBITBLT
		EMRSTRETCHBLT = cstruct 
				emr: EMR
				rclBounds: RECT
				xDest: integer
				yDest: integer
				cxDest: integer
				cyDest: integer
				dwRop: integer
				xSrc: integer
				ySrc: integer
				xformSrc: XFORM
				crBkColorSrc: COLORREF
				iUsageSrc: integer
				offBmiSrc: integer
				cbBmiSrc: integer
				offBitsSrc: integer
				cbBitsSrc: integer
				cxSrc: integer
				cySrc: integer 
			end 
		PtrEMRSTRETCHBLT = unsafe pointer to EMRSTRETCHBLT
		EMRMASKBLT = cstruct 
				emr: EMR
				rclBounds: RECT
				xDest: integer
				yDest: integer
				cxDest: integer
				cyDest: integer
				dwRop: integer
				xSrc: integer
				ySrc: integer
				xformSrc: XFORM
				crBkColorSrc: COLORREF
				iUsageSrc: integer
				offBmiSrc: integer
				cbBmiSrc: integer
				offBitsSrc: integer
				cbBitsSrc: integer
				xMask: integer
				yMask: integer
				iUsageMask: integer
				offBmiMask: integer
				cbBmiMask: integer
				offBitsMask: integer
				cbBitsMask: integer 
			end 
		PtrEMRMASKBLT = unsafe pointer to EMRMASKBLT
		EMRPLGBLT = cstruct 
				emr: EMR
				rclBounds: RECT
				aptlDest: carray 3 of POINT
				xSrc: integer
				ySrc: integer
				cxSrc: integer
				cySrc: integer
				xformSrc: XFORM
				crBkColorSrc: COLORREF
				iUsageSrc: integer
				offBmiSrc: integer
				cbBmiSrc: integer
				offBitsSrc: integer
				cbBitsSrc: integer
				xMask: integer
				yMask: integer
				iUsageMask: integer
				offBmiMask: integer
				cbBmiMask: integer
				offBitsMask: integer
				cbBitsMask: integer 
			end 
		PtrEMRPLGBLT = unsafe pointer to EMRPLGBLT
		EMRSETDIBITSTODEVICE = cstruct 
				emr: EMR
				rclBounds: RECT
				xDest: integer
				yDest: integer
				xSrc: integer
				ySrc: integer
				cxSrc: integer
				cySrc: integer
				offBmiSrc: integer
				cbBmiSrc: integer
				offBitsSrc: integer
				cbBitsSrc: integer
				iUsageSrc: integer
				iStartScan: integer
				cScans: integer 
			end 
		PtrEMRSETDIBITSTODEVICE = unsafe pointer to EMRSETDIBITSTODEVICE
		EMRSTRETCHDIBITS = cstruct 
				emr: EMR
				rclBounds: RECT
				xDest: integer
				yDest: integer
				xSrc: integer
				ySrc: integer
				cxSrc: integer
				cySrc: integer
				offBmiSrc: integer
				cbBmiSrc: integer
				offBitsSrc: integer
				cbBitsSrc: integer
				iUsageSrc: integer
				dwRop: integer
				cxDest: integer
				cyDest: integer 
			end 
		PtrEMRSTRETCHDIBITS = unsafe pointer to EMRSTRETCHDIBITS
		EMREXTCREATEFONTINDIRECTW = cstruct 
				emr: EMR
				ihFont: integer
				elfw: EXTLOGFONTW 
			end 
		PtrEMREXTCREATEFONTINDIRECTW = unsafe pointer to EMREXTCREATEFONTINDIRECTW
		EMRCREATEPALETTE = cstruct 
				emr: EMR
				ihPal: integer
				lgpl: LOGPALETTE 
			end 
		PtrEMRCREATEPALETTE = unsafe pointer to EMRCREATEPALETTE
		EMRCREATECOLORSPACE = cstruct 
				emr: EMR
				ihCS: integer
				lcs: LOGCOLORSPACEW 
			end 
		PtrEMRCREATECOLORSPACE = unsafe pointer to EMRCREATECOLORSPACE
		EMRCREATEPEN = cstruct 
				emr: EMR
				ihPen: integer
				lopn: LOGPEN 
			end 
		PtrEMRCREATEPEN = unsafe pointer to EMRCREATEPEN
		EMREXTCREATEPEN = cstruct 
				emr: EMR
				ihPen: integer
				offBmi: integer
				cbBmi: integer
				offBits: integer
				cbBits: integer
				elp: EXTLOGPEN 
			end 
		PtrEMREXTCREATEPEN = unsafe pointer to EMREXTCREATEPEN
		EMRCREATEBRUSHINDIRECT = cstruct 
				emr: EMR
				ihBrush: integer
				lb: LOGBRUSH 
			end 
		PtrEMRCREATEBRUSHINDIRECT = unsafe pointer to EMRCREATEBRUSHINDIRECT
		EMRCREATEMONOBRUSH = cstruct 
				emr: EMR
				ihBrush: integer
				iUsage: integer
				offBmi: integer
				cbBmi: integer
				offBits: integer
				cbBits: integer 
			end 
		PtrEMRCREATEMONOBRUSH = unsafe pointer to EMRCREATEMONOBRUSH
		EMRCREATEDIBPATTERNBRUSHPT = cstruct 
				emr: EMR
				ihBrush: integer
				iUsage: integer
				offBmi: integer
				cbBmi: integer
				offBits: integer
				cbBits: integer 
			end 
		PtrEMRCREATEDIBPATTERNBRUSHPT = unsafe pointer to EMRCREATEDIBPATTERNBRUSHPT
		EMRFORMAT = cstruct 
				dSignature: integer
				nVersion: integer
				cbData: integer
				offData: integer 
			end 
		PtrEMRFORMAT = unsafe pointer to EMRFORMAT
		EMRGLSRECORD = cstruct 
				emr: EMR
				cbData: integer
				Data: carray 1 of char 
			end 
		PtrEMRGLSRECORD = unsafe pointer to EMRGLSRECORD
		EMRGLSBOUNDEDRECORD = cstruct 
				emr: EMR
				rclBounds: RECT
				cbData: integer
				Data: carray 1 of char 
			end 
		PtrEMRGLSBOUNDEDRECORD = unsafe pointer to EMRGLSBOUNDEDRECORD
		EMRPIXELFORMAT = cstruct 
				emr: EMR
				pfd: PIXELFORMATDESCRIPTOR 
			end 
		PtrEMRPIXELFORMAT = unsafe pointer to EMRPIXELFORMAT
		POINTFLOAT = cstruct 
				x: real
				y: real 
			end 
		PtrPOINTFLOAT = unsafe pointer to POINTFLOAT
		GLYPHMETRICSFLOAT = cstruct 
				gmfBlackBoxX: real
				gmfBlackBoxY: real
				gmfptGlyphOrigin: POINTFLOAT
				gmfCellIncX: real
				gmfCellIncY: real 
			end 
		PtrGLYPHMETRICSFLOAT = unsafe pointer to GLYPHMETRICSFLOAT
		LAYERPLANEDESCRIPTOR = cstruct 
				nSize: shortint
				nVersion: shortint
				dwFlags: set
				iPixelType: char
				cColorBits: char
				cRedBits: char
				cRedShift: char
				cGreenBits: char
				cGreenShift: char
				cBlueBits: char
				cBlueShift: char
				cAlphaBits: char
				cAlphaShift: char
				cAccumBits: char
				cAccumRedBits: char
				cAccumGreenBits: char
				cAccumBlueBits: char
				cAccumAlphaBits: char
				cDepthBits: char
				cStencilBits: char
				cAuxBuffers: char
				iLayerPlane: char
				bReserved: char
				crTransparent: COLORREF 
			end 
		PtrLAYERPLANEDESCRIPTOR = unsafe pointer to LAYERPLANEDESCRIPTOR
		HDWP = HANDLE
		MENUTEMPLATEA = cstruct end 
		PtrMENUTEMPLATEA = unsafe pointer to MENUTEMPLATEA
		MENUTEMPLATEW = cstruct end 
		PtrMENUTEMPLATEW = unsafe pointer to MENUTEMPLATEW
		MENUTEMPLATE = cstruct end 
		PtrMENUTEMPLATE = unsafe pointer to MENUTEMPLATE
		LPMENUTEMPLATEA = PtrVoid
		LPMENUTEMPLATEW = PtrVoid
		LPMENUTEMPLATE = LPMENUTEMPLATEA
		WNDPROC = proc (p0: HWND; p1: integer; p2: WPARAM; p3: LPARAM): LRESULT
		DLGPROC = proc (): integer
		TIMERPROC = proc (): integer
		GRAYSTRINGPROC = proc (): integer
		WNDENUMPROC = proc (): integer
		HOOKPROC = proc (): integer
		SENDASYNCPROC = proc (): integer
		EDITWORDBREAKPROCA = proc (): integer
		EDITWORDBREAKPROCW = proc (): integer
		ROPENUMPROCA = proc (): integer
		ROPENUMPROCW = proc (): integer
		ROPENUMPROCEXA = proc (): integer
		ROPENUMPROCEXW = proc (): integer
		DRAWSTATEPROC = proc (): integer
		ROPENUMPROC = proc (): integer
		ROPENUMPROCEX = proc (): integer
		EDITWORDBREAKPROC = proc (): integer
		NAMEENUMPROCA = proc (): integer
		NAMEENUMPROCW = proc (): integer
		WINSTAENUMPROCA = proc (): integer
		DESKTOPENUMPROCA = proc (): integer
		WINSTAENUMPROCW = proc (): integer
		DESKTOPENUMPROCW = proc (): integer
		WINSTAENUMPROC = proc (): integer
		DESKTOPENUMPROC = proc (): integer
		PtrCREATESTRUCTA = unsafe pointer to CREATESTRUCTA
		CBT_CREATEWNDA = cstruct 
				lpcs: PtrCREATESTRUCTA
				hwndInsertAfter: HWND 
			end 
		PtrCBT_CREATEWNDA = unsafe pointer to CBT_CREATEWNDA
		PtrCREATESTRUCTW = unsafe pointer to CREATESTRUCTW
		CBT_CREATEWNDW = cstruct 
				lpcs: PtrCREATESTRUCTW
				hwndInsertAfter: HWND 
			end 
		PtrCBT_CREATEWNDW = unsafe pointer to CBT_CREATEWNDW
		CBT_CREATEWND = CBT_CREATEWNDA
		PtrCBT_CREATEWND = PtrCBT_CREATEWNDA
		CBTACTIVATESTRUCT = cstruct 
				fMouse: BOOL
				hWndActive: HWND 
			end 
		PtrCBTACTIVATESTRUCT = unsafe pointer to CBTACTIVATESTRUCT
		EVENTMSG = cstruct 
				message: integer
				paramL: integer
				paramH: integer
				time: integer
				hwnd: HWND 
			end 
		PtrEVENTMSG = unsafe pointer to EVENTMSG
		CWPSTRUCT = cstruct 
				lParam: LPARAM
				wParam: WPARAM
				message: integer
				hwnd: HWND 
			end 
		PtrCWPSTRUCT = unsafe pointer to CWPSTRUCT
		CWPRETSTRUCT = cstruct 
				lResult: LRESULT
				lParam: LPARAM
				wParam: WPARAM
				message: integer
				hwnd: HWND 
			end 
		PtrCWPRETSTRUCT = unsafe pointer to CWPRETSTRUCT
		DEBUGHOOKINFO = cstruct 
				idThread: integer
				idThreadInstaller: integer
				lParam: LPARAM
				wParam: WPARAM
				code: integer 
			end 
		PtrDEBUGHOOKINFO = unsafe pointer to DEBUGHOOKINFO
		MOUSEHOOKSTRUCT = cstruct 
				pt: POINT
				hwnd: HWND
				wHitTestCode: integer
				dwExtraInfo: integer 
			end 
		PtrMOUSEHOOKSTRUCT = unsafe pointer to MOUSEHOOKSTRUCT
		HARDWAREHOOKSTRUCT = cstruct 
				hwnd: HWND
				message: integer
				wParam: WPARAM
				lParam: LPARAM 
			end 
		PtrHARDWAREHOOKSTRUCT = unsafe pointer to HARDWAREHOOKSTRUCT
		USEROBJECTFLAGS = cstruct 
				fInherit: BOOL
				fReserved: BOOL
				dwFlags: set 
			end 
		PtrUSEROBJECTFLAGS = unsafe pointer to USEROBJECTFLAGS
		WNDCLASSEXA = cstruct 
				cbSize: integer
				style: set
				lpfnWndProc: WNDPROC
				cbClsExtra: integer
				cbWndExtra: integer
				hInstance: HINSTANCE
				hIcon: HICON
				hCursor: HCURSOR
				hbrBackground: HBRUSH
				lpszMenuName: PtrSTR
				lpszClassName: PtrSTR
				hIconSm: HICON 
			end 
		PtrWNDCLASSEXA = unsafe pointer to WNDCLASSEXA
		WNDCLASSEXW = cstruct 
				cbSize: integer
				style: set
				lpfnWndProc: WNDPROC
				cbClsExtra: integer
				cbWndExtra: integer
				hInstance: HINSTANCE
				hIcon: HICON
				hCursor: HCURSOR
				hbrBackground: HBRUSH
				lpszMenuName: PtrWSTR
				lpszClassName: PtrWSTR
				hIconSm: HICON 
			end 
		PtrWNDCLASSEXW = unsafe pointer to WNDCLASSEXW
		WNDCLASSEX = WNDCLASSEXA
		PtrWNDCLASSEX = PtrWNDCLASSEXA
		WNDCLASSA = cstruct 
				style: set
				lpfnWndProc: WNDPROC
				cbClsExtra: integer
				cbWndExtra: integer
				hInstance: HINSTANCE
				hIcon: HICON
				hCursor: HCURSOR
				hbrBackground: HBRUSH
				lpszMenuName: PtrSTR
				lpszClassName: PtrSTR 
			end 
		PtrWNDCLASSA = unsafe pointer to WNDCLASSA
		WNDCLASSW = cstruct 
				style: set
				lpfnWndProc: WNDPROC
				cbClsExtra: integer
				cbWndExtra: integer
				hInstance: HINSTANCE
				hIcon: HICON
				hCursor: HCURSOR
				hbrBackground: HBRUSH
				lpszMenuName: PtrWSTR
				lpszClassName: PtrWSTR 
			end 
		PtrWNDCLASSW = unsafe pointer to WNDCLASSW
		WNDCLASS = WNDCLASSA
		PtrWNDCLASS = PtrWNDCLASSA
		MSG = cstruct 
				hwnd: HWND
				message: integer
				wParam: WPARAM
				lParam: LPARAM
				time: integer
				pt: POINT 
			end 
		PtrMSG = unsafe pointer to MSG
		MINMAXINFO = cstruct 
				ptReserved: POINT
				ptMaxSize: POINT
				ptMaxPosition: POINT
				ptMinTrackSize: POINT
				ptMaxTrackSize: POINT 
			end 
		PtrMINMAXINFO = unsafe pointer to MINMAXINFO
		COPYDATASTRUCT = cstruct 
				dwData: integer
				cbData: integer
				lpData: PtrVoid 
			end 
		PtrCOPYDATASTRUCT = unsafe pointer to COPYDATASTRUCT
		MDINEXTMENU = cstruct 
				hmenuIn: HMENU
				hmenuNext: HMENU
				hwndNext: HWND 
			end 
		PtrMDINEXTMENU = unsafe pointer to MDINEXTMENU
		WINDOWPOS = cstruct 
				hwnd: HWND
				hwndInsertAfter: HWND
				x: integer
				y: integer
				cx: integer
				cy: integer
				flags: set 
			end 
		PtrWINDOWPOS = unsafe pointer to WINDOWPOS
		NCCALCSIZE_PARAMS = cstruct 
				rgrc: carray 3 of RECT
				lppos: PtrWINDOWPOS 
			end 
		PtrNCCALCSIZE_PARAMS = unsafe pointer to NCCALCSIZE_PARAMS
		ACCEL = cstruct 
				fVirt: char
				key: shortint
				cmd: shortint 
			end 
		PtrACCEL = unsafe pointer to ACCEL
		PAINTSTRUCT = cstruct 
				hdc: HDC
				fErase: BOOL
				rcPaint: RECT
				fRestore: BOOL
				fIncUpdate: BOOL
				rgbReserved: carray 32 of char 
			end 
		PtrPAINTSTRUCT = unsafe pointer to PAINTSTRUCT
		CREATESTRUCTA = cstruct 
				lpCreateParams: PtrVoid
				hInstance: HINSTANCE
				hMenu: HMENU
				hwndParent: HWND
				cy: integer
				cx: integer
				y: integer
				x: integer
				style: set
				lpszName: PtrSTR
				lpszClass: PtrSTR
				dwExStyle: set 
			end 
		CREATESTRUCTW = cstruct 
				lpCreateParams: PtrVoid
				hInstance: HINSTANCE
				hMenu: HMENU
				hwndParent: HWND
				cy: integer
				cx: integer
				y: integer
				x: integer
				style: set
				lpszName: PtrWSTR
				lpszClass: PtrWSTR
				dwExStyle: set 
			end 
		CREATESTRUCT = CREATESTRUCTA
		PtrCREATESTRUCT = PtrCREATESTRUCTA
		WINDOWPLACEMENT = cstruct 
				length: integer
				flags: set
				showCmd: integer
				ptMinPosition: POINT
				ptMaxPosition: POINT
				rcNormalPosition: RECT 
			end 
		PtrWINDOWPLACEMENT = unsafe pointer to WINDOWPLACEMENT
		NMHDR = cstruct 
				hwndFrom: HWND
				idFrom: integer
				code: integer 
			end 
		PtrNMHDR = unsafe pointer to NMHDR
		STYLESTRUCT = cstruct 
				styleOld: set
				styleNew: set 
			end 
		PtrSTYLESTRUCT = unsafe pointer to STYLESTRUCT
		MEASUREITEMSTRUCT = cstruct 
				CtlType: set
				CtlID: integer
				itemID: integer
				itemWidth: integer
				itemHeight: integer
				itemData: integer 
			end 
		PtrMEASUREITEMSTRUCT = unsafe pointer to MEASUREITEMSTRUCT
		DRAWITEMSTRUCT = cstruct 
				CtlType: set
				CtlID: integer
				itemID: integer
				itemAction: set
				itemState: set
				hwndItem: HWND
				hDC: HDC
				rcItem: RECT
				itemData: integer 
			end 
		PtrDRAWITEMSTRUCT = unsafe pointer to DRAWITEMSTRUCT
		DELETEITEMSTRUCT = cstruct 
				CtlType: set
				CtlID: integer
				itemID: integer
				hwndItem: HWND
				itemData: integer 
			end 
		PtrDELETEITEMSTRUCT = unsafe pointer to DELETEITEMSTRUCT
		COMPAREITEMSTRUCT = cstruct 
				CtlType: set
				CtlID: integer
				hwndItem: HWND
				itemID1: integer
				itemData1: integer
				itemID2: integer
				itemData2: integer
				dwLocaleId: integer 
			end 
		PtrCOMPAREITEMSTRUCT = unsafe pointer to COMPAREITEMSTRUCT
		BROADCASTSYSMSG = cstruct 
				uiMessage: integer
				wParam: WPARAM
				lParam: LPARAM 
			end 
		PtrBROADCASTSYSMSG = unsafe pointer to BROADCASTSYSMSG
		DLGTEMPLATE = cstruct 
				style: set
				dwExtendedStyle: set
				cdit: shortint
				x: shortint
				y: shortint
				cx: shortint
				cy: shortint 
			end 
		PtrDLGTEMPLATE = unsafe pointer to DLGTEMPLATE
		DLGITEMTEMPLATE = cstruct 
				style: set
				dwExtendedStyle: set
				x: shortint
				y: shortint
				cx: shortint
				cy: shortint
				id: shortint 
			end 
		PtrDLGITEMTEMPLATE = unsafe pointer to DLGITEMTEMPLATE
		TPMPARAMS = cstruct 
				cbSize: integer
				rcExclude: RECT 
			end 
		PtrTPMPARAMS = unsafe pointer to TPMPARAMS
		MENUITEMINFOA = cstruct 
				cbSize: integer
				fMask: set
				fType: set
				fState: set
				wID: integer
				hSubMenu: HMENU
				hbmpChecked: HBITMAP
				hbmpUnchecked: HBITMAP
				dwItemData: integer
				dwTypeData: PtrSTR
				cch: integer 
			end 
		PtrMENUITEMINFOA = unsafe pointer to MENUITEMINFOA
		MENUITEMINFOW = cstruct 
				cbSize: integer
				fMask: set
				fType: set
				fState: set
				wID: integer
				hSubMenu: HMENU
				hbmpChecked: HBITMAP
				hbmpUnchecked: HBITMAP
				dwItemData: integer
				dwTypeData: PtrWSTR
				cch: integer 
			end 
		PtrMENUITEMINFOW = unsafe pointer to MENUITEMINFOW
		MENUITEMINFO = MENUITEMINFOA
		PtrMENUITEMINFO = PtrMENUITEMINFOA
		DROPSTRUCT = cstruct 
				hwndSource: HWND
				hwndSink: HWND
				wFmt: integer
				dwData: integer
				ptDrop: POINT
				dwControlData: integer 
			end 
		PtrDROPSTRUCT = unsafe pointer to DROPSTRUCT
		DRAWTEXTPARAMS = cstruct 
				cbSize: integer
				iTabLength: integer
				iLeftMargin: integer
				iRightMargin: integer
				uiLengthDrawn: integer 
			end 
		PtrDRAWTEXTPARAMS = unsafe pointer to DRAWTEXTPARAMS
		HELPINFO = cstruct 
				cbSize: integer
				iContextType: integer
				iCtrlId: integer
				hItemHandle: HANDLE
				dwContextId: integer
				MousePos: POINT 
			end 
		PtrHELPINFO = unsafe pointer to HELPINFO
		MSGBOXCALLBACK = proc (var lpHelpInfo: HELPINFO)
		MSGBOXPARAMSA = cstruct 
				cbSize: integer
				hwndOwner: HWND
				hInstance: HINSTANCE
				lpszText: PtrSTR
				lpszCaption: PtrSTR
				dwStyle: set
				lpszIcon: PtrSTR
				dwContextHelpId: integer
				lpfnMsgBoxCallback: MSGBOXCALLBACK
				dwLanguageId: integer 
			end 
		PtrMSGBOXPARAMSA = unsafe pointer to MSGBOXPARAMSA
		MSGBOXPARAMSW = cstruct 
				cbSize: integer
				hwndOwner: HWND
				hInstance: HINSTANCE
				lpszText: PtrWSTR
				lpszCaption: PtrWSTR
				dwStyle: set
				lpszIcon: PtrWSTR
				dwContextHelpId: integer
				lpfnMsgBoxCallback: MSGBOXCALLBACK
				dwLanguageId: integer 
			end 
		PtrMSGBOXPARAMSW = unsafe pointer to MSGBOXPARAMSW
		MSGBOXPARAMS = MSGBOXPARAMSA
		PtrMSGBOXPARAMS = PtrMSGBOXPARAMSA
		MENUITEMTEMPLATEHEADER = cstruct 
				versionNumber: shortint
				offset: shortint 
			end 
		PtrMENUITEMTEMPLATEHEADER = unsafe pointer to MENUITEMTEMPLATEHEADER
		MENUITEMTEMPLATE = cstruct 
				mtOption: shortint
				mtID: shortint
				mtString: carray 1 of wchar 
			end 
		PtrMENUITEMTEMPLATE = unsafe pointer to MENUITEMTEMPLATE
		ICONINFO = cstruct 
				fIcon: BOOL
				xHotspot: integer
				yHotspot: integer
				hbmMask: HBITMAP
				hbmColor: HBITMAP 
			end 
		PtrICONINFO = unsafe pointer to ICONINFO
		CURSORSHAPE = cstruct 
				xHotSpot: integer
				yHotSpot: integer
				cx: integer
				cy: integer
				cbWidth: integer
				Planes: char
				BitsPixel: char 
			end 
		PtrCURSORSHAPE = unsafe pointer to CURSORSHAPE
		SCROLLINFO = cstruct 
				cbSize: integer
				fMask: set
				nMin: integer
				nMax: integer
				nPage: integer
				nPos: integer
				nTrackPos: integer 
			end 
		PtrSCROLLINFO = unsafe pointer to SCROLLINFO
		MDICREATESTRUCTA = cstruct 
				szClass: PtrSTR
				szTitle: PtrSTR
				hOwner: HANDLE
				x: integer
				y: integer
				cx: integer
				cy: integer
				style: set
				lParam: LPARAM 
			end 
		PtrMDICREATESTRUCTA = unsafe pointer to MDICREATESTRUCTA
		MDICREATESTRUCTW = cstruct 
				szClass: PtrWSTR
				szTitle: PtrWSTR
				hOwner: HANDLE
				x: integer
				y: integer
				cx: integer
				cy: integer
				style: set
				lParam: LPARAM 
			end 
		PtrMDICREATESTRUCTW = unsafe pointer to MDICREATESTRUCTW
		MDICREATESTRUCT = MDICREATESTRUCTA
		PtrMDICREATESTRUCT = PtrMDICREATESTRUCTA
		CLIENTCREATESTRUCT = cstruct 
				hWindowMenu: HANDLE
				idFirstChild: integer 
			end 
		PtrCLIENTCREATESTRUCT = unsafe pointer to CLIENTCREATESTRUCT
		HELPPOLY = integer
		MULTIKEYHELPA = cstruct 
				mkSize: integer
				mkKeylist: char
				szKeyphrase: carray 1 of char 
			end 
		PtrMULTIKEYHELPA = unsafe pointer to MULTIKEYHELPA
		MULTIKEYHELPW = cstruct 
				mkSize: integer
				mkKeylist: wchar
				szKeyphrase: carray 1 of wchar 
			end 
		PtrMULTIKEYHELPW = unsafe pointer to MULTIKEYHELPW
		MULTIKEYHELP = MULTIKEYHELPA
		PtrMULTIKEYHELP = PtrMULTIKEYHELPA
		HELPWININFOA = cstruct 
				wStructSize: integer
				x: integer
				y: integer
				dx: integer
				dy: integer
				wMax: integer
				rgchMember: carray 2 of char 
			end 
		PtrHELPWININFOA = unsafe pointer to HELPWININFOA
		HELPWININFOW = cstruct 
				wStructSize: integer
				x: integer
				y: integer
				dx: integer
				dy: integer
				wMax: integer
				rgchMember: carray 2 of wchar 
			end 
		PtrHELPWININFOW = unsafe pointer to HELPWININFOW
		HELPWININFO = HELPWININFOA
		PtrHELPWININFO = PtrHELPWININFOA
		NONCLIENTMETRICSA = cstruct 
				cbSize: integer
				iBorderWidth: integer
				iScrollWidth: integer
				iScrollHeight: integer
				iCaptionWidth: integer
				iCaptionHeight: integer
				lfCaptionFont: LOGFONTA
				iSmCaptionWidth: integer
				iSmCaptionHeight: integer
				lfSmCaptionFont: LOGFONTA
				iMenuWidth: integer
				iMenuHeight: integer
				lfMenuFont: LOGFONTA
				lfStatusFont: LOGFONTA
				lfMessageFont: LOGFONTA 
			end 
		PtrNONCLIENTMETRICSA = unsafe pointer to NONCLIENTMETRICSA
		NONCLIENTMETRICSW = cstruct 
				cbSize: integer
				iBorderWidth: integer
				iScrollWidth: integer
				iScrollHeight: integer
				iCaptionWidth: integer
				iCaptionHeight: integer
				lfCaptionFont: LOGFONTW
				iSmCaptionWidth: integer
				iSmCaptionHeight: integer
				lfSmCaptionFont: LOGFONTW
				iMenuWidth: integer
				iMenuHeight: integer
				lfMenuFont: LOGFONTW
				lfStatusFont: LOGFONTW
				lfMessageFont: LOGFONTW 
			end 
		PtrNONCLIENTMETRICSW = unsafe pointer to NONCLIENTMETRICSW
		NONCLIENTMETRICS = NONCLIENTMETRICSA
		PtrNONCLIENTMETRICS = PtrNONCLIENTMETRICSA
		MINIMIZEDMETRICS = cstruct 
				cbSize: integer
				iWidth: integer
				iHorzGap: integer
				iVertGap: integer
				iArrange: integer 
			end 
		PtrMINIMIZEDMETRICS = unsafe pointer to MINIMIZEDMETRICS
		ICONMETRICSA = cstruct 
				cbSize: integer
				iHorzSpacing: integer
				iVertSpacing: integer
				iTitleWrap: integer
				lfFont: LOGFONTA 
			end 
		PtrICONMETRICSA = unsafe pointer to ICONMETRICSA
		ICONMETRICSW = cstruct 
				cbSize: integer
				iHorzSpacing: integer
				iVertSpacing: integer
				iTitleWrap: integer
				lfFont: LOGFONTW 
			end 
		PtrICONMETRICSW = unsafe pointer to ICONMETRICSW
		ICONMETRICS = ICONMETRICSA
		PtrICONMETRICS = PtrICONMETRICSA
		ANIMATIONINFO = cstruct 
				cbSize: integer
				iMinAnimate: integer 
			end 
		PtrANIMATIONINFO = unsafe pointer to ANIMATIONINFO
		SERIALKEYSA = cstruct 
				cbSize: integer
				dwFlags: set
				lpszActivePort: PtrSTR
				lpszPort: PtrSTR
				iBaudRate: integer
				iPortState: integer
				iActive: integer 
			end 
		PtrSERIALKEYSA = unsafe pointer to SERIALKEYSA
		SERIALKEYSW = cstruct 
				cbSize: integer
				dwFlags: set
				lpszActivePort: PtrWSTR
				lpszPort: PtrWSTR
				iBaudRate: integer
				iPortState: integer
				iActive: integer 
			end 
		PtrSERIALKEYSW = unsafe pointer to SERIALKEYSW
		SERIALKEYS = SERIALKEYSA
		PtrSERIALKEYS = PtrSERIALKEYSA
		HIGHCONTRASTA = cstruct 
				cbSize: integer
				dwFlags: set
				lpszDefaultScheme: PtrSTR 
			end 
		PtrHIGHCONTRASTA = unsafe pointer to HIGHCONTRASTA
		HIGHCONTRASTW = cstruct 
				cbSize: integer
				dwFlags: set
				lpszDefaultScheme: PtrWSTR 
			end 
		PtrHIGHCONTRASTW = unsafe pointer to HIGHCONTRASTW
		HIGHCONTRAST = HIGHCONTRASTA
		PtrHIGHCONTRAST = PtrHIGHCONTRASTA
		FILTERKEYS = cstruct 
				cbSize: integer
				dwFlags: set
				iWaitMSec: integer
				iDelayMSec: integer
				iRepeatMSec: integer
				iBounceMSec: integer 
			end 
		PtrFILTERKEYS = unsafe pointer to FILTERKEYS
		STICKYKEYS = cstruct 
				cbSize: integer
				dwFlags: set 
			end 
		PtrSTICKYKEYS = unsafe pointer to STICKYKEYS
		MOUSEKEYS = cstruct 
				cbSize: integer
				dwFlags: set
				iMaxSpeed: integer
				iTimeToMaxSpeed: integer
				iCtrlSpeed: integer
				dwReserved1: integer
				dwReserved2: integer 
			end 
		PtrMOUSEKEYS = unsafe pointer to MOUSEKEYS
		ACCESSTIMEOUT = cstruct 
				cbSize: integer
				dwFlags: set
				iTimeOutMSec: integer 
			end 
		PtrACCESSTIMEOUT = unsafe pointer to ACCESSTIMEOUT
		SOUNDSENTRYA = cstruct 
				cbSize: integer
				dwFlags: set
				iFSTextEffect: integer
				iFSTextEffectMSec: integer
				iFSTextEffectColorBits: integer
				iFSGrafEffect: integer
				iFSGrafEffectMSec: integer
				iFSGrafEffectColor: integer
				iWindowsEffect: integer
				iWindowsEffectMSec: integer
				lpszWindowsEffectDLL: PtrSTR
				iWindowsEffectOrdinal: integer 
			end 
		PtrSOUNDSENTRYA = unsafe pointer to SOUNDSENTRYA
		SOUNDSENTRYW = cstruct 
				cbSize: integer
				dwFlags: set
				iFSTextEffect: integer
				iFSTextEffectMSec: integer
				iFSTextEffectColorBits: integer
				iFSGrafEffect: integer
				iFSGrafEffectMSec: integer
				iFSGrafEffectColor: integer
				iWindowsEffect: integer
				iWindowsEffectMSec: integer
				lpszWindowsEffectDLL: PtrWSTR
				iWindowsEffectOrdinal: integer 
			end 
		PtrSOUNDSENTRYW = unsafe pointer to SOUNDSENTRYW
		SOUNDSENTRY = SOUNDSENTRYA
		PtrSOUNDSENTRY = PtrSOUNDSENTRYA
		TOGGLEKEYS = cstruct 
				cbSize: integer
				dwFlags: set 
			end 
		PtrTOGGLEKEYS = unsafe pointer to TOGGLEKEYS
		LCTYPE = integer
		CALTYPE = integer
		CALID = integer
		CPINFO = cstruct 
				MaxCharSize: integer
				DefaultChar: carray 2 of char
				LeadByte: carray 12 of char 
			end 
		PtrCPINFO = unsafe pointer to CPINFO
		NUMBERFMTA = cstruct 
				NumDigits: integer
				LeadingZero: integer
				Grouping: integer
				lpDecimalSep: PtrSTR
				lpThousandSep: PtrSTR
				NegativeOrder: integer 
			end 
		PtrNUMBERFMTA = unsafe pointer to NUMBERFMTA
		NUMBERFMTW = cstruct 
				NumDigits: integer
				LeadingZero: integer
				Grouping: integer
				lpDecimalSep: PtrWSTR
				lpThousandSep: PtrWSTR
				NegativeOrder: integer 
			end 
		PtrNUMBERFMTW = unsafe pointer to NUMBERFMTW
		NUMBERFMT = NUMBERFMTA
		PtrNUMBERFMT = PtrNUMBERFMTA
		CURRENCYFMTA = cstruct 
				NumDigits: integer
				LeadingZero: integer
				Grouping: integer
				lpDecimalSep: PtrSTR
				lpThousandSep: PtrSTR
				NegativeOrder: integer
				PositiveOrder: integer
				lpCurrencySymbol: PtrSTR 
			end 
		PtrCURRENCYFMTA = unsafe pointer to CURRENCYFMTA
		CURRENCYFMTW = cstruct 
				NumDigits: integer
				LeadingZero: integer
				Grouping: integer
				lpDecimalSep: PtrWSTR
				lpThousandSep: PtrWSTR
				NegativeOrder: integer
				PositiveOrder: integer
				lpCurrencySymbol: PtrWSTR 
			end 
		PtrCURRENCYFMTW = unsafe pointer to CURRENCYFMTW
		CURRENCYFMT = CURRENCYFMTA
		PtrCURRENCYFMT = PtrCURRENCYFMTA
		LOCALE_ENUMPROCA = proc (): integer
		CODEPAGE_ENUMPROCA = proc (): integer
		DATEFMT_ENUMPROCA = proc (): integer
		TIMEFMT_ENUMPROCA = proc (): integer
		CALINFO_ENUMPROCA = proc (): integer
		LOCALE_ENUMPROCW = proc (): integer
		CODEPAGE_ENUMPROCW = proc (): integer
		DATEFMT_ENUMPROCW = proc (): integer
		TIMEFMT_ENUMPROCW = proc (): integer
		CALINFO_ENUMPROCW = proc (): integer
		COORD = cstruct 
				X: shortint
				Y: shortint 
			end 
		PtrCOORD = unsafe pointer to COORD
		SMALL_RECT = cstruct 
				Left: shortint
				Top: shortint
				Right: shortint
				Bottom: shortint 
			end 
		PtrSMALL_RECT = unsafe pointer to SMALL_RECT
		KEY_EVENT_RECORD = cstruct 
				bKeyDown: BOOL
				wRepeatCount: shortint
				wVirtualKeyCode: shortint
				wVirtualScanCode: shortint
				uChar: cstruct 
						UnicodeChar: wchar
						AsciiChar: char 
					end 
				dwControlKeyState: set 
			end 
		PtrKEY_EVENT_RECORD = unsafe pointer to KEY_EVENT_RECORD
		MOUSE_EVENT_RECORD = cstruct 
				dwMousePosition: COORD
				dwButtonState: set
				dwControlKeyState: set
				dwEventFlags: set 
			end 
		PtrMOUSE_EVENT_RECORD = unsafe pointer to MOUSE_EVENT_RECORD
		WINDOW_BUFFER_SIZE_RECORD = cstruct 
				dwSize: COORD 
			end 
		PtrWINDOW_BUFFER_SIZE_RECORD = unsafe pointer to WINDOW_BUFFER_SIZE_RECORD
		MENU_EVENT_RECORD = cstruct 
				dwCommandId: integer 
			end 
		PtrMENU_EVENT_RECORD = unsafe pointer to MENU_EVENT_RECORD
		FOCUS_EVENT_RECORD = cstruct 
				bSetFocus: BOOL 
			end 
		PtrFOCUS_EVENT_RECORD = unsafe pointer to FOCUS_EVENT_RECORD
		INPUT_RECORD = cstruct 
				EventType: shortint
				Event: cstruct 
						KeyEvent: KEY_EVENT_RECORD
						MouseEvent: MOUSE_EVENT_RECORD
						WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD
						MenuEvent: MENU_EVENT_RECORD
						FocusEvent: FOCUS_EVENT_RECORD 
					end  
			end 
		PtrINPUT_RECORD = unsafe pointer to INPUT_RECORD
		CHAR_INFO = cstruct 
				Char: cstruct 
						UnicodeChar: wchar
						AsciiChar: char 
					end 
				Attributes: shortint 
			end 
		PtrCHAR_INFO = unsafe pointer to CHAR_INFO
		CONSOLE_SCREEN_BUFFER_INFO = cstruct 
				dwSize: COORD
				dwCursorPosition: COORD
				wAttributes: shortint
				srWindow: SMALL_RECT
				dwMaximumWindowSize: COORD 
			end 
		PtrCONSOLE_SCREEN_BUFFER_INFO = unsafe pointer to CONSOLE_SCREEN_BUFFER_INFO
		CONSOLE_CURSOR_INFO = cstruct 
				dwSize: integer
				bVisible: BOOL 
			end 
		PtrCONSOLE_CURSOR_INFO = unsafe pointer to CONSOLE_CURSOR_INFO
		HANDLER_ROUTINE = proc (CtrlType: integer): BOOL
		VS_FIXEDFILEINFO = cstruct 
				dwSignature: integer
				dwStrucVersion: integer
				dwFileVersionMS: integer
				dwFileVersionLS: integer
				dwProductVersionMS: integer
				dwProductVersionLS: integer
				dwFileFlagsMask: set
				dwFileFlags: set
				dwFileOS: set
				dwFileType: integer
				dwFileSubtype: integer
				dwFileDateMS: integer
				dwFileDateLS: integer 
			end 
		REGSAM = ACCESS_MASK
		HKEY = HANDLE
		val_context = cstruct 
				valuelen: integer
				value_context: PtrVoid
				val_buff_ptr: PtrVoid 
			end 
		Ptrval_context = unsafe pointer to val_context
		PVALUEA = cstruct 
				pv_valuename: PtrSTR
				pv_valuelen: integer
				pv_value_context: PtrVoid
				pv_type: integer 
			end 
		PtrPVALUEA = unsafe pointer to PVALUEA
		PVALUEW = cstruct 
				pv_valuename: PtrWSTR
				pv_valuelen: integer
				pv_value_context: PtrVoid
				pv_type: integer 
			end 
		PtrPVALUEW = unsafe pointer to PVALUEW
		PVALUE = PVALUEA
		PtrPVALUE = PtrPVALUEA
		QUERYHANDLER = proc (keycontext: PtrVoid; var val_list: val_context; num_vals: integer; outputbuffer: PtrVoid; var total_outlen: integer; input_blen: integer): integer
		REG_PROVIDER = cstruct 
				pi_R0_1val: QUERYHANDLER
				pi_R0_allvals: QUERYHANDLER
				pi_R3_1val: QUERYHANDLER
				pi_R3_allvals: QUERYHANDLER
				pi_flags: integer
				pi_key_context: PtrVoid 
			end 
		PtrREG_PROVIDER = unsafe pointer to REG_PROVIDER
		VALENTA = cstruct 
				ve_valuename: PtrSTR
				ve_valuelen: integer
				ve_valueptr: integer
				ve_type: integer 
			end 
		PtrVALENTA = unsafe pointer to VALENTA
		VALENTW = cstruct 
				ve_valuename: PtrWSTR
				ve_valuelen: integer
				ve_valueptr: integer
				ve_type: integer 
			end 
		PtrVALENTW = unsafe pointer to VALENTW
		VALENT = VALENTA
		PtrVALENT = PtrVALENTA
		DDEACK = cstruct 
				fBits0: shortint 
			// bAppReturnCode*: INTEGER; (8 bits)
			// reserved*: INTEGER; (6 bits)
			// fBusy*: INTEGER; (1 bits)
			// fAck*: INTEGER; (1 bits)
			end 
		DDEADVISE = cstruct 
				fBits0: shortint
				// reserved*: INTEGER; (14 bits)
				// fDeferUpd*: INTEGER; (1 bits)
				// fAckReq*: INTEGER; (1 bits)
				cfFormat: shortint 
			end 
		DDEDATA = cstruct 
				fBits0: shortint
				// unused*: INTEGER; (12 bits)
				// fResponse*: INTEGER; (1 bits)
				// fRelease*: INTEGER; (1 bits)
				// reserved*: INTEGER; (1 bits)
				// fAckReq*: INTEGER; (1 bits)
				cfFormat: shortint
				Value: carray 1 of char 
			end 
		DDEPOKE = cstruct 
				fBits0: shortint
				// unused*: INTEGER; (13 bits)
				// fRelease*: INTEGER; (1 bits)
				// fReserved*: INTEGER; (2 bits)
				cfFormat: shortint
				Value: carray 1 of char 
			end 
		DDELN = cstruct 
				fBits0: shortint
				// unused*: INTEGER; (13 bits)
				// fRelease*: INTEGER; (1 bits)
				// fDeferUpd*: INTEGER; (1 bits)
				// fAckReq*: INTEGER; (1 bits)
				cfFormat: shortint 
			end 
		DDEUP = cstruct 
				fBits0: shortint
				// unused*: INTEGER; (12 bits)
				// fAck*: INTEGER; (1 bits)
				// fRelease*: INTEGER; (1 bits)
				// fReserved*: INTEGER; (1 bits)
				// fAckReq*: INTEGER; (1 bits)
				cfFormat: shortint
				rgb: carray 1 of char 
			end 
		HCONVLIST = HANDLE
		HCONV = HANDLE
		HSZ = HANDLE
		HDDEDATA = HANDLE
		HSZPAIR = cstruct 
				hszSvc: HSZ
				hszTopic: HSZ 
			end 
		PtrHSZPAIR = unsafe pointer to HSZPAIR
		CONVCONTEXT = cstruct 
				cb: integer
				wFlags: integer
				wCountryID: integer
				iCodePage: integer
				dwLangID: integer
				dwSecurity: integer
				qos: SECURITY_QUALITY_OF_SERVICE 
			end 
		PtrCONVCONTEXT = unsafe pointer to CONVCONTEXT
		CONVINFO = cstruct 
				cb: integer
				hUser: integer
				hConvPartner: HCONV
				hszSvcPartner: HSZ
				hszServiceReq: HSZ
				hszTopic: HSZ
				hszItem: HSZ
				wFmt: integer
				wType: integer
				wStatus: set
				wConvst: integer
				wLastError: integer
				hConvList: HCONVLIST
				ConvCtxt: CONVCONTEXT
				hwnd: HWND
				hwndPartner: HWND 
			end 
		PtrCONVINFO = unsafe pointer to CONVINFO
		FNCALLBACK = proc (wType: integer; wFmt: integer; hConv: HCONV; hsz1: HSZ; hsz2: HSZ; hData: HDDEDATA; dwData1: integer; dwData2: integer): HDDEDATA
		DDEML_MSG_HOOK_DATA = cstruct 
				uiLo: integer
				uiHi: integer
				cbData: integer
				Data: carray 8 of integer 
			end 
		PtrDDEML_MSG_HOOK_DATA = unsafe pointer to DDEML_MSG_HOOK_DATA
		MONMSGSTRUCT = cstruct 
				cb: integer
				hwndTo: HWND
				dwTime: integer
				hTask: HANDLE
				wMsg: integer
				wParam: WPARAM
				lParam: LPARAM
				dmhd: DDEML_MSG_HOOK_DATA 
			end 
		PtrMONMSGSTRUCT = unsafe pointer to MONMSGSTRUCT
		MONCBSTRUCT = cstruct 
				cb: integer
				dwTime: integer
				hTask: HANDLE
				dwRet: integer
				wType: integer
				wFmt: integer
				hConv: HCONV
				hsz1: HSZ
				hsz2: HSZ
				hData: HDDEDATA
				dwData1: integer
				dwData2: integer
				cc: CONVCONTEXT
				cbData: integer
				Data: carray 8 of integer 
			end 
		PtrMONCBSTRUCT = unsafe pointer to MONCBSTRUCT
		MONHSZSTRUCTA = cstruct 
				cb: integer
				fsAction: BOOL
				dwTime: integer
				hsz: HSZ
				hTask: HANDLE
				str: carray 1 of char 
			end 
		PtrMONHSZSTRUCTA = unsafe pointer to MONHSZSTRUCTA
		MONHSZSTRUCTW = cstruct 
				cb: integer
				fsAction: BOOL
				dwTime: integer
				hsz: HSZ
				hTask: HANDLE
				str: carray 1 of wchar 
			end 
		PtrMONHSZSTRUCTW = unsafe pointer to MONHSZSTRUCTW
		MONHSZSTRUCT = MONHSZSTRUCTA
		PtrMONHSZSTRUCT = PtrMONHSZSTRUCTA
		MONERRSTRUCT = cstruct 
				cb: integer
				wLastError: integer
				dwTime: integer
				hTask: HANDLE 
			end 
		PtrMONERRSTRUCT = unsafe pointer to MONERRSTRUCT
		MONLINKSTRUCT = cstruct 
				cb: integer
				dwTime: integer
				hTask: HANDLE
				fEstablished: BOOL
				fNoData: BOOL
				hszSvc: HSZ
				hszTopic: HSZ
				hszItem: HSZ
				wFmt: integer
				fServer: BOOL
				hConvServer: HCONV
				hConvClient: HCONV 
			end 
		PtrMONLINKSTRUCT = unsafe pointer to MONLINKSTRUCT
		MONCONVSTRUCT = cstruct 
				cb: integer
				fConnect: BOOL
				dwTime: integer
				hTask: HANDLE
				hszSvc: HSZ
				hszTopic: HSZ
				hConvClient: HCONV
				hConvServer: HCONV 
			end 
		PtrMONCONVSTRUCT = unsafe pointer to MONCONVSTRUCT
		HDROP = HANDLE
		DRAGINFOA = cstruct 
				uSize: integer
				pt: POINT
				fNC: BOOL
				lpFileList: PtrSTR
				grfKeyState: set 
			end 
		PtrDRAGINFOA = unsafe pointer to DRAGINFOA
		DRAGINFOW = cstruct 
				uSize: integer
				pt: POINT
				fNC: BOOL
				lpFileList: PtrWSTR
				grfKeyState: set 
			end 
		PtrDRAGINFOW = unsafe pointer to DRAGINFOW
		DRAGINFO = DRAGINFOA
		PtrDRAGINFO = PtrDRAGINFOA
		APPBARDATA = cstruct 
				cbSize: integer
				hWnd: HWND
				uCallbackMessage: integer
				uEdge: integer
				rc: RECT
				lParam: LPARAM 
			end 
		PtrAPPBARDATA = unsafe pointer to APPBARDATA
		FILEOP_FLAGS = shortint
		PRINTEROP_FLAGS = shortint
		SHFILEOPSTRUCTA = cstruct 
				hwnd: HWND
				wFunc: integer
				pFrom: PtrSTR
				pTo: PtrSTR
				fFlags: FILEOP_FLAGS
				fAnyOperationsAborted: BOOL
				hNameMappings: PtrVoid
				lpszProgressTitle: PtrSTR 
			end 
		PtrSHFILEOPSTRUCTA = unsafe pointer to SHFILEOPSTRUCTA
		SHFILEOPSTRUCTW = cstruct 
				hwnd: HWND
				wFunc: integer
				pFrom: PtrWSTR
				pTo: PtrWSTR
				fFlags: FILEOP_FLAGS
				fAnyOperationsAborted: BOOL
				hNameMappings: PtrVoid
				lpszProgressTitle: PtrWSTR 
			end 
		PtrSHFILEOPSTRUCTW = unsafe pointer to SHFILEOPSTRUCTW
		SHFILEOPSTRUCT = SHFILEOPSTRUCTA
		PtrSHFILEOPSTRUCT = PtrSHFILEOPSTRUCTA
		SHNAMEMAPPINGA = cstruct 
				pszOldPath: PtrSTR
				pszNewPath: PtrSTR
				cchOldPath: integer
				cchNewPath: integer 
			end 
		PtrSHNAMEMAPPINGA = unsafe pointer to SHNAMEMAPPINGA
		SHNAMEMAPPINGW = cstruct 
				pszOldPath: PtrWSTR
				pszNewPath: PtrWSTR
				cchOldPath: integer
				cchNewPath: integer 
			end 
		PtrSHNAMEMAPPINGW = unsafe pointer to SHNAMEMAPPINGW
		SHNAMEMAPPING = SHNAMEMAPPINGA
		PtrSHNAMEMAPPING = PtrSHNAMEMAPPINGA
		SHELLEXECUTEINFOA = cstruct 
				cbSize: integer
				fMask: set
				hwnd: HWND
				lpVerb: PtrSTR
				lpFile: PtrSTR
				lpParameters: PtrSTR
				lpDirectory: PtrSTR
				nShow: integer
				hInstApp: HINSTANCE
				lpIDList: PtrVoid
				lpClass: PtrSTR
				hkeyClass: HKEY
				dwHotKey: integer
				hIcon: HANDLE
				hProcess: HANDLE 
			end 
		PtrSHELLEXECUTEINFOA = unsafe pointer to SHELLEXECUTEINFOA
		SHELLEXECUTEINFOW = cstruct 
				cbSize: integer
				fMask: set
				hwnd: HWND
				lpVerb: PtrWSTR
				lpFile: PtrWSTR
				lpParameters: PtrWSTR
				lpDirectory: PtrWSTR
				nShow: integer
				hInstApp: HINSTANCE
				lpIDList: PtrVoid
				lpClass: PtrWSTR
				hkeyClass: HKEY
				dwHotKey: integer
				hIcon: HANDLE
				hProcess: HANDLE 
			end 
		PtrSHELLEXECUTEINFOW = unsafe pointer to SHELLEXECUTEINFOW
		SHELLEXECUTEINFO = SHELLEXECUTEINFOA
		PtrSHELLEXECUTEINFO = PtrSHELLEXECUTEINFOA
		NOTIFYICONDATAA = cstruct 
				cbSize: integer
				hWnd: HWND
				uID: integer
				uFlags: set
				uCallbackMessage: integer
				hIcon: HICON
				szTip: carray 64 of char 
			end 
		PtrNOTIFYICONDATAA = unsafe pointer to NOTIFYICONDATAA
		NOTIFYICONDATAW = cstruct 
				cbSize: integer
				hWnd: HWND
				uID: integer
				uFlags: set
				uCallbackMessage: integer
				hIcon: HICON
				szTip: carray 64 of wchar 
			end 
		PtrNOTIFYICONDATAW = unsafe pointer to NOTIFYICONDATAW
		NOTIFYICONDATA = NOTIFYICONDATAA
		PtrNOTIFYICONDATA = PtrNOTIFYICONDATAA
		SHFILEINFOA = cstruct 
				hIcon: HICON
				iIcon: integer
				dwAttributes: set
				szDisplayName: carray 260 of char
				szTypeName: carray 80 of char 
			end 
		PtrSHFILEINFOA = unsafe pointer to SHFILEINFOA
		SHFILEINFOW = cstruct 
				hIcon: HICON
				iIcon: integer
				dwAttributes: set
				szDisplayName: carray 260 of wchar
				szTypeName: carray 80 of wchar 
			end 
		PtrSHFILEINFOW = unsafe pointer to SHFILEINFOW
		SHFILEINFO = SHFILEINFOA
		PtrSHFILEINFO = PtrSHFILEINFOA
		PtrPROPSHEETPAGEA = unsafe pointer to PROPSHEETPAGEA
		FNPSPCALLBACKA = proc (hwnd: HWND; uMsg: integer; ppsp: PtrPROPSHEETPAGEA): integer
		PtrPROPSHEETPAGEW = unsafe pointer to PROPSHEETPAGEW
		FNPSPCALLBACKW = proc (hwnd: HWND; uMsg: integer; ppsp: PtrPROPSHEETPAGEW): integer
		PROPSHEETPAGEA = cstruct 
				dwSize: integer
				dwFlags: set
				hInstance: HINSTANCE
				u: cstruct 
						pszTemplate: PtrSTR
						pResource: PtrDLGTEMPLATE 
					end 
				u1: cstruct 
						hIcon: HICON
						pszIcon: PtrSTR 
					end 
				pszTitle: PtrSTR
				pfnDlgProc: DLGPROC
				lParam: LPARAM
				pfnCallback: FNPSPCALLBACKA
				pcRefParent: unsafe pointer to (* ? *)carray of integer 
			end 
		PROPSHEETPAGEW = cstruct 
				dwSize: integer
				dwFlags: set
				hInstance: HINSTANCE
				u: cstruct 
						pszTemplate: PtrWSTR
						pResource: PtrDLGTEMPLATE 
					end 
				u1: cstruct 
						hIcon: HICON
						pszIcon: PtrWSTR 
					end 
				pszTitle: PtrWSTR
				pfnDlgProc: DLGPROC
				lParam: LPARAM
				pfnCallback: FNPSPCALLBACKW
				pcRefParent: unsafe pointer to (* ? *)carray of integer 
			end 
		PROPSHEETPAGE = PROPSHEETPAGEA // m
		PtrPROPSHEETPAGE = PtrPROPSHEETPAGEA
		FNPROPSHEETCALLBACK = proc (p0: HWND; p1: integer; p2: LPARAM): integer
		_PSP = cstruct (* i *)end 
		Ptr_PSP = unsafe pointer to _PSP
		PROPSHEETHEADERA = cstruct 
				dwSize: integer
				dwFlags: set
				hwndParent: HWND
				hInstance: HINSTANCE
				u: cstruct 
						hIcon: HICON
						pszIcon: PtrSTR 
					end 
				pszCaption: PtrSTR
				nPages: integer
				u1: cstruct 
						nStartPage: integer
						pStartPage: PtrSTR 
					end 
				u2: cstruct 
						ppsp: PtrPROPSHEETPAGEA
						phpage: unsafe pointer to (* ? *)carray of Ptr_PSP 
					end 
				pfnCallback: FNPROPSHEETCALLBACK 
			end 
		PtrPROPSHEETHEADERA = unsafe pointer to PROPSHEETHEADERA
		PROPSHEETHEADERW = cstruct 
				dwSize: integer
				dwFlags: set
				hwndParent: HWND
				hInstance: HINSTANCE
				u: cstruct 
						hIcon: HICON
						pszIcon: PtrWSTR 
					end 
				pszCaption: PtrWSTR
				nPages: integer
				u1: cstruct 
						nStartPage: integer
						pStartPage: PtrWSTR 
					end 
				u2: cstruct 
						ppsp: PtrPROPSHEETPAGEW
						phpage: unsafe pointer to (* ? *)carray of Ptr_PSP 
					end 
				pfnCallback: FNPROPSHEETCALLBACK 
			end 
		PtrPROPSHEETHEADERW = unsafe pointer to PROPSHEETHEADERW
		PROPSHEETHEADER = PROPSHEETHEADERA // m
		PtrPROPSHEETHEADER = PtrPROPSHEETHEADERA
		FNADDPROPSHEETPAGE = proc (p0: Ptr_PSP; p1: LPARAM): BOOL
		FNADDPROPSHEETPAGES = proc (p0: PtrVoid; p1: FNADDPROPSHEETPAGE; p2: LPARAM): BOOL
		PSHNOTIFY = cstruct 
				hdr: NMHDR
				lParam: LPARAM 
			end 
		PtrPSHNOTIFY = unsafe pointer to PSHNOTIFY
		PRINTER_INFO_1A = cstruct 
				Flags: set
				pDescription: PtrSTR
				pName: PtrSTR
				pComment: PtrSTR 
			end 
		PtrPRINTER_INFO_1A = unsafe pointer to PRINTER_INFO_1A
		PRINTER_INFO_1W = cstruct 
				Flags: set
				pDescription: PtrWSTR
				pName: PtrWSTR
				pComment: PtrWSTR 
			end 
		PtrPRINTER_INFO_1W = unsafe pointer to PRINTER_INFO_1W
		PRINTER_INFO_1 = PRINTER_INFO_1A
		PtrPRINTER_INFO_1 = PtrPRINTER_INFO_1A
		PRINTER_INFO_2A = cstruct 
				pServerName: PtrSTR
				pPrinterName: PtrSTR
				pShareName: PtrSTR
				pPortName: PtrSTR
				pDriverName: PtrSTR
				pComment: PtrSTR
				pLocation: PtrSTR
				pDevMode: PtrDEVMODEA
				pSepFile: PtrSTR
				pPrintProcessor: PtrSTR
				pDatatype: PtrSTR
				pParameters: PtrSTR
				pSecurityDescriptor: PSECURITY_DESCRIPTOR
				Attributes: set
				Priority: integer
				DefaultPriority: integer
				StartTime: integer
				UntilTime: integer
				Status: set
				cJobs: integer
				AveragePPM: integer 
			end 
		PtrPRINTER_INFO_2A = unsafe pointer to PRINTER_INFO_2A
		PRINTER_INFO_2W = cstruct 
				pServerName: PtrWSTR
				pPrinterName: PtrWSTR
				pShareName: PtrWSTR
				pPortName: PtrWSTR
				pDriverName: PtrWSTR
				pComment: PtrWSTR
				pLocation: PtrWSTR
				pDevMode: PtrDEVMODEW
				pSepFile: PtrWSTR
				pPrintProcessor: PtrWSTR
				pDatatype: PtrWSTR
				pParameters: PtrWSTR
				pSecurityDescriptor: PSECURITY_DESCRIPTOR
				Attributes: set
				Priority: integer
				DefaultPriority: integer
				StartTime: integer
				UntilTime: integer
				Status: set
				cJobs: integer
				AveragePPM: integer 
			end 
		PtrPRINTER_INFO_2W = unsafe pointer to PRINTER_INFO_2W
		PRINTER_INFO_2 = PRINTER_INFO_2A
		PtrPRINTER_INFO_2 = PtrPRINTER_INFO_2A
		PRINTER_INFO_3 = cstruct 
				pSecurityDescriptor: PSECURITY_DESCRIPTOR 
			end 
		PtrPRINTER_INFO_3 = unsafe pointer to PRINTER_INFO_3
		PRINTER_INFO_4A = cstruct 
				pPrinterName: PtrSTR
				pServerName: PtrSTR
				Attributes: set 
			end 
		PtrPRINTER_INFO_4A = unsafe pointer to PRINTER_INFO_4A
		PRINTER_INFO_4W = cstruct 
				pPrinterName: PtrWSTR
				pServerName: PtrWSTR
				Attributes: set 
			end 
		PtrPRINTER_INFO_4W = unsafe pointer to PRINTER_INFO_4W
		PRINTER_INFO_4 = PRINTER_INFO_4A
		PtrPRINTER_INFO_4 = PtrPRINTER_INFO_4A
		PRINTER_INFO_5A = cstruct 
				pPrinterName: PtrSTR
				pPortName: PtrSTR
				Attributes: set
				DeviceNotSelectedTimeout: integer
				TransmissionRetryTimeout: integer 
			end 
		PtrPRINTER_INFO_5A = unsafe pointer to PRINTER_INFO_5A
		PRINTER_INFO_5W = cstruct 
				pPrinterName: PtrWSTR
				pPortName: PtrWSTR
				Attributes: set
				DeviceNotSelectedTimeout: integer
				TransmissionRetryTimeout: integer 
			end 
		PtrPRINTER_INFO_5W = unsafe pointer to PRINTER_INFO_5W
		PRINTER_INFO_5 = PRINTER_INFO_5A
		PtrPRINTER_INFO_5 = PtrPRINTER_INFO_5A
		PRINTER_INFO_6 = cstruct 
				dwStatus: set 
			end 
		PtrPRINTER_INFO_6 = unsafe pointer to PRINTER_INFO_6
		JOB_INFO_1A = cstruct 
				JobId: integer
				pPrinterName: PtrSTR
				pMachineName: PtrSTR
				pUserName: PtrSTR
				pDocument: PtrSTR
				pDatatype: PtrSTR
				pStatus: PtrSTR
				Status: set
				Priority: integer
				Position: integer
				TotalPages: integer
				PagesPrinted: integer
				Submitted: SYSTEMTIME 
			end 
		PtrJOB_INFO_1A = unsafe pointer to JOB_INFO_1A
		JOB_INFO_1W = cstruct 
				JobId: integer
				pPrinterName: PtrWSTR
				pMachineName: PtrWSTR
				pUserName: PtrWSTR
				pDocument: PtrWSTR
				pDatatype: PtrWSTR
				pStatus: PtrWSTR
				Status: set
				Priority: integer
				Position: integer
				TotalPages: integer
				PagesPrinted: integer
				Submitted: SYSTEMTIME 
			end 
		PtrJOB_INFO_1W = unsafe pointer to JOB_INFO_1W
		JOB_INFO_1 = JOB_INFO_1A
		PtrJOB_INFO_1 = PtrJOB_INFO_1A
		JOB_INFO_2A = cstruct 
				JobId: integer
				pPrinterName: PtrSTR
				pMachineName: PtrSTR
				pUserName: PtrSTR
				pDocument: PtrSTR
				pNotifyName: PtrSTR
				pDatatype: PtrSTR
				pPrintProcessor: PtrSTR
				pParameters: PtrSTR
				pDriverName: PtrSTR
				pDevMode: PtrDEVMODEA
				pStatus: PtrSTR
				pSecurityDescriptor: PSECURITY_DESCRIPTOR
				Status: set
				Priority: integer
				Position: integer
				StartTime: integer
				UntilTime: integer
				TotalPages: integer
				Size: integer
				Submitted: SYSTEMTIME
				Time: integer
				PagesPrinted: integer 
			end 
		PtrJOB_INFO_2A = unsafe pointer to JOB_INFO_2A
		JOB_INFO_2W = cstruct 
				JobId: integer
				pPrinterName: PtrWSTR
				pMachineName: PtrWSTR
				pUserName: PtrWSTR
				pDocument: PtrWSTR
				pNotifyName: PtrWSTR
				pDatatype: PtrWSTR
				pPrintProcessor: PtrWSTR
				pParameters: PtrWSTR
				pDriverName: PtrWSTR
				pDevMode: PtrDEVMODEW
				pStatus: PtrWSTR
				pSecurityDescriptor: PSECURITY_DESCRIPTOR
				Status: set
				Priority: integer
				Position: integer
				StartTime: integer
				UntilTime: integer
				TotalPages: integer
				Size: integer
				Submitted: SYSTEMTIME
				Time: integer
				PagesPrinted: integer 
			end 
		PtrJOB_INFO_2W = unsafe pointer to JOB_INFO_2W
		JOB_INFO_2 = JOB_INFO_2A
		PtrJOB_INFO_2 = PtrJOB_INFO_2A
		ADDJOB_INFO_1A = cstruct 
				Path: PtrSTR
				JobId: integer 
			end 
		PtrADDJOB_INFO_1A = unsafe pointer to ADDJOB_INFO_1A
		ADDJOB_INFO_1W = cstruct 
				Path: PtrWSTR
				JobId: integer 
			end 
		PtrADDJOB_INFO_1W = unsafe pointer to ADDJOB_INFO_1W
		ADDJOB_INFO_1 = ADDJOB_INFO_1A
		PtrADDJOB_INFO_1 = PtrADDJOB_INFO_1A
		DRIVER_INFO_1A = cstruct 
				pName: PtrSTR 
			end 
		PtrDRIVER_INFO_1A = unsafe pointer to DRIVER_INFO_1A
		DRIVER_INFO_1W = cstruct 
				pName: PtrWSTR 
			end 
		PtrDRIVER_INFO_1W = unsafe pointer to DRIVER_INFO_1W
		DRIVER_INFO_1 = DRIVER_INFO_1A
		PtrDRIVER_INFO_1 = PtrDRIVER_INFO_1A
		DRIVER_INFO_2A = cstruct 
				cVersion: integer
				pName: PtrSTR
				pEnvironment: PtrSTR
				pDriverPath: PtrSTR
				pDataFile: PtrSTR
				pConfigFile: PtrSTR 
			end 
		PtrDRIVER_INFO_2A = unsafe pointer to DRIVER_INFO_2A
		DRIVER_INFO_2W = cstruct 
				cVersion: integer
				pName: PtrWSTR
				pEnvironment: PtrWSTR
				pDriverPath: PtrWSTR
				pDataFile: PtrWSTR
				pConfigFile: PtrWSTR 
			end 
		PtrDRIVER_INFO_2W = unsafe pointer to DRIVER_INFO_2W
		DRIVER_INFO_2 = DRIVER_INFO_2A
		PtrDRIVER_INFO_2 = PtrDRIVER_INFO_2A
		DRIVER_INFO_3A = cstruct 
				cVersion: integer
				pName: PtrSTR
				pEnvironment: PtrSTR
				pDriverPath: PtrSTR
				pDataFile: PtrSTR
				pConfigFile: PtrSTR
				pHelpFile: PtrSTR
				pDependentFiles: PtrSTR
				pMonitorName: PtrSTR
				pDefaultDataType: PtrSTR 
			end 
		PtrDRIVER_INFO_3A = unsafe pointer to DRIVER_INFO_3A
		DRIVER_INFO_3W = cstruct 
				cVersion: integer
				pName: PtrWSTR
				pEnvironment: PtrWSTR
				pDriverPath: PtrWSTR
				pDataFile: PtrWSTR
				pConfigFile: PtrWSTR
				pHelpFile: PtrWSTR
				pDependentFiles: PtrWSTR
				pMonitorName: PtrWSTR
				pDefaultDataType: PtrWSTR 
			end 
		PtrDRIVER_INFO_3W = unsafe pointer to DRIVER_INFO_3W
		DRIVER_INFO_3 = DRIVER_INFO_3A
		PtrDRIVER_INFO_3 = PtrDRIVER_INFO_3A
		DOC_INFO_1A = cstruct 
				pDocName: PtrSTR
				pOutputFile: PtrSTR
				pDatatype: PtrSTR 
			end 
		PtrDOC_INFO_1A = unsafe pointer to DOC_INFO_1A
		DOC_INFO_1W = cstruct 
				pDocName: PtrWSTR
				pOutputFile: PtrWSTR
				pDatatype: PtrWSTR 
			end 
		PtrDOC_INFO_1W = unsafe pointer to DOC_INFO_1W
		DOC_INFO_1 = DOC_INFO_1A
		PtrDOC_INFO_1 = PtrDOC_INFO_1A
		FORM_INFO_1A = cstruct 
				Flags: set
				pName: PtrSTR
				Size: SIZE
				ImageableArea: RECT 
			end 
		PtrFORM_INFO_1A = unsafe pointer to FORM_INFO_1A
		FORM_INFO_1W = cstruct 
				Flags: set
				pName: PtrWSTR
				Size: SIZE
				ImageableArea: RECT 
			end 
		PtrFORM_INFO_1W = unsafe pointer to FORM_INFO_1W
		FORM_INFO_1 = FORM_INFO_1A
		PtrFORM_INFO_1 = PtrFORM_INFO_1A
		DOC_INFO_2A = cstruct 
				pDocName: PtrSTR
				pOutputFile: PtrSTR
				pDatatype: PtrSTR
				dwMode: set
				JobId: integer 
			end 
		PtrDOC_INFO_2A = unsafe pointer to DOC_INFO_2A
		DOC_INFO_2W = cstruct 
				pDocName: PtrWSTR
				pOutputFile: PtrWSTR
				pDatatype: PtrWSTR
				dwMode: set
				JobId: integer 
			end 
		PtrDOC_INFO_2W = unsafe pointer to DOC_INFO_2W
		DOC_INFO_2 = DOC_INFO_2A
		PtrDOC_INFO_2 = PtrDOC_INFO_2A
		PRINTPROCESSOR_INFO_1A = cstruct 
				pName: PtrSTR 
			end 
		PtrPRINTPROCESSOR_INFO_1A = unsafe pointer to PRINTPROCESSOR_INFO_1A
		PRINTPROCESSOR_INFO_1W = cstruct 
				pName: PtrWSTR 
			end 
		PtrPRINTPROCESSOR_INFO_1W = unsafe pointer to PRINTPROCESSOR_INFO_1W
		PRINTPROCESSOR_INFO_1 = PRINTPROCESSOR_INFO_1A
		PtrPRINTPROCESSOR_INFO_1 = PtrPRINTPROCESSOR_INFO_1A
		PORT_INFO_1A = cstruct 
				pName: PtrSTR 
			end 
		PtrPORT_INFO_1A = unsafe pointer to PORT_INFO_1A
		PORT_INFO_1W = cstruct 
				pName: PtrWSTR 
			end 
		PtrPORT_INFO_1W = unsafe pointer to PORT_INFO_1W
		PORT_INFO_1 = PORT_INFO_1A
		PtrPORT_INFO_1 = PtrPORT_INFO_1A
		PORT_INFO_2A = cstruct 
				pPortName: PtrSTR
				pMonitorName: PtrSTR
				pDescription: PtrSTR
				fPortType: integer
				Reserved: integer 
			end 
		PtrPORT_INFO_2A = unsafe pointer to PORT_INFO_2A
		PORT_INFO_2W = cstruct 
				pPortName: PtrWSTR
				pMonitorName: PtrWSTR
				pDescription: PtrWSTR
				fPortType: integer
				Reserved: integer 
			end 
		PtrPORT_INFO_2W = unsafe pointer to PORT_INFO_2W
		PORT_INFO_2 = PORT_INFO_2A
		PtrPORT_INFO_2 = PtrPORT_INFO_2A
		MONITOR_INFO_1A = cstruct 
				pName: PtrSTR 
			end 
		PtrMONITOR_INFO_1A = unsafe pointer to MONITOR_INFO_1A
		MONITOR_INFO_1W = cstruct 
				pName: PtrWSTR 
			end 
		PtrMONITOR_INFO_1W = unsafe pointer to MONITOR_INFO_1W
		MONITOR_INFO_1 = MONITOR_INFO_1A
		PtrMONITOR_INFO_1 = PtrMONITOR_INFO_1A
		MONITOR_INFO_2A = cstruct 
				pName: PtrSTR
				pEnvironment: PtrSTR
				pDLLName: PtrSTR 
			end 
		PtrMONITOR_INFO_2A = unsafe pointer to MONITOR_INFO_2A
		MONITOR_INFO_2W = cstruct 
				pName: PtrWSTR
				pEnvironment: PtrWSTR
				pDLLName: PtrWSTR 
			end 
		PtrMONITOR_INFO_2W = unsafe pointer to MONITOR_INFO_2W
		MONITOR_INFO_2 = MONITOR_INFO_2A
		PtrMONITOR_INFO_2 = PtrMONITOR_INFO_2A
		DATATYPES_INFO_1A = cstruct 
				pName: PtrSTR 
			end 
		PtrDATATYPES_INFO_1A = unsafe pointer to DATATYPES_INFO_1A
		DATATYPES_INFO_1W = cstruct 
				pName: PtrWSTR 
			end 
		PtrDATATYPES_INFO_1W = unsafe pointer to DATATYPES_INFO_1W
		DATATYPES_INFO_1 = DATATYPES_INFO_1A
		PtrDATATYPES_INFO_1 = PtrDATATYPES_INFO_1A
		PRINTER_DEFAULTSA = cstruct 
				pDatatype: PtrSTR
				pDevMode: PtrDEVMODEA
				DesiredAccess: ACCESS_MASK 
			end 
		PtrPRINTER_DEFAULTSA = unsafe pointer to PRINTER_DEFAULTSA
		PRINTER_DEFAULTSW = cstruct 
				pDatatype: PtrWSTR
				pDevMode: PtrDEVMODEW
				DesiredAccess: ACCESS_MASK 
			end 
		PtrPRINTER_DEFAULTSW = unsafe pointer to PRINTER_DEFAULTSW
		PRINTER_DEFAULTS = PRINTER_DEFAULTSA
		PtrPRINTER_DEFAULTS = PtrPRINTER_DEFAULTSA
		PRINTER_NOTIFY_OPTIONS_TYPE = cstruct 
				Type: shortint
				Reserved0: shortint
				Reserved1: integer
				Reserved2: integer
				Count: integer
				pFields: unsafe pointer to (* ? *)carray of shortint 
			end 
		PtrPRINTER_NOTIFY_OPTIONS_TYPE = unsafe pointer to PRINTER_NOTIFY_OPTIONS_TYPE
		PRINTER_NOTIFY_OPTIONS = cstruct 
				Version: integer
				Flags: set
				Count: integer
				pTypes: PtrPRINTER_NOTIFY_OPTIONS_TYPE 
			end 
		PtrPRINTER_NOTIFY_OPTIONS = unsafe pointer to PRINTER_NOTIFY_OPTIONS
		PRINTER_NOTIFY_INFO_DATA = cstruct 
				Type: shortint
				Field: shortint
				Reserved: integer
				Id: integer
				NotifyData: cstruct 
						adwData: carray 2 of integer
						Data: cstruct 
								cbBuf: integer
								pBuf: PtrVoid 
							end  
					end  
			end 
		PtrPRINTER_NOTIFY_INFO_DATA = unsafe pointer to PRINTER_NOTIFY_INFO_DATA
		PRINTER_NOTIFY_INFO = cstruct 
				Version: integer
				Flags: set
				Count: integer
				aData: carray 1 of PRINTER_NOTIFY_INFO_DATA 
			end 
		PtrPRINTER_NOTIFY_INFO = unsafe pointer to PRINTER_NOTIFY_INFO
		PROVIDOR_INFO_1A = cstruct 
				pName: PtrSTR
				pEnvironment: PtrSTR
				pDLLName: PtrSTR 
			end 
		PtrPROVIDOR_INFO_1A = unsafe pointer to PROVIDOR_INFO_1A
		PROVIDOR_INFO_1W = cstruct 
				pName: PtrWSTR
				pEnvironment: PtrWSTR
				pDLLName: PtrWSTR 
			end 
		PtrPROVIDOR_INFO_1W = unsafe pointer to PROVIDOR_INFO_1W
		PROVIDOR_INFO_1 = PROVIDOR_INFO_1A
		PtrPROVIDOR_INFO_1 = PtrPROVIDOR_INFO_1A
		SC_HANDLE = HANDLE
		SERVICE_STATUS_HANDLE = integer
		SERVICE_STATUS = cstruct 
				dwServiceType: set
				dwCurrentState: integer
				dwControlsAccepted: integer
				dwWin32ExitCode: integer
				dwServiceSpecificExitCode: integer
				dwCheckPoint: integer
				dwWaitHint: integer 
			end 
		PtrSERVICE_STATUS = unsafe pointer to SERVICE_STATUS
		ENUM_SERVICE_STATUSA = cstruct 
				lpServiceName: PtrSTR
				lpDisplayName: PtrSTR
				ServiceStatus: SERVICE_STATUS 
			end 
		PtrENUM_SERVICE_STATUSA = unsafe pointer to ENUM_SERVICE_STATUSA
		ENUM_SERVICE_STATUSW = cstruct 
				lpServiceName: PtrWSTR
				lpDisplayName: PtrWSTR
				ServiceStatus: SERVICE_STATUS 
			end 
		PtrENUM_SERVICE_STATUSW = unsafe pointer to ENUM_SERVICE_STATUSW
		ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA
		PtrENUM_SERVICE_STATUS = PtrENUM_SERVICE_STATUSA
		SC_LOCK = PtrVoid
		QUERY_SERVICE_LOCK_STATUSA = cstruct 
				fIsLocked: integer
				lpLockOwner: PtrSTR
				dwLockDuration: integer 
			end 
		PtrQUERY_SERVICE_LOCK_STATUSA = unsafe pointer to QUERY_SERVICE_LOCK_STATUSA
		QUERY_SERVICE_LOCK_STATUSW = cstruct 
				fIsLocked: integer
				lpLockOwner: PtrWSTR
				dwLockDuration: integer 
			end 
		PtrQUERY_SERVICE_LOCK_STATUSW = unsafe pointer to QUERY_SERVICE_LOCK_STATUSW
		QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA
		PtrQUERY_SERVICE_LOCK_STATUS = PtrQUERY_SERVICE_LOCK_STATUSA
		QUERY_SERVICE_CONFIGA = cstruct 
				dwServiceType: set
				dwStartType: integer
				dwErrorControl: integer
				lpBinaryPathName: PtrSTR
				lpLoadOrderGroup: PtrSTR
				dwTagId: integer
				lpDependencies: PtrSTR
				lpServiceStartName: PtrSTR
				lpDisplayName: PtrSTR 
			end 
		PtrQUERY_SERVICE_CONFIGA = unsafe pointer to QUERY_SERVICE_CONFIGA
		QUERY_SERVICE_CONFIGW = cstruct 
				dwServiceType: set
				dwStartType: integer
				dwErrorControl: integer
				lpBinaryPathName: PtrWSTR
				lpLoadOrderGroup: PtrWSTR
				dwTagId: integer
				lpDependencies: PtrWSTR
				lpServiceStartName: PtrWSTR
				lpDisplayName: PtrWSTR 
			end 
		PtrQUERY_SERVICE_CONFIGW = unsafe pointer to QUERY_SERVICE_CONFIGW
		QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA
		PtrQUERY_SERVICE_CONFIG = PtrQUERY_SERVICE_CONFIGA
		SERVICE_MAIN_FUNCTIONW = proc (dwNumServicesArgs: integer; lpServiceArgVectors: unsafe pointer to (* ? *)carray of PtrWSTR)
		SERVICE_MAIN_FUNCTIONA = proc (dwNumServicesArgs: integer; lpServiceArgVectors: unsafe pointer to (* ? *)carray of PtrSTR)
		SERVICE_TABLE_ENTRYA = cstruct 
				lpServiceName: PtrSTR
				lpServiceProc: SERVICE_MAIN_FUNCTIONA 
			end 
		PtrSERVICE_TABLE_ENTRYA = unsafe pointer to SERVICE_TABLE_ENTRYA
		SERVICE_TABLE_ENTRYW = cstruct 
				lpServiceName: PtrWSTR
				lpServiceProc: SERVICE_MAIN_FUNCTIONW 
			end 
		PtrSERVICE_TABLE_ENTRYW = unsafe pointer to SERVICE_TABLE_ENTRYW
		SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA
		PtrSERVICE_TABLE_ENTRY = PtrSERVICE_TABLE_ENTRYA
		HANDLER_FUNCTION = proc (dwControl: integer)
		MODEMDEVCAPS = cstruct 
				dwActualSize: integer
				dwRequiredSize: integer
				dwDevSpecificOffset: integer
				dwDevSpecificSize: integer
				dwModemProviderVersion: integer
				dwModemManufacturerOffset: integer
				dwModemManufacturerSize: integer
				dwModemModelOffset: integer
				dwModemModelSize: integer
				dwModemVersionOffset: integer
				dwModemVersionSize: integer
				dwDialOptions: integer
				dwCallSetupFailTimer: integer
				dwInactivityTimeout: integer
				dwSpeakerVolume: set
				dwSpeakerMode: set
				dwModemOptions: set
				dwMaxDTERate: integer
				dwMaxDCERate: integer
				abVariablePortion: carray 1 of char 
			end 
		PtrMODEMDEVCAPS = unsafe pointer to MODEMDEVCAPS
		MODEMSETTINGS = cstruct 
				dwActualSize: integer
				dwRequiredSize: integer
				dwDevSpecificOffset: integer
				dwDevSpecificSize: integer
				dwCallSetupFailTimer: integer
				dwInactivityTimeout: integer
				dwSpeakerVolume: set
				dwSpeakerMode: set
				dwPreferredModemOptions: integer
				dwNegotiatedModemOptions: integer
				dwNegotiatedDCERate: integer
				abVariablePortion: carray 1 of char 
			end 
		PtrMODEMSETTINGS = unsafe pointer to MODEMSETTINGS
		RetGetSidSubAuthority = unsafe pointer to (* ? *)carray of integer
		RetDdeAccessData = unsafe pointer to (* ? *)carray of char
		RetCommandLineToArgvW = unsafe pointer to (* ? *)carray of PtrWSTR
		PtrMOUSEINPUT = unsafe pointer to MOUSEINPUT
		MOUSEINPUT = cstruct 
				dx: integer
				dy: integer
				mouseData: integer
				dwFlags: set
				time: integer
				dwExtraInfo: integer 
			end 
		PtrKEYBDINPUT = unsafe pointer to KEYBDINPUT
		KEYBDINPUT = cstruct 
				wVk: shortint
				wScan: shortint
				dwFlags: set
				time: integer
				dwExtraInfo: integer 
			end 
		PtrHARDWAREINPUT = unsafe pointer to HARDWAREINPUT
		HARDWAREINPUT = cstruct 
				uMsg: integer
				wParamL: shortint
				wParamH: shortint 
			end 
		PtrINPUT = unsafe pointer to INPUT
		INPUT = cstruct 
				type_: integer // INPUT_XXX
				u: cstruct 
						mi: MOUSEINPUT
						ki: KEYBDINPUT
						hi: HARDWAREINPUT 
					end  
			end 
	
	proc InterlockedIncrement(var lpAddend: integer): integer 
	// END InterlockedIncrement;
	
	proc InterlockedDecrement(var lpAddend: integer): integer 
	// END InterlockedDecrement;
	
	proc InterlockedExchange(var Target: integer; Value: integer): integer 
	// END InterlockedExchange;
	
	proc InterlockedExchangeAdd(var Addend: integer; Value: integer): integer 
	// END InterlockedExchangeAdd;
	
	proc InterlockedCompareExchange(Destination: unsafe pointer to (* ? *)carray of PtrVoid; Exchange: PtrVoid; Comperand: PtrVoid): PtrVoid 
	// END InterlockedCompareExchange;
	
	proc FreeResource(hResData: HGLOBAL): BOOL 
	// END FreeResource;
	
	proc LockResource(hResData: HGLOBAL): PtrVoid 
	// END LockResource;
	
	proc FreeLibrary(hLibModule: HMODULE): BOOL 
	// END FreeLibrary;
	
	proc FreeLibraryAndExitThread(hLibModule: HMODULE; dwExitCode: integer) 
	// END FreeLibraryAndExitThread;
	
	proc DisableThreadLibraryCalls(hLibModule: HMODULE): BOOL 
	// END DisableThreadLibraryCalls;
	
	proc GetProcAddress(hModule: HMODULE; lpProcName: PtrSTR): FARPROC 
	// END GetProcAddress;
	
	proc GetVersion(): integer 
	// END GetVersion;
	
	proc GlobalAlloc(uFlags: set; dwBytes: integer): HGLOBAL 
	// END GlobalAlloc;
	
	proc GlobalReAlloc(hMem: HGLOBAL; dwBytes: integer; uFlags: set): HGLOBAL 
	// END GlobalReAlloc;
	
	proc GlobalSize(hMem: HGLOBAL): integer 
	// END GlobalSize;
	
	proc GlobalFlags(hMem: HGLOBAL): integer 
	// END GlobalFlags;
	
	proc GlobalLock(hMem: HGLOBAL): PtrVoid 
	// END GlobalLock;
	
	proc GlobalHandle(pMem: PtrVoid): HGLOBAL 
	// END GlobalHandle;
	
	proc GlobalUnlock(hMem: HGLOBAL): BOOL 
	// END GlobalUnlock;
	
	proc GlobalFree(hMem: HGLOBAL): HGLOBAL 
	// END GlobalFree;
	
	proc GlobalCompact(dwMinFree: integer): integer 
	// END GlobalCompact;
	
	proc GlobalFix(hMem: HGLOBAL) 
	// END GlobalFix;
	
	proc GlobalUnfix(hMem: HGLOBAL) 
	// END GlobalUnfix;
	
	proc GlobalWire(hMem: HGLOBAL): PtrVoid 
	// END GlobalWire;
	
	proc GlobalUnWire(hMem: HGLOBAL): BOOL 
	// END GlobalUnWire;
	
	proc GlobalMemoryStatus(var lpBuffer: MEMORYSTATUS) 
	// END GlobalMemoryStatus;
	
	proc LocalAlloc(uFlags: set; uBytes: integer): HLOCAL 
	// END LocalAlloc;
	
	proc LocalReAlloc(hMem: HLOCAL; uBytes: integer; uFlags: set): HLOCAL 
	// END LocalReAlloc;
	
	proc LocalLock(hMem: HLOCAL): PtrVoid 
	// END LocalLock;
	
	proc LocalHandle(pMem: PtrVoid): HLOCAL 
	// END LocalHandle;
	
	proc LocalUnlock(hMem: HLOCAL): BOOL 
	// END LocalUnlock;
	
	proc LocalSize(hMem: HLOCAL): integer 
	// END LocalSize;
	
	proc LocalFlags(hMem: HLOCAL): integer 
	// END LocalFlags;
	
	proc LocalFree(hMem: HLOCAL): HLOCAL 
	// END LocalFree;
	
	proc LocalShrink(hMem: HLOCAL; cbNewSize: integer): integer 
	// END LocalShrink;
	
	proc LocalCompact(uMinFree: integer): integer 
	// END LocalCompact;
	
	proc FlushInstructionCache(hProcess: HANDLE; lpBaseAddress: PtrVoid; dwSize: integer): BOOL 
	// END FlushInstructionCache;
	
	proc VirtualAlloc(lpAddress: PtrVoid; dwSize: integer; flAllocationType: set; flProtect: set): PtrVoid 
	// END VirtualAlloc;
	
	proc VirtualFree(lpAddress: PtrVoid; dwSize: integer; dwFreeType: set): BOOL 
	// END VirtualFree;
	
	proc VirtualProtect(lpAddress: PtrVoid; dwSize: integer; flNewProtect: set; var lpflOldProtect: integer): BOOL 
	// END VirtualProtect;
	
	proc VirtualQuery(lpAddress: PtrVoid; var lpBuffer: MEMORY_BASIC_INFORMATION; dwLength: integer): integer 
	// END VirtualQuery;
	
	proc VirtualProtectEx(hProcess: HANDLE; lpAddress: PtrVoid; dwSize: integer; flNewProtect: set; var lpflOldProtect: integer): BOOL 
	// END VirtualProtectEx;
	
	proc VirtualQueryEx(hProcess: HANDLE; lpAddress: PtrVoid; var lpBuffer: MEMORY_BASIC_INFORMATION; dwLength: integer): integer 
	// END VirtualQueryEx;
	
	proc HeapCreate(flOptions: set; dwInitialSize: integer; dwMaximumSize: integer): HANDLE 
	// END HeapCreate;
	
	proc HeapDestroy(hHeap: HANDLE): BOOL 
	// END HeapDestroy;
	
	proc HeapAlloc(hHeap: HANDLE; dwFlags: set; dwBytes: integer): PtrVoid 
	// END HeapAlloc;
	
	proc HeapReAlloc(hHeap: HANDLE; dwFlags: set; lpMem: PtrVoid; dwBytes: integer): PtrVoid 
	// END HeapReAlloc;
	
	proc HeapFree(hHeap: HANDLE; dwFlags: set; lpMem: PtrVoid): BOOL 
	// END HeapFree;
	
	proc HeapSize(hHeap: HANDLE; dwFlags: set; lpMem: PtrVoid): integer 
	// END HeapSize;
	
	proc HeapValidate(hHeap: HANDLE; dwFlags: set; lpMem: PtrVoid): BOOL 
	// END HeapValidate;
	
	proc HeapCompact(hHeap: HANDLE; dwFlags: set): integer 
	// END HeapCompact;
	
	proc GetProcessHeap(): HANDLE 
	// END GetProcessHeap;
	
	proc GetProcessHeaps(NumberOfHeaps: integer; var ProcessHeaps: HANDLE): integer 
	// END GetProcessHeaps;
	
	proc HeapLock(hHeap: HANDLE): BOOL 
	// END HeapLock;
	
	proc HeapUnlock(hHeap: HANDLE): BOOL 
	// END HeapUnlock;
	
	proc HeapWalk(hHeap: HANDLE; var lpEntry: PROCESS_HEAP_ENTRY): BOOL 
	// END HeapWalk;
	
	proc GetBinaryTypeA(lpApplicationName: PtrSTR; var lpBinaryType: integer): BOOL 
	// END GetBinaryTypeA;
	
	proc GetBinaryTypeW(lpApplicationName: PtrWSTR; var lpBinaryType: integer): BOOL 
	// END GetBinaryTypeW;
	
	proc GetBinaryType(lpApplicationName: PtrSTR; var lpBinaryType: integer): BOOL 
	// END GetBinaryType;
	
	proc GetShortPathNameA(lpszLongPath: PtrSTR; lpszShortPath: PtrSTR; cchBuffer: integer): integer 
	// END GetShortPathNameA;
	
	proc GetShortPathNameW(lpszLongPath: PtrWSTR; lpszShortPath: PtrWSTR; cchBuffer: integer): integer 
	// END GetShortPathNameW;
	
	proc GetShortPathName(lpszLongPath: PtrSTR; lpszShortPath: PtrSTR; cchBuffer: integer): integer 
	// END GetShortPathName;
	
	proc GetProcessAffinityMask(hProcess: HANDLE; var lpProcessAffinityMask: integer; var lpSystemAffinityMask: integer): BOOL 
	// END GetProcessAffinityMask;
	
	proc SetProcessAffinityMask(hProcess: HANDLE; dwProcessAffinityMask: integer): BOOL 
	// END SetProcessAffinityMask;
	
	proc GetProcessTimes(hProcess: HANDLE; var lpCreationTime: FILETIME; var lpExitTime: FILETIME; var lpKernelTime: FILETIME; var lpUserTime: FILETIME): BOOL 
	// END GetProcessTimes;
	
	proc GetProcessWorkingSetSize(hProcess: HANDLE; var lpMinimumWorkingSetSize: integer; var lpMaximumWorkingSetSize: integer): BOOL 
	// END GetProcessWorkingSetSize;
	
	proc SetProcessWorkingSetSize(hProcess: HANDLE; dwMinimumWorkingSetSize: integer; dwMaximumWorkingSetSize: integer): BOOL 
	// END SetProcessWorkingSetSize;
	
	proc OpenProcess(dwDesiredAccess: set; bInheritHandle: BOOL; dwProcessId: integer): HANDLE 
	// END OpenProcess;
	
	proc GetCurrentProcess(): HANDLE 
	// END GetCurrentProcess;
	
	proc GetCurrentProcessId(): integer 
	// END GetCurrentProcessId;
	
	proc ExitProcess(uExitCode: integer) 
	// END ExitProcess;
	
	proc TerminateProcess(hProcess: HANDLE; uExitCode: integer): BOOL 
	// END TerminateProcess;
	
	proc GetExitCodeProcess(hProcess: HANDLE; var lpExitCode: integer): BOOL 
	// END GetExitCodeProcess;
	
	proc FatalExit(ExitCode: integer) 
	// END FatalExit;
	
	proc GetEnvironmentStrings(): PtrSTR 
	// END GetEnvironmentStrings;
	
	proc GetEnvironmentStringsW(): PtrWSTR 
	// END GetEnvironmentStringsW;
	
	proc GetEnvironmentStringsA(): PtrSTR 
	// END GetEnvironmentStringsA;
	
	proc FreeEnvironmentStringsA(p0: PtrSTR): BOOL 
	// END FreeEnvironmentStringsA;
	
	proc FreeEnvironmentStringsW(p0: PtrWSTR): BOOL 
	// END FreeEnvironmentStringsW;
	
	proc FreeEnvironmentStrings(p0: PtrSTR): BOOL 
	// END FreeEnvironmentStrings;
	
	
	proc RaiseException(dwExceptionCode: integer; dwExceptionFlags: integer; nNumberOfArguments: integer; var lpArguments: integer) 
	// END RaiseException;
	
	proc UnhandledExceptionFilter(var ExceptionInfo: EXCEPTION_POINTERS): integer 
	// END UnhandledExceptionFilter;
	
	proc SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: TOP_LEVEL_EXCEPTION_FILTER): TOP_LEVEL_EXCEPTION_FILTER 
	// END SetUnhandledExceptionFilter;
	
	proc CreateFiber(dwStackSize: integer; lpStartAddress: FIBER_START_ROUTINE; lpParameter: PtrVoid): PtrVoid 
	// END CreateFiber;
	
	proc CreateFiberEx(dwStackCommitSize, dwStackReserveSize: integer; dwFlags: set; lpStartAddress: FIBER_START_ROUTINE; lpParameter: PtrVoid): PtrVoid 
	// END CreateFiberEx;
	
	proc DeleteFiber(lpFiber: PtrVoid) 
	// END DeleteFiber;
	
	proc ConvertThreadToFiber(lpParameter: PtrVoid): PtrVoid 
	// END ConvertThreadToFiber;
	
	proc ConvertFiberToThread(): BOOL 
	// END ConvertFiberToThread;
	
	proc SwitchToFiber(lpFiber: PtrVoid) 
	// END SwitchToFiber;
	
	proc CreateThread(var lpThreadAttributes: SECURITY_ATTRIBUTES; dwStackSize: integer; lpStartAddress: THREAD_START_ROUTINE; lpParameter: PtrVoid; dwCreationFlags: set; var lpThreadId: integer): HANDLE 
	// END CreateThread;
	
	proc CreateRemoteThread(hProcess: HANDLE; var lpThreadAttributes: SECURITY_ATTRIBUTES; dwStackSize: integer; lpStartAddress: THREAD_START_ROUTINE; lpParameter: PtrVoid; dwCreationFlags: set; var lpThreadId: integer): HANDLE 
	// END CreateRemoteThread;
	
	proc GetCurrentThread(): HANDLE 
	// END GetCurrentThread;
	
	proc GetCurrentThreadId(): integer 
	// END GetCurrentThreadId;
	
	proc SetThreadAffinityMask(hThread: HANDLE; dwThreadAffinityMask: integer): integer 
	// END SetThreadAffinityMask;
	
	proc SetThreadIdealProcessor(hThread: HANDLE; dwIdealProcessor: integer): integer 
	// END SetThreadIdealProcessor;
	
	proc SetThreadPriority(hThread: HANDLE; nPriority: integer): BOOL 
	// END SetThreadPriority;
	
	proc SetThreadPriorityBoost(hThread: HANDLE; bDisablePriorityBoost: BOOL): BOOL 
	// END SetThreadPriorityBoost;
	
	proc GetThreadPriorityBoost(hThread: HANDLE; var pDisablePriorityBoost: BOOL): BOOL 
	// END GetThreadPriorityBoost;
	
	proc GetThreadPriority(hThread: HANDLE): integer 
	// END GetThreadPriority;
	
	proc GetThreadTimes(hThread: HANDLE; var lpCreationTime: FILETIME; var lpExitTime: FILETIME; var lpKernelTime: FILETIME; var lpUserTime: FILETIME): BOOL 
	// END GetThreadTimes;
	
	proc ExitThread(dwExitCode: integer) 
	// END ExitThread;
	
	proc TerminateThread(hThread: HANDLE; dwExitCode: integer): BOOL 
	// END TerminateThread;
	
	proc GetExitCodeThread(hThread: HANDLE; var lpExitCode: integer): BOOL 
	// END GetExitCodeThread;
	
	proc GetThreadSelectorEntry(hThread: HANDLE; dwSelector: integer; var lpSelectorEntry: LDT_ENTRY): BOOL 
	// END GetThreadSelectorEntry;
	
	proc GetLastError(): integer 
	// END GetLastError;
	
	proc SetLastError(dwErrCode: integer) 
	// END SetLastError;
	
	proc GetOverlappedResult(hFile: HANDLE; var lpOverlapped: OVERLAPPED; var lpNumberOfBytesTransferred: integer; bWait: BOOL): BOOL 
	// END GetOverlappedResult;
	
	proc CreateIoCompletionPort(FileHandle: HANDLE; ExistingCompletionPort: HANDLE; CompletionKey: integer; NumberOfConcurrentThreads: integer): HANDLE 
	// END CreateIoCompletionPort;
	
	proc GetQueuedCompletionStatus(CompletionPort: HANDLE; var lpNumberOfBytesTransferred: integer; var lpCompletionKey: integer; var lpOverlapped: PtrOVERLAPPED; dwMilliseconds: integer): BOOL 
	// END GetQueuedCompletionStatus;
	
	proc PostQueuedCompletionStatus(CompletionPort: HANDLE; dwNumberOfBytesTransferred: integer; dwCompletionKey: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END PostQueuedCompletionStatus;
	
	proc SetErrorMode(uMode: set): integer 
	// END SetErrorMode;
	
	proc ReadProcessMemory(hProcess: HANDLE; lpBaseAddress: PtrVoid; lpBuffer: PtrVoid; nSize: integer; var lpNumberOfBytesRead: integer): BOOL 
	// END ReadProcessMemory;
	
	proc WriteProcessMemory(hProcess: HANDLE; lpBaseAddress: PtrVoid; lpBuffer: PtrVoid; nSize: integer; var lpNumberOfBytesWritten: integer): BOOL 
	// END WriteProcessMemory;
	
	proc GetThreadContext(hThread: HANDLE; var lpContext: CONTEXT): BOOL 
	// END GetThreadContext;
	
	proc SetThreadContext(hThread: HANDLE; var lpContext: CONTEXT): BOOL 
	// END SetThreadContext;
	
	proc SuspendThread(hThread: HANDLE): integer 
	// END SuspendThread;
	
	proc ResumeThread(hThread: HANDLE): integer 
	// END ResumeThread;
	
	proc QueueUserAPC(pfnAPC: APCFUNC; hThread: HANDLE; dwData: integer): integer 
	// END QueueUserAPC;
	
	proc DebugBreak() 
	// END DebugBreak;
	
	proc DebugBreakProcess(hProcess: HANDLE): BOOL 
	// END DebugBreakProcess;
	
	proc WaitForDebugEvent(var lpDebugEvent: DEBUG_EVENT; dwMilliseconds: integer): BOOL 
	// END WaitForDebugEvent;
	
	proc ContinueDebugEvent(dwProcessId: integer; dwThreadId: integer; dwContinueStatus: set): BOOL 
	// END ContinueDebugEvent;
	
	proc DebugActiveProcess(dwProcessId: integer): BOOL 
	// END DebugActiveProcess;
	
	proc DebugActiveProcessStop(dwProcessId: integer): BOOL 
	// END DebugActiveProcessStop;
	
	proc DebugSetProcessKillOnExit(killOnExit: BOOL): BOOL 
	// END DebugSetProcessKillOnExit;
	
	proc IsDebuggerPresent(): BOOL 
	// END IsDebuggerPresent;
	
	proc InitializeCriticalSection(var lpCriticalSection: RTL_CRITICAL_SECTION) 
	// END InitializeCriticalSection;
	
	proc EnterCriticalSection(var lpCriticalSection: RTL_CRITICAL_SECTION) 
	// END EnterCriticalSection;
	
	proc LeaveCriticalSection(var lpCriticalSection: RTL_CRITICAL_SECTION) 
	// END LeaveCriticalSection;
	
	proc TryEnterCriticalSection(var lpCriticalSection: RTL_CRITICAL_SECTION): BOOL 
	// END TryEnterCriticalSection;
	
	proc DeleteCriticalSection(var lpCriticalSection: RTL_CRITICAL_SECTION) 
	// END DeleteCriticalSection;
	
	proc SetEvent(hEvent: HANDLE): BOOL 
	// END SetEvent;
	
	proc ResetEvent(hEvent: HANDLE): BOOL 
	// END ResetEvent;
	
	proc PulseEvent(hEvent: HANDLE): BOOL 
	// END PulseEvent;
	
	proc ReleaseSemaphore(hSemaphore: HANDLE; lReleaseCount: integer; var lpPreviousCount: integer): BOOL 
	// END ReleaseSemaphore;
	
	proc ReleaseMutex(hMutex: HANDLE): BOOL 
	// END ReleaseMutex;
	
	proc WaitForSingleObject(hHandle: HANDLE; dwMilliseconds: integer): integer 
	// END WaitForSingleObject;
	
	proc WaitForMultipleObjects(nCount: integer; var lpHandles: HANDLE; bWaitAll: BOOL; dwMilliseconds: integer): integer 
	// END WaitForMultipleObjects;
	
	proc Sleep(dwMilliseconds: integer) 
	// END Sleep;
	
	proc LoadResource(hModule: HMODULE; hResInfo: HRSRC): HGLOBAL 
	// END LoadResource;
	
	proc SizeofResource(hModule: HMODULE; hResInfo: HRSRC): integer 
	// END SizeofResource;
	
	proc GlobalDeleteAtom(nAtom: ATOM): ATOM 
	// END GlobalDeleteAtom;
	
	proc InitAtomTable(nSize: integer): BOOL 
	// END InitAtomTable;
	
	proc DeleteAtom(nAtom: ATOM): ATOM 
	// END DeleteAtom;
	
	proc SetHandleCount(uNumber: integer): integer 
	// END SetHandleCount;
	
	proc GetLogicalDrives(): integer 
	// END GetLogicalDrives;
	
	proc LockFile(hFile: HANDLE; dwFileOffsetLow: integer; dwFileOffsetHigh: integer; nNumberOfBytesToLockLow: integer; nNumberOfBytesToLockHigh: integer): BOOL 
	// END LockFile;
	
	proc UnlockFile(hFile: HANDLE; dwFileOffsetLow: integer; dwFileOffsetHigh: integer; nNumberOfBytesToUnlockLow: integer; nNumberOfBytesToUnlockHigh: integer): BOOL 
	// END UnlockFile;
	
	proc LockFileEx(hFile: HANDLE; dwFlags: set; dwReserved: integer; nNumberOfBytesToLockLow: integer; nNumberOfBytesToLockHigh: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END LockFileEx;
	
	proc UnlockFileEx(hFile: HANDLE; dwReserved: integer; nNumberOfBytesToUnlockLow: integer; nNumberOfBytesToUnlockHigh: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END UnlockFileEx;
	
	proc GetFileInformationByHandle(hFile: HANDLE; var lpFileInformation: BY_HANDLE_FILE_INFORMATION): BOOL 
	// END GetFileInformationByHandle;
	
	proc GetFileType(hFile: HANDLE): integer 
	// END GetFileType;
	
	proc GetFileSize(hFile: HANDLE; var lpFileSizeHigh: integer): integer 
	// END GetFileSize;
	
	proc GetFileSizeEx(hFile: HANDLE; var lpFileSizeHigh: longint): integer 
	// END GetFileSize;
	
	proc GetStdHandle(nStdHandle: integer): HANDLE 
	// END GetStdHandle;
	
	proc SetStdHandle(nStdHandle: integer; hHandle: HANDLE): BOOL 
	// END SetStdHandle;
	
	proc WriteFile(hFile: HANDLE; lpBuffer: PtrVoid; nNumberOfBytesToWrite: integer; var lpNumberOfBytesWritten: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END WriteFile;
	
	proc ReadFile(hFile: HANDLE; lpBuffer: PtrVoid; nNumberOfBytesToRead: integer; var lpNumberOfBytesRead: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END ReadFile;
	
	proc FlushFileBuffers(hFile: HANDLE): BOOL 
	// END FlushFileBuffers;
	
	proc DeviceIoControl(hDevice: HANDLE; dwIoControlCode: integer; lpInBuffer: PtrVoid; nInBufferSize: integer; lpOutBuffer: PtrVoid; nOutBufferSize: integer; var lpBytesReturned: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END DeviceIoControl;
	
	proc SetEndOfFile(hFile: HANDLE): BOOL 
	// END SetEndOfFile;
	
	proc SetFilePointer(hFile: HANDLE; lDistanceToMove: integer; var lpDistanceToMoveHigh: integer; dwMoveMethod: integer): integer 
	// END SetFilePointer;
	
	proc SetFilePointerEx(hFile: HANDLE; liDistanceToMove: longint; var lpNewFilePointer: longint; dwMoveMethod: integer): BOOL 
	// END SetFilePointerEx;
	
	proc FindClose(hFindFile: HANDLE): BOOL 
	// END FindClose;
	
	proc GetFileTime(hFile: HANDLE; var lpCreationTime: FILETIME; var lpLastAccessTime: FILETIME; var lpLastWriteTime: FILETIME): BOOL 
	// END GetFileTime;
	
	proc SetFileTime(hFile: HANDLE; var lpCreationTime: FILETIME; var lpLastAccessTime: FILETIME; var lpLastWriteTime: FILETIME): BOOL 
	// END SetFileTime;
	
	proc CloseHandle(hObject: HANDLE): BOOL 
	// END CloseHandle;
	
	proc DuplicateHandle(hSourceProcessHandle: HANDLE; hSourceHandle: HANDLE; hTargetProcessHandle: HANDLE; var lpTargetHandle: HANDLE; dwDesiredAccess: set; bInheritHandle: BOOL; dwOptions: set): BOOL 
	// END DuplicateHandle;
	
	proc GetHandleInformation(hObject: HANDLE; var lpdwFlags: set): BOOL 
	// END GetHandleInformation;
	
	proc SetHandleInformation(hObject: HANDLE; dwMask: integer; dwFlags: set): BOOL 
	// END SetHandleInformation;
	
	proc LoadModule(lpModuleName: PtrSTR; lpParameterBlock: PtrVoid): integer 
	// END LoadModule;
	
	proc WinExec(lpCmdLine: PtrSTR; uCmdShow: integer): integer 
	// END WinExec;
	
	proc ClearCommBreak(hFile: HANDLE): BOOL 
	// END ClearCommBreak;
	
	proc ClearCommError(hFile: HANDLE; var lpErrors: set; var lpStat: COMSTAT): BOOL 
	// END ClearCommError;
	
	proc SetupComm(hFile: HANDLE; dwInQueue: integer; dwOutQueue: integer): BOOL 
	// END SetupComm;
	
	proc EscapeCommFunction(hFile: HANDLE; dwFunc: integer): BOOL 
	// END EscapeCommFunction;
	
	proc GetCommConfig(hCommDev: HANDLE; var lpCC: COMMCONFIG; var lpdwSize: integer): BOOL 
	// END GetCommConfig;
	
	proc GetCommMask(hFile: HANDLE; var lpEvtMask: set): BOOL 
	// END GetCommMask;
	
	proc GetCommProperties(hFile: HANDLE; var lpCommProp: COMMPROP): BOOL 
	// END GetCommProperties;
	
	proc GetCommModemStatus(hFile: HANDLE; var lpModemStat: set): BOOL 
	// END GetCommModemStatus;
	
	proc GetCommState(hFile: HANDLE; var lpDCB: DCB): BOOL 
	// END GetCommState;
	
	proc GetCommTimeouts(hFile: HANDLE; var lpCommTimeouts: COMMTIMEOUTS): BOOL 
	// END GetCommTimeouts;
	
	proc PurgeComm(hFile: HANDLE; dwFlags: set): BOOL 
	// END PurgeComm;
	
	proc SetCommBreak(hFile: HANDLE): BOOL 
	// END SetCommBreak;
	
	proc SetCommConfig(hCommDev: HANDLE; var lpCC: COMMCONFIG; dwSize: integer): BOOL 
	// END SetCommConfig;
	
	proc SetCommMask(hFile: HANDLE; dwEvtMask: set): BOOL 
	// END SetCommMask;
	
	proc SetCommState(hFile: HANDLE; var lpDCB: DCB): BOOL 
	// END SetCommState;
	
	proc SetCommTimeouts(hFile: HANDLE; var lpCommTimeouts: COMMTIMEOUTS): BOOL 
	// END SetCommTimeouts;
	
	proc TransmitCommChar(hFile: HANDLE; cChar: char): BOOL 
	// END TransmitCommChar;
	
	proc WaitCommEvent(hFile: HANDLE; var lpEvtMask: set; var lpOverlapped: OVERLAPPED): BOOL 
	// END WaitCommEvent;
	
	proc SetTapePosition(hDevice: HANDLE; dwPositionMethod: integer; dwPartition: integer; dwOffsetLow: integer; dwOffsetHigh: integer; bImmediate: BOOL): integer 
	// END SetTapePosition;
	
	proc GetTapePosition(hDevice: HANDLE; dwPositionType: integer; var lpdwPartition: integer; var lpdwOffsetLow: integer; var lpdwOffsetHigh: integer): integer 
	// END GetTapePosition;
	
	proc PrepareTape(hDevice: HANDLE; dwOperation: integer; bImmediate: BOOL): integer 
	// END PrepareTape;
	
	proc EraseTape(hDevice: HANDLE; dwEraseType: integer; bImmediate: BOOL): integer 
	// END EraseTape;
	
	proc CreateTapePartition(hDevice: HANDLE; dwPartitionMethod: integer; dwCount: integer; dwSize: integer): integer 
	// END CreateTapePartition;
	
	proc WriteTapemark(hDevice: HANDLE; dwTapemarkType: integer; dwTapemarkCount: integer; bImmediate: BOOL): integer 
	// END WriteTapemark;
	
	proc GetTapeStatus(hDevice: HANDLE): integer 
	// END GetTapeStatus;
	
	proc GetTapeParameters(hDevice: HANDLE; dwOperation: integer; var lpdwSize: integer; lpTapeInformation: PtrVoid): integer 
	// END GetTapeParameters;
	
	proc SetTapeParameters(hDevice: HANDLE; dwOperation: integer; lpTapeInformation: PtrVoid): integer 
	// END SetTapeParameters;
	
	proc Beep(dwFreq: integer; dwDuration: integer): BOOL 
	// END Beep;
	
	proc MulDiv(nNumber: integer; nNumerator: integer; nDenominator: integer): integer 
	// END MulDiv;
	
	proc GetSystemTime(var lpSystemTime: SYSTEMTIME) 
	// END GetSystemTime;
	
	proc GetSystemTimeAsFileTime(var lpSystemTimeAsFileTime: FILETIME) 
	// END GetSystemTimeAsFileTime;
	
	proc SetSystemTime(var lpSystemTime: SYSTEMTIME): BOOL 
	// END SetSystemTime;
	
	proc GetLocalTime(var lpSystemTime: SYSTEMTIME) 
	// END GetLocalTime;
	
	proc SetLocalTime(var lpSystemTime: SYSTEMTIME): BOOL 
	// END SetLocalTime;
	
	proc GetSystemInfo(var lpSystemInfo: SYSTEM_INFO) 
	// END GetSystemInfo;
	
	proc SystemTimeToTzSpecificLocalTime(var lpTimeZoneInformation: TIME_ZONE_INFORMATION; var lpUniversalTime: SYSTEMTIME; var lpLocalTime: SYSTEMTIME): BOOL 
	// END SystemTimeToTzSpecificLocalTime;
	
	proc GetTimeZoneInformation(var lpTimeZoneInformation: TIME_ZONE_INFORMATION): integer 
	// END GetTimeZoneInformation;
	
	proc SetTimeZoneInformation(var lpTimeZoneInformation: TIME_ZONE_INFORMATION): BOOL 
	// END SetTimeZoneInformation;
	
	proc SystemTimeToFileTime(var lpSystemTime: SYSTEMTIME; var lpFileTime: FILETIME): BOOL 
	// END SystemTimeToFileTime;
	
	proc FileTimeToLocalFileTime(var lpFileTime: FILETIME; var lpLocalFileTime: FILETIME): BOOL 
	// END FileTimeToLocalFileTime;
	
	proc LocalFileTimeToFileTime(var lpLocalFileTime: FILETIME; var lpFileTime: FILETIME): BOOL 
	// END LocalFileTimeToFileTime;
	
	proc FileTimeToSystemTime(var lpFileTime: FILETIME; var lpSystemTime: SYSTEMTIME): BOOL 
	// END FileTimeToSystemTime;
	
	proc CompareFileTime(var lpFileTime1: FILETIME; var lpFileTime2: FILETIME): integer 
	// END CompareFileTime;
	
	proc FileTimeToDosDateTime(var lpFileTime: FILETIME; var lpFatDate: shortint; var lpFatTime: shortint): BOOL 
	// END FileTimeToDosDateTime;
	
	proc DosDateTimeToFileTime(wFatDate: shortint; wFatTime: shortint; var lpFileTime: FILETIME): BOOL 
	// END DosDateTimeToFileTime;
	
	proc GetTickCount(): integer 
	// END GetTickCount;
	
	proc SetSystemTimeAdjustment(dwTimeAdjustment: integer; bTimeAdjustmentDisabled: BOOL): BOOL 
	// END SetSystemTimeAdjustment;
	
	proc GetSystemTimeAdjustment(var lpTimeAdjustment: integer; var lpTimeIncrement: integer; var lpTimeAdjustmentDisabled: BOOL): BOOL 
	// END GetSystemTimeAdjustment;
	
	proc FormatMessageA(dwFlags: set; lpSource: PtrVoid; dwMessageId: integer; dwLanguageId: integer; lpBuffer: PtrSTR; nSize: integer; var Arguments: PtrSTR): integer 
	// END FormatMessageA;
	
	proc FormatMessageW(dwFlags: set; lpSource: PtrVoid; dwMessageId: integer; dwLanguageId: integer; lpBuffer: PtrWSTR; nSize: integer; var Arguments: PtrWSTR): integer 
	// END FormatMessageW;
	
	proc FormatMessage(dwFlags: set; lpSource: PtrVoid; dwMessageId: integer; dwLanguageId: integer; lpBuffer: PtrSTR; nSize: integer; var Arguments: PtrSTR): integer 
	// END FormatMessage;
	
	proc CreatePipe(var hReadPipe: HANDLE; var hWritePipe: HANDLE; var lpPipeAttributes: SECURITY_ATTRIBUTES; nSize: integer): BOOL 
	// END CreatePipe;
	
	proc ConnectNamedPipe(hNamedPipe: HANDLE; var lpOverlapped: OVERLAPPED): BOOL 
	// END ConnectNamedPipe;
	
	proc DisconnectNamedPipe(hNamedPipe: HANDLE): BOOL 
	// END DisconnectNamedPipe;
	
	proc SetNamedPipeHandleState(hNamedPipe: HANDLE; var lpMode: integer; var lpMaxCollectionCount: integer; var lpCollectDataTimeout: integer): BOOL 
	// END SetNamedPipeHandleState;
	
	proc GetNamedPipeInfo(hNamedPipe: HANDLE; var lpFlags: integer; var lpOutBufferSize: integer; var lpInBufferSize: integer; var lpMaxInstances: integer): BOOL 
	// END GetNamedPipeInfo;
	
	proc PeekNamedPipe(hNamedPipe: HANDLE; lpBuffer: PtrVoid; nBufferSize: integer; var lpBytesRead: integer; var lpTotalBytesAvail: integer; var lpBytesLeftThisMessage: integer): BOOL 
	// END PeekNamedPipe;
	
	proc TransactNamedPipe(hNamedPipe: HANDLE; lpInBuffer: PtrVoid; nInBufferSize: integer; lpOutBuffer: PtrVoid; nOutBufferSize: integer; var lpBytesRead: integer; var lpOverlapped: OVERLAPPED): BOOL 
	// END TransactNamedPipe;
	
	proc CreateMailslotA(lpName: PtrSTR; nMaxMessageSize: integer; lReadTimeout: integer; var lpSecurityAttributes: SECURITY_ATTRIBUTES): HANDLE 
	// END CreateMailslotA;
	
	proc CreateMailslotW(lpName: PtrWSTR; nMaxMessageSize: integer; lReadTimeout: integer; var lpSecurityAttributes: SECURITY_ATTRIBUTES): HANDLE 
	// END CreateMailslotW;
	
	proc CreateMailslot(lpName: PtrSTR; nMaxMessageSize: integer; lReadTimeout: integer; var lpSecurityAttributes: SECURITY_ATTRIBUTES): HANDLE 
	// END CreateMailslot;
	
	proc GetMailslotInfo(hMailslot: HANDLE; var lpMaxMessageSize: integer; var lpNextSize: integer; var lpMessageCount: integer; var lpReadTimeout: integer): BOOL 
	// END GetMailslotInfo;
	
	proc SetMailslotInfo(hMailslot: HANDLE; lReadTimeout: integer): BOOL 
	// END SetMailslotInfo;
	
	proc MapViewOfFile(hFileMappingObject: HANDLE; dwDesiredAccess: set; dwFileOffsetHigh: integer; dwFileOffsetLow: integer; dwNumberOfBytesToMap: integer): PtrVoid 
	// END MapViewOfFile;
	
	proc FlushViewOfFile(lpBaseAddress: PtrVoid; dwNumberOfBytesToFlush: integer): BOOL 
	// END FlushViewOfFile;
	
	proc UnmapViewOfFile(lpBaseAddress: PtrVoid): BOOL 
	// END UnmapViewOfFile;
	
	proc lstrcmpA(lpString1: PtrSTR; lpString2: PtrSTR): integer 
	// END lstrcmpA;
	
	proc lstrcmpW(lpString1: PtrWSTR; lpString2: PtrWSTR): integer 
	// END lstrcmpW;
	
	proc lstrcmp(lpString1: PtrSTR; lpString2: PtrSTR): integer 
	// END lstrcmp;
	
	proc lstrcmpiA(lpString1: PtrSTR; lpString2: PtrSTR): integer 
	// END lstrcmpiA;
	
	proc lstrcmpiW(lpString1: PtrWSTR; lpString2: PtrWSTR): integer 
	// END lstrcmpiW;
	
	proc lstrcmpi(lpString1: PtrSTR; lpString2: PtrSTR): integer 
	// END lstrcmpi;
	
	proc lstrcpynA(lpString1: PtrSTR; lpString2: PtrSTR; iMaxLength: integer): PtrSTR 
	// END lstrcpynA;
	
	proc lstrcpynW(lpString1: PtrWSTR; lpString2: PtrWSTR; iMaxLength: integer): PtrWSTR 
	// END lstrcpynW;
	
	proc lstrcpyn(lpString1: PtrSTR; lpString2: PtrSTR; iMaxLength: integer): PtrSTR 
	// END lstrcpyn;
	
	proc lstrcpyA(lpString1: PtrSTR; lpString2: PtrSTR): PtrSTR 
	// END lstrcpyA;
	
	proc lstrcpyW(lpString1: PtrWSTR; lpString2: PtrWSTR): PtrWSTR 
	// END lstrcpyW;
	
	proc lstrcpy(lpString1: PtrSTR; lpString2: PtrSTR): PtrSTR 
	// END lstrcpy;
	
	proc lstrcatA(lpString1: PtrSTR; lpString2: PtrSTR): PtrSTR 
	// END lstrcatA;
	
	proc lstrcatW(lpString1: PtrWSTR; lpString2: PtrWSTR): PtrWSTR 
	// END lstrcatW;
	
	proc lstrcat(lpString1: PtrSTR; lpString2: PtrSTR): PtrSTR 
	// END lstrcat;
	
	proc lstrlenA(lpString: PtrSTR): integer 
	// END lstrlenA;
	
	proc lstrlenW(lpString: PtrWSTR): integer 
	// END lstrlenW;
	
	proc lstrlen(lpString: PtrSTR): integer 
	// END lstrlen;
	
	proc OpenFile(lpFileName: PtrSTR; var lpReOpenBuff: OFSTRUCT; uStyle: set): HFILE 
	// END OpenFile;
	
	proc _lopen(lpPathName: PtrSTR; iReadWrite: integer): HFILE 
	// END _lopen;
	
	proc _lcreat(lpPathName: PtrSTR; iAttribute: integer): HFILE 
	// END _lcreat;
	
	proc _lread(hFile: HFILE; lpBuffer: PtrVoid; uBytes: integer): integer 
	// END _lread;
	
	proc _lwrite(hFile: HFILE; lpBuffer: PtrSTR; uBytes: integer): integer 
	// END _lwrite;
	
	proc _hread(hFile: HFILE; lpBuffer: PtrVoid; lBytes: integer): integer 
	// END _hread;
	
	proc _hwrite(hFile: HFILE; lpBuffer: PtrSTR; lBytes: integer): integer 
	// END _hwrite;
	
	proc _lclose(hFile: HFILE): HFILE 
	// END _lclose;
	
	proc _llseek(hFile: HFILE; lOffset: integer; iOrigin: integer): integer 
	// END _llseek;
	
	proc IsTextUnicode(lpBuffer: PtrVoid; cb: integer; var lpi: set): BOOL 
	// END IsTextUnicode;
	
	proc TlsAlloc(): integer 
	// END TlsAlloc;
	
	proc TlsGetValue(dwTlsIndex: integer): PtrVoid 
	// END TlsGetValue;
	
	proc TlsSetValue(dwTlsIndex: integer; lpTlsValue: PtrVoid): BOOL 
	// END TlsSetValue;
	
	proc TlsFree(dwTlsIndex: integer): BOOL 
	// END TlsFree;
	
	proc SleepEx(dwMilliseconds: integer; bAlertable: BOOL): integer 
	// END SleepEx;
	
	proc WaitForSingleObjectEx(hHandle: HANDLE; dwMilliseconds: integer; bAlertable: BOOL): integer 
	// END WaitForSingleObjectEx;
	
	proc WaitForMultipleObjectsEx(nCount: integer; var lpHandles: HANDLE; bWaitAll: BOOL; dwMilliseconds: integer; bAlertable: BOOL): integer 
	// END WaitForMultipleObjectsEx;
	
	proc SignalObjectAndWait(hObjectToSignal: HANDLE; hObjectToWaitOn: HANDLE; dwMilliseconds: integer; bAlertable: BOOL): integer 
	// END SignalObjectAndWait;
	
	proc ReadFileEx(hFile: HANDLE; lpBuffer: PtrVoid; nNumberOfBytesToRead: integer; var lpOverlapped: OVERLAPPED; lpCompletionRoutine: OVERLAPPED_COMPLETION_ROUTINE): BOOL 
	// END ReadFileEx;
	
	proc WriteFileEx(hFile: HANDLE; lpBuffer: PtrVoid; nNumberOfBytesToWrite: integer; var lpOverlapped: OVERLAPPED; lpCompletionRoutine: OVERLAPPED_COMPLETION_ROUTINE): BOOL 
	// END WriteFileEx;
	
	proc BackupRead(hFile: HANDLE; var lpBuffer: char; nNumberOfBytesToRead: integer; var lpNumberOfBytesRead: integer; bAbort: BOOL; bProcessSecurity: BOOL; lpContext: unsafe pointer to (* ? *)carray of PtrVoid): BOOL 
	// END BackupRead;
	
	proc BackupSeek(hFile: HANDLE; dwLowBytesToSeek: integer; dwHighBytesToSeek: integer; var lpdwLowByteSeeked: integer; var lpdwHighByteSeeked: integer; lpContext: unsafe pointer to (* ? *)carray of PtrVoid): BOOL 
	// END BackupSeek;
	
	proc BackupWrite(hFile: HANDLE; var lpBuffer: char; nNumberOfBytesToWrite: integer; var lpNumberOfBytesWritten: integer; bAbort: BOOL; bProcessSecurity: BOOL; lpContext: unsafe pointer to (* ? *)carray of PtrVoid): BOOL 
	// END BackupWrite;
	
	proc CreateMutexA(var lpMutexAttributes: SECURITY_ATTRIBUTES; bInitialOwner: BOOL; lpName: PtrSTR): HANDLE 
	// END CreateMutexA;
	
	proc CreateMutexW(var lpMutexAttributes: SECURITY_ATTRIBUTES; bInitialOwner: BOOL; lpName: PtrWSTR): HANDLE 
	// END CreateMutexW;
	
	proc CreateMutex(var lpMutexAttributes: SECURITY_ATTRIBUTES; bInitialOwner: BOOL; lpName: PtrSTR): HANDLE 
	// END CreateMutex;
	
	proc OpenMutexA(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenMutexA;
	
	proc OpenMutexW(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrWSTR): HANDLE 
	// END OpenMutexW;
	
	proc OpenMutex(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenMutex;
	
	proc CreateEventA(var lpEventAttributes: SECURITY_ATTRIBUTES; bManualReset: BOOL; bInitialState: BOOL; lpName: PtrSTR): HANDLE 
	// END CreateEventA;
	
	proc CreateEventW(var lpEventAttributes: SECURITY_ATTRIBUTES; bManualReset: BOOL; bInitialState: BOOL; lpName: PtrWSTR): HANDLE 
	// END CreateEventW;
	
	proc CreateEvent(var lpEventAttributes: SECURITY_ATTRIBUTES; bManualReset: BOOL; bInitialState: BOOL; lpName: PtrSTR): HANDLE 
	// END CreateEvent;
	
	proc OpenEventA(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenEventA;
	
	proc OpenEventW(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrWSTR): HANDLE 
	// END OpenEventW;
	
	proc OpenEvent(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenEvent;
	
	proc CreateSemaphoreA(var lpSemaphoreAttributes: SECURITY_ATTRIBUTES; lInitialCount: integer; lMaximumCount: integer; lpName: PtrSTR): HANDLE 
	// END CreateSemaphoreA;
	
	proc CreateSemaphoreW(var lpSemaphoreAttributes: SECURITY_ATTRIBUTES; lInitialCount: integer; lMaximumCount: integer; lpName: PtrWSTR): HANDLE 
	// END CreateSemaphoreW;
	
	proc CreateSemaphore(var lpSemaphoreAttributes: SECURITY_ATTRIBUTES; lInitialCount: integer; lMaximumCount: integer; lpName: PtrSTR): HANDLE 
	// END CreateSemaphore;
	
	proc OpenSemaphoreA(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenSemaphoreA;
	
	proc OpenSemaphoreW(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrWSTR): HANDLE 
	// END OpenSemaphoreW;
	
	proc OpenSemaphore(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenSemaphore;
	
	proc CreateWaitableTimerA(var lpTimerAttributes: SECURITY_ATTRIBUTES; bManualReset: BOOL; lpTimerName: PtrSTR): HANDLE 
	// END CreateWaitableTimerA;
	
	proc CreateWaitableTimerW(var lpTimerAttributes: SECURITY_ATTRIBUTES; bManualReset: BOOL; lpTimerName: PtrWSTR): HANDLE 
	// END CreateWaitableTimerW;
	
	proc CreateWaitableTimer(var lpTimerAttributes: SECURITY_ATTRIBUTES; bManualReset: BOOL; lpTimerName: PtrSTR): HANDLE 
	// END CreateWaitableTimer;
	
	proc OpenWaitableTimerA(dwDesiredAccess: set; bInheritHandle: BOOL; lpTimerName: PtrSTR): HANDLE 
	// END OpenWaitableTimerA;
	
	proc OpenWaitableTimerW(dwDesiredAccess: set; bInheritHandle: BOOL; lpTimerName: PtrWSTR): HANDLE 
	// END OpenWaitableTimerW;
	
	proc OpenWaitableTimer(dwDesiredAccess: set; bInheritHandle: BOOL; lpTimerName: PtrSTR): HANDLE 
	// END OpenWaitableTimer;
	
	proc SetWaitableTimer(hTimer: HANDLE; var lpDueTime: longint; lPeriod: integer; pfnCompletionRoutine: TIMERAPCROUTINE; lpArgToCompletionRoutine: PtrVoid; fResume: BOOL): BOOL 
	// END SetWaitableTimer;
	
	proc CancelWaitableTimer(hTimer: HANDLE): BOOL 
	// END CancelWaitableTimer;
	
	proc CreateFileMappingA(hFile: HANDLE; var lpFileMappingAttributes: SECURITY_ATTRIBUTES; flProtect: set; dwMaximumSizeHigh: integer; dwMaximumSizeLow: integer; lpName: PtrSTR): HANDLE 
	// END CreateFileMappingA;
	
	proc CreateFileMappingW(hFile: HANDLE; var lpFileMappingAttributes: SECURITY_ATTRIBUTES; flProtect: set; dwMaximumSizeHigh: integer; dwMaximumSizeLow: integer; lpName: PtrWSTR): HANDLE 
	// END CreateFileMappingW;
	
	proc CreateFileMapping(hFile: HANDLE; var lpFileMappingAttributes: SECURITY_ATTRIBUTES; flProtect: set; dwMaximumSizeHigh: integer; dwMaximumSizeLow: integer; lpName: PtrSTR): HANDLE 
	// END CreateFileMapping;
	
	proc OpenFileMappingA(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenFileMappingA;
	
	proc OpenFileMappingW(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrWSTR): HANDLE 
	// END OpenFileMappingW;
	
	proc OpenFileMapping(dwDesiredAccess: set; bInheritHandle: BOOL; lpName: PtrSTR): HANDLE 
	// END OpenFileMapping;
	
	proc GetLogicalDriveStringsA(nBufferLength: integer; lpBuffer: PtrSTR): integer 
	// END GetLogicalDriveStringsA;
	
	proc GetLogicalDriveStringsW(nBufferLength: integer; lpBuffer: PtrWSTR): integer 
	// END GetLogicalDriveStringsW;
	
	proc GetLogicalDriveStrings(nBufferLength: integer; lpBuffer: PtrSTR): integer 
	// END GetLogicalDriveStrings;
	
	proc LoadLibraryA(lpLibFileName: PtrSTR): HMODULE 
	// END LoadLibraryA;
	
	proc LoadLibraryW(lpLibFileName: PtrWSTR): HMODULE 
	// END LoadLibraryW;
	
	proc LoadLibrary(lpLibFileName: PtrSTR): HMODULE 
	// END LoadLibrary;
	
	proc LoadLibraryExA(lpLibFileName: PtrSTR; hFile: HANDLE; dwFlags: set): HMODULE 
	// END LoadLibraryExA;
	
	proc LoadLibraryExW(lpLibFileName: PtrWSTR; hFile: HANDLE; dwFlags: set): HMODULE 
	// END LoadLibraryExW;
	
	proc LoadLibraryEx(lpLibFileName: PtrSTR; hFile: HANDLE; dwFlags: set): HMODULE 
	// END LoadLibraryEx;
	
	proc GetModuleFileNameA(hModule: HMODULE; lpFilename: PtrSTR; nSize: integer): integer 
	// END GetModuleFileNameA;
	
	proc GetModuleFileNameW(hModule: HMODULE; lpFilename: PtrWSTR; nSize: integer): integer 
	// END GetModuleFileNameW;
	
	proc GetModuleFileName(hModule: HMODULE; lpFilename: PtrSTR; nSize: integer): integer 
	// END GetModuleFileName;
	
	proc GetModuleHandleA(lpModuleName: PtrSTR): HMODULE 
	// END GetModuleHandleA;
	
	proc GetModuleHandleW(lpModuleName: PtrWSTR): HMODULE 
	// END GetModuleHandleW;
	
	proc GetModuleHandle(lpModuleName: PtrSTR): HMODULE 
	// END GetModuleHandle;
	
	proc CreateProcessA(lpApplicationName: PtrSTR; lpCommandLine: PtrSTR; var lpProcessAttributes: SECURITY_ATTRIBUTES; var lpThreadAttributes: SECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: set; lpEnvironment: PtrVoid; lpCurrentDirectory: PtrSTR; var lpStartupInfo: STARTUPINFOA; var lpProcessInformation: PROCESS_INFORMATION): BOOL 
	// END CreateProcessA;
	
	proc CreateProcessW(lpApplicationName: PtrWSTR; lpCommandLine: PtrWSTR; var lpProcessAttributes: SECURITY_ATTRIBUTES; var lpThreadAttributes: SECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: set; lpEnvironment: PtrVoid; lpCurrentDirectory: PtrWSTR; var lpStartupInfo: STARTUPINFOW; var lpProcessInformation: PROCESS_INFORMATION): BOOL 
	// END CreateProcessW;
	
	proc CreateProcess(lpApplicationName: PtrSTR; lpCommandLine: PtrSTR; var lpProcessAttributes: SECURITY_ATTRIBUTES; var lpThreadAttributes: SECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: set; lpEnvironment: PtrVoid; lpCurrentDirectory: PtrSTR; var lpStartupInfo: STARTUPINFOA; var lpProcessInformation: PROCESS_INFORMATION): BOOL 
	// END CreateProcess;
	
	proc SetProcessShutdownParameters(dwLevel: integer; dwFlags: set): BOOL 
	// END SetProcessShutdownParameters;
	
	proc GetProcessShutdownParameters(var lpdwLevel: integer; var lpdwFlags: set): BOOL 
	// END GetProcessShutdownParameters;
	
	proc GetProcessVersion(ProcessId: integer): integer 
	// END GetProcessVersion;
	
	proc FatalAppExitA(uAction: integer; lpMessageText: PtrSTR) 
	// END FatalAppExitA;
	
	proc FatalAppExitW(uAction: integer; lpMessageText: PtrWSTR) 
	// END FatalAppExitW;
	
	proc FatalAppExit(uAction: integer; lpMessageText: PtrSTR) 
	// END FatalAppExit;
	
	proc GetStartupInfoA(var lpStartupInfo: STARTUPINFOA) 
	// END GetStartupInfoA;
	
	proc GetStartupInfoW(var lpStartupInfo: STARTUPINFOW) 
	// END GetStartupInfoW;
	
	proc GetStartupInfo(var lpStartupInfo: STARTUPINFOA) 
	// END GetStartupInfo;
	
	proc GetCommandLineA(): PtrSTR 
	// END GetCommandLineA;
	
	proc GetCommandLineW(): PtrWSTR 
	// END GetCommandLineW;
	
	proc GetCommandLine(): PtrSTR 
	// END GetCommandLine;
	
	proc GetEnvironmentVariableA(lpName: PtrSTR; lpBuffer: PtrSTR; nSize: integer): integer 
	// END GetEnvironmentVariableA;
	
	proc GetEnvironmentVariableW(lpName: PtrWSTR; lpBuffer: PtrWSTR; nSize: integer): integer 
	// END GetEnvironmentVariableW;
	
	proc GetEnvironmentVariable(lpName: PtrSTR; lpBuffer: PtrSTR; nSize: integer): integer 
	// END GetEnvironmentVariable;
	
	proc SetEnvironmentVariableA(lpName: PtrSTR; lpValue: PtrSTR): BOOL 
	// END SetEnvironmentVariableA;
	
	proc SetEnvironmentVariableW(lpName: PtrWSTR; lpValue: PtrWSTR): BOOL 
	// END SetEnvironmentVariableW;
	
	proc SetEnvironmentVariable(lpName: PtrSTR; lpValue: PtrSTR): BOOL 
	// END SetEnvironmentVariable;
	
	proc ExpandEnvironmentStringsA(lpSrc: PtrSTR; lpDst: PtrSTR; nSize: integer): integer 
	// END ExpandEnvironmentStringsA;
	
	proc ExpandEnvironmentStringsW(lpSrc: PtrWSTR; lpDst: PtrWSTR; nSize: integer): integer 
	// END ExpandEnvironmentStringsW;
	
	proc ExpandEnvironmentStrings(lpSrc: PtrSTR; lpDst: PtrSTR; nSize: integer): integer 
	// END ExpandEnvironmentStrings;
	
	proc OutputDebugStringA(lpOutputString: PtrSTR) 
	// END OutputDebugStringA;
	
	proc OutputDebugStringW(lpOutputString: PtrWSTR) 
	// END OutputDebugStringW;
	
	proc OutputDebugString(lpOutputString: PtrSTR) 
	// END OutputDebugString;
	
	proc FindResourceA(hModule: HMODULE; lpName: PtrSTR; lpType: PtrSTR): HRSRC 
	// END FindResourceA;
	
	proc FindResourceW(hModule: HMODULE; lpName: PtrWSTR; lpType: PtrWSTR): HRSRC 
	// END FindResourceW;
	
	proc FindResource(hModule: HMODULE; lpName: PtrSTR; lpType: PtrSTR): HRSRC 
	// END FindResource;
	
	proc FindResourceExA(hModule: HMODULE; lpType: PtrSTR; lpName: PtrSTR; wLanguage: shortint): HRSRC 
	// END FindResourceExA;
	
	proc FindResourceExW(hModule: HMODULE; lpType: PtrWSTR; lpName: PtrWSTR; wLanguage: shortint): HRSRC 
	// END FindResourceExW;
	
	proc FindResourceEx(hModule: HMODULE; lpType: PtrSTR; lpName: PtrSTR; wLanguage: shortint): HRSRC 
	// END FindResourceEx;
	
	proc EnumResourceTypesA(hModule: HMODULE; lpEnumFunc: ENUMRESTYPEPROC; lParam: integer): BOOL 
	// END EnumResourceTypesA;
	
	proc EnumResourceTypesW(hModule: HMODULE; lpEnumFunc: ENUMRESTYPEPROC; lParam: integer): BOOL 
	// END EnumResourceTypesW;
	
	proc EnumResourceTypes(hModule: HMODULE; lpEnumFunc: ENUMRESTYPEPROC; lParam: integer): BOOL 
	// END EnumResourceTypes;
	
	proc EnumResourceNamesA(hModule: HMODULE; lpType: PtrSTR; lpEnumFunc: ENUMRESNAMEPROC; lParam: integer): BOOL 
	// END EnumResourceNamesA;
	
	proc EnumResourceNamesW(hModule: HMODULE; lpType: PtrWSTR; lpEnumFunc: ENUMRESNAMEPROC; lParam: integer): BOOL 
	// END EnumResourceNamesW;
	
	proc EnumResourceNames(hModule: HMODULE; lpType: PtrSTR; lpEnumFunc: ENUMRESNAMEPROC; lParam: integer): BOOL 
	// END EnumResourceNames;
	
	proc EnumResourceLanguagesA(hModule: HMODULE; lpType: PtrSTR; lpName: PtrSTR; lpEnumFunc: ENUMRESLANGPROC; lParam: integer): BOOL 
	// END EnumResourceLanguagesA;
	
	proc EnumResourceLanguagesW(hModule: HMODULE; lpType: PtrWSTR; lpName: PtrWSTR; lpEnumFunc: ENUMRESLANGPROC; lParam: integer): BOOL 
	// END EnumResourceLanguagesW;
	
	proc EnumResourceLanguages(hModule: HMODULE; lpType: PtrSTR; lpName: PtrSTR; lpEnumFunc: ENUMRESLANGPROC; lParam: integer): BOOL 
	// END EnumResourceLanguages;
	
	proc BeginUpdateResourceA(pFileName: PtrSTR; bDeleteExistingResources: BOOL): HANDLE 
	// END BeginUpdateResourceA;
	
	proc BeginUpdateResourceW(pFileName: PtrWSTR; bDeleteExistingResources: BOOL): HANDLE 
	// END BeginUpdateResourceW;
	
	proc BeginUpdateResource(pFileName: PtrSTR; bDeleteExistingResources: BOOL): HANDLE 
	// END BeginUpdateResource;
	
	proc UpdateResourceA(hUpdate: HANDLE; lpType: PtrSTR; lpName: PtrSTR; wLanguage: shortint; lpData: PtrVoid; cbData: integer): BOOL 
	// END UpdateResourceA;
	
	proc UpdateResourceW(hUpdate: HANDLE; lpType: PtrWSTR; lpName: PtrWSTR; wLanguage: shortint; lpData: PtrVoid; cbData: integer): BOOL 
	// END UpdateResourceW;
	
	proc UpdateResource(hUpdate: HANDLE; lpType: PtrSTR; lpName: PtrSTR; wLanguage: shortint; lpData: PtrVoid; cbData: integer): BOOL 
	// END UpdateResource;
	
	proc EndUpdateResourceA(hUpdate: HANDLE; fDiscard: BOOL): BOOL 
	// END EndUpdateResourceA;
	
	proc EndUpdateResourceW(hUpdate: HANDLE; fDiscard: BOOL): BOOL 
	// END EndUpdateResourceW;
	
	proc EndUpdateResource(hUpdate: HANDLE; fDiscard: BOOL): BOOL 
	// END EndUpdateResource;
	
	proc GlobalAddAtomA(lpString: PtrSTR): ATOM 
	// END GlobalAddAtomA;
	
	proc GlobalAddAtomW(lpString: PtrWSTR): ATOM 
	// END GlobalAddAtomW;
	
	proc GlobalAddAtom(lpString: PtrSTR): ATOM 
	// END GlobalAddAtom;
	
	proc GlobalFindAtomA(lpString: PtrSTR): ATOM 
	// END GlobalFindAtomA;
	
	proc GlobalFindAtomW(lpString: PtrWSTR): ATOM 
	// END GlobalFindAtomW;
	
	proc GlobalFindAtom(lpString: PtrSTR): ATOM 
	// END GlobalFindAtom;
	
	proc GlobalGetAtomNameA(nAtom: ATOM; lpBuffer: PtrSTR; nSize: integer): integer 
	// END GlobalGetAtomNameA;
	
	proc GlobalGetAtomNameW(nAtom: ATOM; lpBuffer: PtrWSTR; nSize: integer): integer 
	// END GlobalGetAtomNameW;
	
	proc GlobalGetAtomName(nAtom: ATOM; lpBuffer: PtrSTR; nSize: integer): integer 
	// END GlobalGetAtomName;
	
	proc AddAtomA(lpString: PtrSTR): ATOM 
	// END AddAtomA;
	
	proc AddAtomW(lpString: PtrWSTR): ATOM 
	// END AddAtomW;
	
	proc AddAtom(lpString: PtrSTR): ATOM 
	// END AddAtom;
	
	proc FindAtomA(lpString: PtrSTR): ATOM 
	// END FindAtomA;
	
	proc FindAtomW(lpString: PtrWSTR): ATOM 
	// END FindAtomW;
	
	proc FindAtom(lpString: PtrSTR): ATOM 
	// END FindAtom;
	
	proc GetAtomNameA(nAtom: ATOM; lpBuffer: PtrSTR; nSize: integer): integer 
	// END GetAtomNameA;
	
	proc GetAtomNameW(nAtom: ATOM; lpBuffer: PtrWSTR; nSize: integer): integer 
	// END GetAtomNameW;
	
	proc GetAtomName(nAtom: ATOM; lpBuffer: PtrSTR; nSize: integer): integer 
	// END GetAtomName;
	
	proc GetProfileIntA(lpAppName: PtrSTR; lpKeyName: PtrSTR; nDefault: integer): integer 
	// END GetProfileIntA;
	
	proc GetProfileIntW(lpAppName: PtrWSTR; lpKeyName: PtrWSTR; nDefault: integer): integer 
	// END GetProfileIntW;
	
	proc GetProfileInt(lpAppName: PtrSTR; lpKeyName: PtrSTR; nDefault: integer): integer 
	// END GetProfileInt;
	
	proc GetProfileStringA(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpDefault: PtrSTR; lpReturnedString: PtrSTR; nSize: integer): integer 
	// END GetProfileStringA;
	
	proc GetProfileStringW(lpAppName: PtrWSTR; lpKeyName: PtrWSTR; lpDefault: PtrWSTR; lpReturnedString: PtrWSTR; nSize: integer): integer 
	// END GetProfileStringW;
	
	proc GetProfileString(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpDefault: PtrSTR; lpReturnedString: PtrSTR; nSize: integer): integer 
	// END GetProfileString;
	
	proc WriteProfileStringA(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpString: PtrSTR): BOOL 
	// END WriteProfileStringA;
	
	proc WriteProfileStringW(lpAppName: PtrWSTR; lpKeyName: PtrWSTR; lpString: PtrWSTR): BOOL 
	// END WriteProfileStringW;
	
	proc WriteProfileString(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpString: PtrSTR): BOOL 
	// END WriteProfileString;
	
	proc GetProfileSectionA(lpAppName: PtrSTR; lpReturnedString: PtrSTR; nSize: integer): integer 
	// END GetProfileSectionA;
	
	proc GetProfileSectionW(lpAppName: PtrWSTR; lpReturnedString: PtrWSTR; nSize: integer): integer 
	// END GetProfileSectionW;
	
	proc GetProfileSection(lpAppName: PtrSTR; lpReturnedString: PtrSTR; nSize: integer): integer 
	// END GetProfileSection;
	
	proc WriteProfileSectionA(lpAppName: PtrSTR; lpString: PtrSTR): BOOL 
	// END WriteProfileSectionA;
	
	proc WriteProfileSectionW(lpAppName: PtrWSTR; lpString: PtrWSTR): BOOL 
	// END WriteProfileSectionW;
	
	proc WriteProfileSection(lpAppName: PtrSTR; lpString: PtrSTR): BOOL 
	// END WriteProfileSection;
	
	proc GetPrivateProfileIntA(lpAppName: PtrSTR; lpKeyName: PtrSTR; nDefault: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileIntA;
	
	proc GetPrivateProfileIntW(lpAppName: PtrWSTR; lpKeyName: PtrWSTR; nDefault: integer; lpFileName: PtrWSTR): integer 
	// END GetPrivateProfileIntW;
	
	proc GetPrivateProfileInt(lpAppName: PtrSTR; lpKeyName: PtrSTR; nDefault: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileInt;
	
	proc GetPrivateProfileStringA(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpDefault: PtrSTR; lpReturnedString: PtrSTR; nSize: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileStringA;
	
	proc GetPrivateProfileStringW(lpAppName: PtrWSTR; lpKeyName: PtrWSTR; lpDefault: PtrWSTR; lpReturnedString: PtrWSTR; nSize: integer; lpFileName: PtrWSTR): integer 
	// END GetPrivateProfileStringW;
	
	proc GetPrivateProfileString(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpDefault: PtrSTR; lpReturnedString: PtrSTR; nSize: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileString;
	
	proc WritePrivateProfileStringA(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpString: PtrSTR; lpFileName: PtrSTR): BOOL 
	// END WritePrivateProfileStringA;
	
	proc WritePrivateProfileStringW(lpAppName: PtrWSTR; lpKeyName: PtrWSTR; lpString: PtrWSTR; lpFileName: PtrWSTR): BOOL 
	// END WritePrivateProfileStringW;
	
	proc WritePrivateProfileString(lpAppName: PtrSTR; lpKeyName: PtrSTR; lpString: PtrSTR; lpFileName: PtrSTR): BOOL 
	// END WritePrivateProfileString;
	
	proc GetPrivateProfileSectionA(lpAppName: PtrSTR; lpReturnedString: PtrSTR; nSize: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileSectionA;
	
	proc GetPrivateProfileSectionW(lpAppName: PtrWSTR; lpReturnedString: PtrWSTR; nSize: integer; lpFileName: PtrWSTR): integer 
	// END GetPrivateProfileSectionW;
	
	proc GetPrivateProfileSection(lpAppName: PtrSTR; lpReturnedString: PtrSTR; nSize: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileSection;
	
	proc WritePrivateProfileSectionA(lpAppName: PtrSTR; lpString: PtrSTR; lpFileName: PtrSTR): BOOL 
	// END WritePrivateProfileSectionA;
	
	proc WritePrivateProfileSectionW(lpAppName: PtrWSTR; lpString: PtrWSTR; lpFileName: PtrWSTR): BOOL 
	// END WritePrivateProfileSectionW;
	
	proc WritePrivateProfileSection(lpAppName: PtrSTR; lpString: PtrSTR; lpFileName: PtrSTR): BOOL 
	// END WritePrivateProfileSection;
	
	proc GetPrivateProfileSectionNamesA(lpszReturnBuffer: PtrSTR; nSize: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileSectionNamesA;
	
	proc GetPrivateProfileSectionNamesW(lpszReturnBuffer: PtrWSTR; nSize: integer; lpFileName: PtrWSTR): integer 
	// END GetPrivateProfileSectionNamesW;
	
	proc GetPrivateProfileSectionNames(lpszReturnBuffer: PtrSTR; nSize: integer; lpFileName: PtrSTR): integer 
	// END GetPrivateProfileSectionNames;
	
	proc GetPrivateProfileStructA(lpszSection: PtrSTR; lpszKey: PtrSTR; lpStruct: PtrVoid; uSizeStruct: integer; szFile: PtrSTR): BOOL 
	// END GetPrivateProfileStructA;
	
	proc GetPrivateProfileStructW(lpszSection: PtrWSTR; lpszKey: PtrWSTR; lpStruct: PtrVoid; uSizeStruct: integer; szFile: PtrWSTR): BOOL 
	// END GetPrivateProfileStructW;
	
	proc GetPrivateProfileStruct(lpszSection: PtrSTR; lpszKey: PtrSTR; lpStruct: PtrVoid; uSizeStruct: integer; szFile: PtrSTR): BOOL 
	// END GetPrivateProfileStruct;
	
	proc WritePrivateProfileStructA(lpszSection: PtrSTR; lpszKey: PtrSTR; lpStruct: PtrVoid; uSizeStruct: integer; szFile: PtrSTR): BOOL 
	// END WritePrivateProfileStructA;
	
	proc WritePrivateProfileStructW(lpszSection: PtrWSTR; lpszKey: PtrWSTR; lpStruct: PtrVoid; uSizeStruct: integer; szFile: PtrWSTR): BOOL 
	// END WritePrivateProfileStructW;
	
	proc WritePrivateProfileStruct(lpszSection: PtrSTR; lpszKey: PtrSTR; lpStruct: PtrVoid; uSizeStruct: integer; szFile: PtrSTR): BOOL 
	// END WritePrivateProfileStruct;
	
	proc GetDriveTypeA(lpRootPathName: PtrSTR): integer 
	// END GetDriveTypeA;
	
	proc GetDriveTypeW(lpRootPathName: PtrWSTR): integer 
	// END GetDriveTypeW;
	
	proc GetDriveType(lpRootPathName: PtrSTR): integer 
	// END GetDriveType;
	
	proc GetSystemDirectoryA(lpBuffer: PtrSTR; uSize: integer): integer 
	// END GetSystemDirectoryA;
	
	proc GetSystemDirectoryW(lpBuffer: PtrWSTR; uSize: integer): integer 
	// END GetSystemDirectoryW;
	
	proc GetSystemDirectory(lpBuffer: PtrSTR; uSize: integer): integer 
	// END GetSystemDirectory;
	
	proc GetTempPathA(nBufferLength: integer; lpBuffer: PtrSTR): integer 
	// END GetTempPathA;
	
	proc GetTempPathW(nBufferLength: integer; lpBuffer: PtrWSTR): integer 
	// END GetTempPathW;
	
	proc GetTempPath(nBufferLength: integer; lpBuffer: PtrSTR): integer 
	// END GetTempPath;
	
	proc GetTempFileNameA(lpPathName: PtrSTR; lpPrefixString: PtrSTR; uUnique: integer; lpTempFileName: PtrSTR): integer 
	// END GetTempFileNameA;
	
	proc GetTempFileNameW(lpPathName: PtrWSTR; lpPrefixString: PtrWSTR; uUnique: integer; lpTempFileName: PtrWSTR): integer 
	// END GetTempFileNameW;
	
	proc GetTempFileName(lpPathName: PtrSTR; lpPrefixString: PtrSTR; uUnique: integer; lpTempFileName: PtrSTR): integer 
	// END GetTempFileName;
	
	proc GetWindowsDirectoryA(lpBuffer: PtrSTR; uSize: integer): integer 
	// END GetWindowsDirectoryA;
	
	proc GetWindowsDirectoryW(lpBuffer: PtrWSTR; uSize: integer): integer 
	// END GetWindowsDirectoryW;
	
	proc GetWindowsDirectory(lpBuffer: PtrSTR; uSize: integer): integer 
	// END GetWindowsDirectory;
	
	proc SetCurrentDirectoryA(lpPathName: PtrSTR): BOOL 
	// END SetCurrentDirectoryA;
	
	proc SetCurrentDirectoryW(lpPathName: PtrWSTR): BOOL 
	// END SetCurrentDirectoryW;
	
	proc SetCurrentDirectory(lpPathName: PtrSTR): BOOL 
	// END SetCurrentDirectory;
	
	proc GetCurrentDirectoryA(nBufferLength: integer; lpBuffer: PtrSTR): integer 
	// END GetCurrentDirectoryA;
	
	proc GetCurrentDirectoryW(nBufferLength: integer; lpBuffer: PtrWSTR): integer 
	// END GetCurrentDirectoryW;
	
	proc GetCurrentDirectory(nBufferLength: integer; lpBuffer: PtrSTR): integer 
	// END GetCurrentDirectory;
	
	proc GetDiskFreeSpaceA(lpRootPathName: PtrSTR; var lpSectorsPerCluster: integer; var lpBytesPerSector: integer; var lpNumberOfFreeClusters: integer; var lpTotalNumberOfClusters: integer): BOOL 
	// END GetDiskFreeSpaceA;
	
	proc GetDiskFreeSpaceW(lpRootPathName: PtrWSTR; var lpSectorsPerCluster: integer; var lpBytesPerSector: integer; var lpNumberOfFreeClusters: integer; var lpTotalNumberOfClusters: integer): BOOL 
	// END GetDiskFreeSpaceW;
	
	proc GetDiskFreeSpace(lpRootPathName: PtrSTR; var lpSectorsPerCluster: integer; var lpBytesPerSector: integer; var lpNumberOfFreeClusters: integer; var lpTotalNumberOfClusters: integer): BOOL 
	// END GetDiskFreeSpace;
	
	proc CreateDirectoryA(lpPathName: PtrSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): BOOL 
	// END CreateDirectoryA;
	
	proc CreateDirectoryW(lpPathName: PtrWSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): BOOL 
	// END CreateDirectoryW;
	
	proc CreateDirectory(lpPathName: PtrSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): BOOL 
	// END CreateDirectory;
	
	proc CreateDirectoryExA(lpTemplateDirectory: PtrSTR; lpNewDirectory: PtrSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): BOOL 
	// END CreateDirectoryExA;
	
	proc CreateDirectoryExW(lpTemplateDirectory: PtrWSTR; lpNewDirectory: PtrWSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): BOOL 
	// END CreateDirectoryExW;
	
	proc CreateDirectoryEx(lpTemplateDirectory: PtrSTR; lpNewDirectory: PtrSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): BOOL 
	// END CreateDirectoryEx;
	
	proc RemoveDirectoryA(lpPathName: PtrSTR): BOOL 
	// END RemoveDirectoryA;
	
	proc RemoveDirectoryW(lpPathName: PtrWSTR): BOOL 
	// END RemoveDirectoryW;
	
	proc RemoveDirectory(lpPathName: PtrSTR): BOOL 
	// END RemoveDirectory;
	
	proc GetFullPathNameA(lpFileName: PtrSTR; nBufferLength: integer; lpBuffer: PtrSTR; var lpFilePart: PtrSTR): integer 
	// END GetFullPathNameA;
	
	proc GetFullPathNameW(lpFileName: PtrWSTR; nBufferLength: integer; lpBuffer: PtrWSTR; var lpFilePart: PtrWSTR): integer 
	// END GetFullPathNameW;
	
	proc GetFullPathName(lpFileName: PtrSTR; nBufferLength: integer; lpBuffer: PtrSTR; var lpFilePart: PtrSTR): integer 
	// END GetFullPathName;
	
	proc DefineDosDeviceA(dwFlags: set; lpDeviceName: PtrSTR; lpTargetPath: PtrSTR): BOOL 
	// END DefineDosDeviceA;
	
	proc DefineDosDeviceW(dwFlags: set; lpDeviceName: PtrWSTR; lpTargetPath: PtrWSTR): BOOL 
	// END DefineDosDeviceW;
	
	proc DefineDosDevice(dwFlags: set; lpDeviceName: PtrSTR; lpTargetPath: PtrSTR): BOOL 
	// END DefineDosDevice;
	
	proc QueryDosDeviceA(lpDeviceName: PtrSTR; lpTargetPath: PtrSTR; ucchMax: integer): integer 
	// END QueryDosDeviceA;
	
	proc QueryDosDeviceW(lpDeviceName: PtrWSTR; lpTargetPath: PtrWSTR; ucchMax: integer): integer 
	// END QueryDosDeviceW;
	
	proc QueryDosDevice(lpDeviceName: PtrSTR; lpTargetPath: PtrSTR; ucchMax: integer): integer 
	// END QueryDosDevice;
	
	proc CreateFileA(lpFileName: PtrSTR; dwDesiredAccess: set; dwShareMode: set; var lpSecurityAttributes: SECURITY_ATTRIBUTES; dwCreationDisposition: integer; dwFlagsAndAttributes: set; hTemplateFile: HANDLE): HANDLE 
	// END CreateFileA;
	
	proc CreateFileW(lpFileName: PtrWSTR; dwDesiredAccess: set; dwShareMode: set; var lpSecurityAttributes: SECURITY_ATTRIBUTES; dwCreationDisposition: integer; dwFlagsAndAttributes: set; hTemplateFile: HANDLE): HANDLE 
	// END CreateFileW;
	
	proc CreateFile(lpFileName: PtrSTR; dwDesiredAccess: set; dwShareMode: set; var lpSecurityAttributes: SECURITY_ATTRIBUTES; dwCreationDisposition: integer; dwFlagsAndAttributes: set; hTemplateFile: HANDLE): HANDLE 
	// END CreateFile;
	
	proc SetFileAttributesA(lpFileName: PtrSTR; dwFileAttributes: set): BOOL 
	// END SetFileAttributesA;
	
	proc SetFileAttributesW(lpFileName: PtrWSTR; dwFileAttributes: set): BOOL 
	// END SetFileAttributesW;
	
	proc SetFileAttributes(lpFileName: PtrSTR; dwFileAttributes: set): BOOL 
	// END SetFileAttributes;
	
	proc GetFileAttributesA(lpFileName: PtrSTR): integer 
	// END GetFileAttributesA;
	
	proc GetFileAttributesW(lpFileName: PtrWSTR): integer 
	// END GetFileAttributesW;
	
	proc GetFileAttributes(lpFileName: PtrSTR): integer 
	// END GetFileAttributes;
	
	proc GetCompressedFileSizeA(lpFileName: PtrSTR; var lpFileSizeHigh: integer): integer 
	// END GetCompressedFileSizeA;
	
	proc GetCompressedFileSizeW(lpFileName: PtrWSTR; var lpFileSizeHigh: integer): integer 
	// END GetCompressedFileSizeW;
	
	proc GetCompressedFileSize(lpFileName: PtrSTR; var lpFileSizeHigh: integer): integer 
	// END GetCompressedFileSize;
	
	proc DeleteFileA(lpFileName: PtrSTR): BOOL 
	// END DeleteFileA;
	
	proc DeleteFileW(lpFileName: PtrWSTR): BOOL 
	// END DeleteFileW;
	
	proc DeleteFile(lpFileName: PtrSTR): BOOL 
	// END DeleteFile;
	
	proc FindFirstFileExA(lpFileName: PtrSTR; fInfoLevelId: FINDEX_INFO_LEVELS; lpFindFileData: PtrVoid; fSearchOp: FINDEX_SEARCH_OPS; lpSearchFilter: PtrVoid; dwAdditionalFlags: integer): HANDLE 
	// END FindFirstFileExA;
	
	proc FindFirstFileExW(lpFileName: PtrWSTR; fInfoLevelId: FINDEX_INFO_LEVELS; lpFindFileData: PtrVoid; fSearchOp: FINDEX_SEARCH_OPS; lpSearchFilter: PtrVoid; dwAdditionalFlags: integer): HANDLE 
	// END FindFirstFileExW;
	
	proc FindFirstFileEx(lpFileName: PtrSTR; fInfoLevelId: FINDEX_INFO_LEVELS; lpFindFileData: PtrVoid; fSearchOp: FINDEX_SEARCH_OPS; lpSearchFilter: PtrVoid; dwAdditionalFlags: integer): HANDLE 
	// END FindFirstFileEx;
	
	proc FindFirstFileA(lpFileName: PtrSTR; var lpFindFileData: WIN32_FIND_DATAA): HANDLE 
	// END FindFirstFileA;
	
	proc FindFirstFileW(lpFileName: PtrWSTR; var lpFindFileData: WIN32_FIND_DATAW): HANDLE 
	// END FindFirstFileW;
	
	proc FindFirstFile(lpFileName: PtrSTR; var lpFindFileData: WIN32_FIND_DATAA): HANDLE 
	// END FindFirstFile;
	
	proc FindNextFileA(hFindFile: HANDLE; var lpFindFileData: WIN32_FIND_DATAA): BOOL 
	// END FindNextFileA;
	
	proc FindNextFileW(hFindFile: HANDLE; var lpFindFileData: WIN32_FIND_DATAW): BOOL 
	// END FindNextFileW;
	
	proc FindNextFile(hFindFile: HANDLE; var lpFindFileData: WIN32_FIND_DATAA): BOOL 
	// END FindNextFile;
	
	proc SearchPathA(lpPath: PtrSTR; lpFileName: PtrSTR; lpExtension: PtrSTR; nBufferLength: integer; lpBuffer: PtrSTR; var lpFilePart: PtrSTR): integer 
	// END SearchPathA;
	
	proc SearchPathW(lpPath: PtrWSTR; lpFileName: PtrWSTR; lpExtension: PtrWSTR; nBufferLength: integer; lpBuffer: PtrWSTR; var lpFilePart: PtrWSTR): integer 
	// END SearchPathW;
	
	proc SearchPath(lpPath: PtrSTR; lpFileName: PtrSTR; lpExtension: PtrSTR; nBufferLength: integer; lpBuffer: PtrSTR; lpFilePart: unsafe pointer to (* ? *)carray of PtrSTR): integer 
	// END SearchPath;
	
	proc CopyFileA(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR; bFailIfExists: BOOL): BOOL 
	// END CopyFileA;
	
	proc CopyFileW(lpExistingFileName: PtrWSTR; lpNewFileName: PtrWSTR; bFailIfExists: BOOL): BOOL 
	// END CopyFileW;
	
	proc CopyFile(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR; bFailIfExists: BOOL): BOOL 
	// END CopyFile;
	
	proc CopyFileExA(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR; lpProgressRoutine: PROGRESS_ROUTINE; lpData: PtrVoid; var pbCancel: BOOL; dwCopyFlags: integer): BOOL 
	// END CopyFileExA;
	
	proc CopyFileExW(lpExistingFileName: PtrWSTR; lpNewFileName: PtrWSTR; lpProgressRoutine: PROGRESS_ROUTINE; lpData: PtrVoid; var pbCancel: BOOL; dwCopyFlags: integer): BOOL 
	// END CopyFileExW;
	
	proc CopyFileEx(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR; lpProgressRoutine: PROGRESS_ROUTINE; lpData: PtrVoid; var pbCancel: BOOL; dwCopyFlags: integer): BOOL 
	// END CopyFileEx;
	
	proc MoveFileA(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR): BOOL 
	// END MoveFileA;
	
	proc MoveFileW(lpExistingFileName: PtrWSTR; lpNewFileName: PtrWSTR): BOOL 
	// END MoveFileW;
	
	proc MoveFile(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR): BOOL 
	// END MoveFile;
	
	proc MoveFileExA(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR; dwFlags: set): BOOL 
	// END MoveFileExA;
	
	proc MoveFileExW(lpExistingFileName: PtrWSTR; lpNewFileName: PtrWSTR; dwFlags: set): BOOL 
	// END MoveFileExW;
	
	proc MoveFileEx(lpExistingFileName: PtrSTR; lpNewFileName: PtrSTR; dwFlags: set): BOOL 
	// END MoveFileEx;
	
	proc CreateNamedPipeA(lpName: PtrSTR; dwOpenMode: integer; dwPipeMode: integer; nMaxInstances: integer; nOutBufferSize: integer; nInBufferSize: integer; nDefaultTimeOut: integer; var lpSecurityAttributes: SECURITY_ATTRIBUTES): HANDLE 
	// END CreateNamedPipeA;
	
	proc CreateNamedPipeW(lpName: PtrWSTR; dwOpenMode: integer; dwPipeMode: integer; nMaxInstances: integer; nOutBufferSize: integer; nInBufferSize: integer; nDefaultTimeOut: integer; var lpSecurityAttributes: SECURITY_ATTRIBUTES): HANDLE 
	// END CreateNamedPipeW;
	
	proc CreateNamedPipe(lpName: PtrSTR; dwOpenMode: integer; dwPipeMode: integer; nMaxInstances: integer; nOutBufferSize: integer; nInBufferSize: integer; nDefaultTimeOut: integer; var lpSecurityAttributes: SECURITY_ATTRIBUTES): HANDLE 
	// END CreateNamedPipe;
	
	proc GetNamedPipeHandleStateA(hNamedPipe: HANDLE; var lpState: integer; var lpCurInstances: integer; var lpMaxCollectionCount: integer; var lpCollectDataTimeout: integer; lpUserName: PtrSTR; nMaxUserNameSize: integer): BOOL 
	// END GetNamedPipeHandleStateA;
	
	proc GetNamedPipeHandleStateW(hNamedPipe: HANDLE; var lpState: integer; var lpCurInstances: integer; var lpMaxCollectionCount: integer; var lpCollectDataTimeout: integer; lpUserName: PtrWSTR; nMaxUserNameSize: integer): BOOL 
	// END GetNamedPipeHandleStateW;
	
	proc GetNamedPipeHandleState(hNamedPipe: HANDLE; var lpState: integer; var lpCurInstances: integer; var lpMaxCollectionCount: integer; var lpCollectDataTimeout: integer; lpUserName: PtrSTR; nMaxUserNameSize: integer): BOOL 
	// END GetNamedPipeHandleState;
	
	proc CallNamedPipeA(lpNamedPipeName: PtrSTR; lpInBuffer: PtrVoid; nInBufferSize: integer; lpOutBuffer: PtrVoid; nOutBufferSize: integer; var lpBytesRead: integer; nTimeOut: integer): BOOL 
	// END CallNamedPipeA;
	
	proc CallNamedPipeW(lpNamedPipeName: PtrWSTR; lpInBuffer: PtrVoid; nInBufferSize: integer; lpOutBuffer: PtrVoid; nOutBufferSize: integer; var lpBytesRead: integer; nTimeOut: integer): BOOL 
	// END CallNamedPipeW;
	
	proc CallNamedPipe(lpNamedPipeName: PtrSTR; lpInBuffer: PtrVoid; nInBufferSize: integer; lpOutBuffer: PtrVoid; nOutBufferSize: integer; var lpBytesRead: integer; nTimeOut: integer): BOOL 
	// END CallNamedPipe;
	
	proc WaitNamedPipeA(lpNamedPipeName: PtrSTR; nTimeOut: integer): BOOL 
	// END WaitNamedPipeA;
	
	proc WaitNamedPipeW(lpNamedPipeName: PtrWSTR; nTimeOut: integer): BOOL 
	// END WaitNamedPipeW;
	
	proc WaitNamedPipe(lpNamedPipeName: PtrSTR; nTimeOut: integer): BOOL 
	// END WaitNamedPipe;
	
	proc SetVolumeLabelA(lpRootPathName: PtrSTR; lpVolumeName: PtrSTR): BOOL 
	// END SetVolumeLabelA;
	
	proc SetVolumeLabelW(lpRootPathName: PtrWSTR; lpVolumeName: PtrWSTR): BOOL 
	// END SetVolumeLabelW;
	
	proc SetVolumeLabel(lpRootPathName: PtrSTR; lpVolumeName: PtrSTR): BOOL 
	// END SetVolumeLabel;
	
	proc SetFileApisToOEM() 
	// END SetFileApisToOEM;
	
	proc SetFileApisToANSI() 
	// END SetFileApisToANSI;
	
	proc AreFileApisANSI(): BOOL 
	// END AreFileApisANSI;
	
	proc GetVolumeInformationA(lpRootPathName: PtrSTR; lpVolumeNameBuffer: PtrSTR; nVolumeNameSize: integer; var lpVolumeSerialNumber: integer; var lpMaximumComponentLength: integer; var lpFileSystemFlags: set; lpFileSystemNameBuffer: PtrSTR; nFileSystemNameSize: integer): BOOL 
	// END GetVolumeInformationA;
	
	proc GetVolumeInformationW(lpRootPathName: PtrWSTR; lpVolumeNameBuffer: PtrWSTR; nVolumeNameSize: integer; var lpVolumeSerialNumber: integer; var lpMaximumComponentLength: integer; var lpFileSystemFlags: set; lpFileSystemNameBuffer: PtrWSTR; nFileSystemNameSize: integer): BOOL 
	// END GetVolumeInformationW;
	
	proc GetVolumeInformation(lpRootPathName: PtrSTR; lpVolumeNameBuffer: PtrSTR; nVolumeNameSize: integer; var lpVolumeSerialNumber: integer; var lpMaximumComponentLength: integer; var lpFileSystemFlags: set; lpFileSystemNameBuffer: PtrSTR; nFileSystemNameSize: integer): BOOL 
	// END GetVolumeInformation;
	
	proc ClearEventLogA(hEventLog: HANDLE; lpBackupFileName: PtrSTR): BOOL 
	// END ClearEventLogA;
	
	proc ClearEventLogW(hEventLog: HANDLE; lpBackupFileName: PtrWSTR): BOOL 
	// END ClearEventLogW;
	
	proc ClearEventLog(hEventLog: HANDLE; lpBackupFileName: PtrSTR): BOOL 
	// END ClearEventLog;
	
	proc BackupEventLogA(hEventLog: HANDLE; lpBackupFileName: PtrSTR): BOOL 
	// END BackupEventLogA;
	
	proc BackupEventLogW(hEventLog: HANDLE; lpBackupFileName: PtrWSTR): BOOL 
	// END BackupEventLogW;
	
	proc BackupEventLog(hEventLog: HANDLE; lpBackupFileName: PtrSTR): BOOL 
	// END BackupEventLog;
	
	proc CloseEventLog(hEventLog: HANDLE): BOOL 
	// END CloseEventLog;
	
	proc DeregisterEventSource(hEventLog: HANDLE): BOOL 
	// END DeregisterEventSource;
	
	proc NotifyChangeEventLog(hEventLog: HANDLE; hEvent: HANDLE): BOOL 
	// END NotifyChangeEventLog;
	
	proc GetNumberOfEventLogRecords(hEventLog: HANDLE; var NumberOfRecords: integer): BOOL 
	// END GetNumberOfEventLogRecords;
	
	proc GetOldestEventLogRecord(hEventLog: HANDLE; var OldestRecord: integer): BOOL 
	// END GetOldestEventLogRecord;
	
	proc OpenEventLogA(lpUNCServerName: PtrSTR; lpSourceName: PtrSTR): HANDLE 
	// END OpenEventLogA;
	
	proc OpenEventLogW(lpUNCServerName: PtrWSTR; lpSourceName: PtrWSTR): HANDLE 
	// END OpenEventLogW;
	
	proc OpenEventLog(lpUNCServerName: PtrSTR; lpSourceName: PtrSTR): HANDLE 
	// END OpenEventLog;
	
	proc RegisterEventSourceA(lpUNCServerName: PtrSTR; lpSourceName: PtrSTR): HANDLE 
	// END RegisterEventSourceA;
	
	proc RegisterEventSourceW(lpUNCServerName: PtrWSTR; lpSourceName: PtrWSTR): HANDLE 
	// END RegisterEventSourceW;
	
	proc RegisterEventSource(lpUNCServerName: PtrSTR; lpSourceName: PtrSTR): HANDLE 
	// END RegisterEventSource;
	
	proc OpenBackupEventLogA(lpUNCServerName: PtrSTR; lpFileName: PtrSTR): HANDLE 
	// END OpenBackupEventLogA;
	
	proc OpenBackupEventLogW(lpUNCServerName: PtrWSTR; lpFileName: PtrWSTR): HANDLE 
	// END OpenBackupEventLogW;
	
	proc OpenBackupEventLog(lpUNCServerName: PtrSTR; lpFileName: PtrSTR): HANDLE 
	// END OpenBackupEventLog;
	
	proc ReadEventLogA(hEventLog: HANDLE; dwReadFlags: set; dwRecordOffset: integer; lpBuffer: PtrVoid; nNumberOfBytesToRead: integer; var pnBytesRead: integer; var pnMinNumberOfBytesNeeded: integer): BOOL 
	// END ReadEventLogA;
	
	proc ReadEventLogW(hEventLog: HANDLE; dwReadFlags: set; dwRecordOffset: integer; lpBuffer: PtrVoid; nNumberOfBytesToRead: integer; var pnBytesRead: integer; var pnMinNumberOfBytesNeeded: integer): BOOL 
	// END ReadEventLogW;
	
	proc ReadEventLog(hEventLog: HANDLE; dwReadFlags: set; dwRecordOffset: integer; lpBuffer: PtrVoid; nNumberOfBytesToRead: integer; var pnBytesRead: integer; var pnMinNumberOfBytesNeeded: integer): BOOL 
	// END ReadEventLog;
	
	proc ReportEventA(hEventLog: HANDLE; wType: shortint; wCategory: shortint; dwEventID: integer; lpUserSid: PSID; wNumStrings: shortint; dwDataSize: integer; var lpStrings: PtrSTR; lpRawData: PtrVoid): BOOL 
	// END ReportEventA;
	
	proc ReportEventW(hEventLog: HANDLE; wType: shortint; wCategory: shortint; dwEventID: integer; lpUserSid: PSID; wNumStrings: shortint; dwDataSize: integer; lpStrings: unsafe pointer to (* ? *)carray of PtrWSTR; lpRawData: PtrVoid): BOOL 
	// END ReportEventW;
	
	proc ReportEvent(hEventLog: HANDLE; wType: shortint; wCategory: shortint; dwEventID: integer; lpUserSid: PSID; wNumStrings: shortint; dwDataSize: integer; var lpStrings: PtrSTR; lpRawData: PtrVoid): BOOL 
	// END ReportEvent;
	
	proc DuplicateToken(ExistingTokenHandle: HANDLE; ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL; var DuplicateTokenHandle: HANDLE): BOOL 
	// END DuplicateToken;
	
	proc GetKernelObjectSecurity(Handle: HANDLE; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetKernelObjectSecurity;
	
	proc ImpersonateNamedPipeClient(hNamedPipe: HANDLE): BOOL 
	// END ImpersonateNamedPipeClient;
	
	proc ImpersonateSelf(ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL): BOOL 
	// END ImpersonateSelf;
	
	proc RevertToSelf(): BOOL 
	// END RevertToSelf;
	
	proc SetThreadToken(var Thread: HANDLE; Token: HANDLE): BOOL 
	// END SetThreadToken;
	
	proc AccessCheck(pSecurityDescriptor: PSECURITY_DESCRIPTOR; ClientToken: HANDLE; DesiredAccess: set; var GenericMapping: GENERIC_MAPPING; var PrivilegeSet: PRIVILEGE_SET; var PrivilegeSetLength: integer; var GrantedAccess: integer; var AccessStatus: BOOL): BOOL 
	// END AccessCheck;
	
	proc OpenProcessToken(ProcessHandle: HANDLE; DesiredAccess: set; var TokenHandle: HANDLE): BOOL 
	// END OpenProcessToken;
	
	proc OpenThreadToken(ThreadHandle: HANDLE; DesiredAccess: set; OpenAsSelf: BOOL; var TokenHandle: HANDLE): BOOL 
	// END OpenThreadToken;
	
	proc GetTokenInformation(TokenHandle: HANDLE; TokenInformationClass: TOKEN_INFORMATION_CLASS; TokenInformation: PtrVoid; TokenInformationLength: integer; var ReturnLength: integer): BOOL 
	// END GetTokenInformation;
	
	proc SetTokenInformation(TokenHandle: HANDLE; TokenInformationClass: TOKEN_INFORMATION_CLASS; TokenInformation: PtrVoid; TokenInformationLength: integer): BOOL 
	// END SetTokenInformation;
	
	proc AdjustTokenPrivileges(TokenHandle: HANDLE; DisableAllPrivileges: BOOL; var NewState: TOKEN_PRIVILEGES; BufferLength: integer; var PreviousState: TOKEN_PRIVILEGES; var ReturnLength: integer): BOOL 
	// END AdjustTokenPrivileges;
	
	proc AdjustTokenGroups(TokenHandle: HANDLE; ResetToDefault: BOOL; var NewState: TOKEN_GROUPS; BufferLength: integer; var PreviousState: TOKEN_GROUPS; var ReturnLength: integer): BOOL 
	// END AdjustTokenGroups;
	
	proc PrivilegeCheck(ClientToken: HANDLE; var RequiredPrivileges: PRIVILEGE_SET; var pfResult: BOOL): BOOL 
	// END PrivilegeCheck;
	
	proc AccessCheckAndAuditAlarmA(SubsystemName: PtrSTR; HandleId: PtrVoid; ObjectTypeName: PtrSTR; ObjectName: PtrSTR; SecurityDescriptor: PSECURITY_DESCRIPTOR; DesiredAccess: set; var GenericMapping: GENERIC_MAPPING; ObjectCreation: BOOL; var GrantedAccess: integer; var AccessStatus: BOOL; var pfGenerateOnClose: BOOL): BOOL 
	// END AccessCheckAndAuditAlarmA;
	
	proc AccessCheckAndAuditAlarmW(SubsystemName: PtrWSTR; HandleId: PtrVoid; ObjectTypeName: PtrWSTR; ObjectName: PtrWSTR; SecurityDescriptor: PSECURITY_DESCRIPTOR; DesiredAccess: set; var GenericMapping: GENERIC_MAPPING; ObjectCreation: BOOL; var GrantedAccess: integer; var AccessStatus: BOOL; var pfGenerateOnClose: BOOL): BOOL 
	// END AccessCheckAndAuditAlarmW;
	
	proc AccessCheckAndAuditAlarm(SubsystemName: PtrSTR; HandleId: PtrVoid; ObjectTypeName: PtrSTR; ObjectName: PtrSTR; SecurityDescriptor: PSECURITY_DESCRIPTOR; DesiredAccess: set; var GenericMapping: GENERIC_MAPPING; ObjectCreation: BOOL; var GrantedAccess: integer; var AccessStatus: BOOL; var pfGenerateOnClose: BOOL): BOOL 
	// END AccessCheckAndAuditAlarm;
	
	proc ObjectOpenAuditAlarmA(SubsystemName: PtrSTR; HandleId: PtrVoid; ObjectTypeName: PtrSTR; ObjectName: PtrSTR; pSecurityDescriptor: PSECURITY_DESCRIPTOR; ClientToken: HANDLE; DesiredAccess: set; GrantedAccess: integer; var Privileges: PRIVILEGE_SET; ObjectCreation: BOOL; AccessGranted: BOOL; var GenerateOnClose: BOOL): BOOL 
	// END ObjectOpenAuditAlarmA;
	
	proc ObjectOpenAuditAlarmW(SubsystemName: PtrWSTR; HandleId: PtrVoid; ObjectTypeName: PtrWSTR; ObjectName: PtrWSTR; pSecurityDescriptor: PSECURITY_DESCRIPTOR; ClientToken: HANDLE; DesiredAccess: set; GrantedAccess: integer; var Privileges: PRIVILEGE_SET; ObjectCreation: BOOL; AccessGranted: BOOL; var GenerateOnClose: BOOL): BOOL 
	// END ObjectOpenAuditAlarmW;
	
	proc ObjectOpenAuditAlarm(SubsystemName: PtrSTR; HandleId: PtrVoid; ObjectTypeName: PtrSTR; ObjectName: PtrSTR; pSecurityDescriptor: PSECURITY_DESCRIPTOR; ClientToken: HANDLE; DesiredAccess: set; GrantedAccess: integer; var Privileges: PRIVILEGE_SET; ObjectCreation: BOOL; AccessGranted: BOOL; var GenerateOnClose: BOOL): BOOL 
	// END ObjectOpenAuditAlarm;
	
	proc ObjectPrivilegeAuditAlarmA(SubsystemName: PtrSTR; HandleId: PtrVoid; ClientToken: HANDLE; DesiredAccess: set; var Privileges: PRIVILEGE_SET; AccessGranted: BOOL): BOOL 
	// END ObjectPrivilegeAuditAlarmA;
	
	proc ObjectPrivilegeAuditAlarmW(SubsystemName: PtrWSTR; HandleId: PtrVoid; ClientToken: HANDLE; DesiredAccess: set; var Privileges: PRIVILEGE_SET; AccessGranted: BOOL): BOOL 
	// END ObjectPrivilegeAuditAlarmW;
	
	proc ObjectPrivilegeAuditAlarm(SubsystemName: PtrSTR; HandleId: PtrVoid; ClientToken: HANDLE; DesiredAccess: set; var Privileges: PRIVILEGE_SET; AccessGranted: BOOL): BOOL 
	// END ObjectPrivilegeAuditAlarm;
	
	proc ObjectCloseAuditAlarmA(SubsystemName: PtrSTR; HandleId: PtrVoid; GenerateOnClose: BOOL): BOOL 
	// END ObjectCloseAuditAlarmA;
	
	proc ObjectCloseAuditAlarmW(SubsystemName: PtrWSTR; HandleId: PtrVoid; GenerateOnClose: BOOL): BOOL 
	// END ObjectCloseAuditAlarmW;
	
	proc ObjectCloseAuditAlarm(SubsystemName: PtrSTR; HandleId: PtrVoid; GenerateOnClose: BOOL): BOOL 
	// END ObjectCloseAuditAlarm;
	
	proc PrivilegedServiceAuditAlarmA(SubsystemName: PtrSTR; ServiceName: PtrSTR; ClientToken: HANDLE; var Privileges: PRIVILEGE_SET; AccessGranted: BOOL): BOOL 
	// END PrivilegedServiceAuditAlarmA;
	
	proc PrivilegedServiceAuditAlarmW(SubsystemName: PtrWSTR; ServiceName: PtrWSTR; ClientToken: HANDLE; var Privileges: PRIVILEGE_SET; AccessGranted: BOOL): BOOL 
	// END PrivilegedServiceAuditAlarmW;
	
	proc PrivilegedServiceAuditAlarm(SubsystemName: PtrSTR; ServiceName: PtrSTR; ClientToken: HANDLE; var Privileges: PRIVILEGE_SET; AccessGranted: BOOL): BOOL 
	// END PrivilegedServiceAuditAlarm;
	
	proc IsValidSid(pSid: PSID): BOOL 
	// END IsValidSid;
	
	proc EqualSid(pSid1: PSID; pSid2: PSID): BOOL 
	// END EqualSid;
	
	proc EqualPrefixSid(pSid1: PSID; pSid2: PSID): BOOL 
	// END EqualPrefixSid;
	
	proc GetSidLengthRequired(nSubAuthorityCount: char): integer 
	// END GetSidLengthRequired;
	
	proc AllocateAndInitializeSid(var pIdentifierAuthority: SID_IDENTIFIER_AUTHORITY; nSubAuthorityCount: char; nSubAuthority0: integer; nSubAuthority1: integer; nSubAuthority2: integer; nSubAuthority3: integer; nSubAuthority4: integer; nSubAuthority5: integer; nSubAuthority6: integer; nSubAuthority7: integer; var pSid: PSID): BOOL 
	// END AllocateAndInitializeSid;
	
	proc FreeSid(pSid: PSID): PtrVoid 
	// END FreeSid;
	
	proc InitializeSid(Sid: PSID; var pIdentifierAuthority: SID_IDENTIFIER_AUTHORITY; nSubAuthorityCount: char): BOOL 
	// END InitializeSid;
	
	proc GetSidIdentifierAuthority(pSid: PSID): PtrSID_IDENTIFIER_AUTHORITY 
	// END GetSidIdentifierAuthority;
	
	proc GetSidSubAuthority(pSid: PSID; nSubAuthority: integer): RetGetSidSubAuthority 
	// END GetSidSubAuthority;
	
	proc GetSidSubAuthorityCount(pSid: PSID): PtrSTR 
	// END GetSidSubAuthorityCount;
	
	proc GetLengthSid(pSid: PSID): integer 
	// END GetLengthSid;
	
	proc CopySid(nDestinationSidLength: integer; pDestinationSid: PSID; pSourceSid: PSID): BOOL 
	// END CopySid;
	
	proc AreAllAccessesGranted(GrantedAccess: integer; DesiredAccess: set): BOOL 
	// END AreAllAccessesGranted;
	
	proc AreAnyAccessesGranted(GrantedAccess: integer; DesiredAccess: set): BOOL 
	// END AreAnyAccessesGranted;
	
	proc MapGenericMask(var AccessMask: integer; var GenericMapping: GENERIC_MAPPING) 
	// END MapGenericMask;
	
	proc IsValidAcl(var pAcl: ACL): BOOL 
	// END IsValidAcl;
	
	proc InitializeAcl(var pAcl: ACL; nAclLength: integer; dwAclRevision: integer): BOOL 
	// END InitializeAcl;
	
	proc GetAclInformation(var pAcl: ACL; pAclInformation: PtrVoid; nAclInformationLength: integer; dwAclInformationClass: ACL_INFORMATION_CLASS): BOOL 
	// END GetAclInformation;
	
	proc SetAclInformation(var pAcl: ACL; pAclInformation: PtrVoid; nAclInformationLength: integer; dwAclInformationClass: ACL_INFORMATION_CLASS): BOOL 
	// END SetAclInformation;
	
	proc AddAce(var pAcl: ACL; dwAceRevision: integer; dwStartingAceIndex: integer; pAceList: PtrVoid; nAceListLength: integer): BOOL 
	// END AddAce;
	
	proc DeleteAce(var pAcl: ACL; dwAceIndex: integer): BOOL 
	// END DeleteAce;
	
	proc GetAce(var pAcl: ACL; dwAceIndex: integer; pAce: unsafe pointer to (* ? *)carray of PtrVoid): BOOL 
	// END GetAce;
	
	proc AddAccessAllowedAce(var pAcl: ACL; dwAceRevision: integer; AccessMask: integer; pSid: PSID): BOOL 
	// END AddAccessAllowedAce;
	
	proc AddAccessDeniedAce(var pAcl: ACL; dwAceRevision: integer; AccessMask: integer; pSid: PSID): BOOL 
	// END AddAccessDeniedAce;
	
	proc AddAuditAccessAce(var pAcl: ACL; dwAceRevision: integer; dwAccessMask: integer; pSid: PSID; bAuditSuccess: BOOL; bAuditFailure: BOOL): BOOL 
	// END AddAuditAccessAce;
	
	proc FindFirstFreeAce(var pAcl: ACL; pAce: unsafe pointer to (* ? *)carray of PtrVoid): BOOL 
	// END FindFirstFreeAce;
	
	proc InitializeSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR; dwRevision: integer): BOOL 
	// END InitializeSecurityDescriptor;
	
	proc IsValidSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END IsValidSecurityDescriptor;
	
	proc GetSecurityDescriptorLength(pSecurityDescriptor: PSECURITY_DESCRIPTOR): integer 
	// END GetSecurityDescriptorLength;
	
	proc GetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR; var pControl: shortint; var lpdwRevision: integer): BOOL 
	// END GetSecurityDescriptorControl;
	
	proc SetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR; bDaclPresent: BOOL; var pDacl: ACL; bDaclDefaulted: BOOL): BOOL 
	// END SetSecurityDescriptorDacl;
	
	proc GetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR; var lpbDaclPresent: BOOL; var pDacl: PtrACL; var lpbDaclDefaulted: BOOL): BOOL 
	// END GetSecurityDescriptorDacl;
	
	proc SetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR; bSaclPresent: BOOL; var pSacl: ACL; bSaclDefaulted: BOOL): BOOL 
	// END SetSecurityDescriptorSacl;
	
	proc GetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR; var lpbSaclPresent: BOOL; var pSacl: PtrACL; var lpbSaclDefaulted: BOOL): BOOL 
	// END GetSecurityDescriptorSacl;
	
	proc SetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR; pOwner: PSID; bOwnerDefaulted: BOOL): BOOL 
	// END SetSecurityDescriptorOwner;
	
	proc GetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR; var pOwner: PSID; var lpbOwnerDefaulted: BOOL): BOOL 
	// END GetSecurityDescriptorOwner;
	
	proc SetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR; pGroup: PSID; bGroupDefaulted: BOOL): BOOL 
	// END SetSecurityDescriptorGroup;
	
	proc GetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR; var pGroup: PSID; var lpbGroupDefaulted: BOOL): BOOL 
	// END GetSecurityDescriptorGroup;
	
	proc CreatePrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR; CreatorDescriptor: PSECURITY_DESCRIPTOR; var NewDescriptor: PSECURITY_DESCRIPTOR; IsDirectoryObject: BOOL; Token: HANDLE; var GenericMapping: GENERIC_MAPPING): BOOL 
	// END CreatePrivateObjectSecurity;
	
	proc SetPrivateObjectSecurity(SecurityInformation: SECURITY_INFORMATION; ModificationDescriptor: PSECURITY_DESCRIPTOR; var ObjectsSecurityDescriptor: PSECURITY_DESCRIPTOR; var GenericMapping: GENERIC_MAPPING; Token: HANDLE): BOOL 
	// END SetPrivateObjectSecurity;
	
	proc GetPrivateObjectSecurity(ObjectDescriptor: PSECURITY_DESCRIPTOR; SecurityInformation: SECURITY_INFORMATION; ResultantDescriptor: PSECURITY_DESCRIPTOR; DescriptorLength: integer; var ReturnLength: integer): BOOL 
	// END GetPrivateObjectSecurity;
	
	proc DestroyPrivateObjectSecurity(var ObjectDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END DestroyPrivateObjectSecurity;
	
	proc MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR; pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR; var lpdwBufferLength: integer): BOOL 
	// END MakeSelfRelativeSD;
	
	proc MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR; pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR; var lpdwAbsoluteSecurityDescriptorSize: integer; var pDacl: ACL; var lpdwDaclSize: integer; var pSacl: ACL; var lpdwSaclSize: integer; pOwner: PSID; var lpdwOwnerSize: integer; pPrimaryGroup: PSID; var lpdwPrimaryGroupSize: integer): BOOL 
	// END MakeAbsoluteSD;
	
	proc SetFileSecurityA(lpFileName: PtrSTR; SecurityInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END SetFileSecurityA;
	
	proc SetFileSecurityW(lpFileName: PtrWSTR; SecurityInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END SetFileSecurityW;
	
	proc SetFileSecurity(lpFileName: PtrSTR; SecurityInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END SetFileSecurity;
	
	proc GetFileSecurityA(lpFileName: PtrSTR; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetFileSecurityA;
	
	proc GetFileSecurityW(lpFileName: PtrWSTR; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetFileSecurityW;
	
	proc GetFileSecurity(lpFileName: PtrSTR; RequestedInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetFileSecurity;
	
	proc SetKernelObjectSecurity(Handle: HANDLE; SecurityInformation: SECURITY_INFORMATION; SecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END SetKernelObjectSecurity;
	
	proc FindFirstChangeNotificationA(lpPathName: PtrSTR; bWatchSubtree: BOOL; dwNotifyFilter: set): HANDLE 
	// END FindFirstChangeNotificationA;
	
	proc FindFirstChangeNotificationW(lpPathName: PtrWSTR; bWatchSubtree: BOOL; dwNotifyFilter: set): HANDLE 
	// END FindFirstChangeNotificationW;
	
	proc FindFirstChangeNotification(lpPathName: PtrSTR; bWatchSubtree: BOOL; dwNotifyFilter: set): HANDLE 
	// END FindFirstChangeNotification;
	
	proc FindNextChangeNotification(hChangeHandle: HANDLE): BOOL 
	// END FindNextChangeNotification;
	
	proc FindCloseChangeNotification(hChangeHandle: HANDLE): BOOL 
	// END FindCloseChangeNotification;
	
	proc ReadDirectoryChangesW(hDirectory: HANDLE; lpBuffer: PtrVoid; nBufferLength: integer; bWatchSubtree: BOOL; dwNotifyFilter: set; var lpBytesReturned: integer; var lpOverlapped: OVERLAPPED; lpCompletionRoutine: OVERLAPPED_COMPLETION_ROUTINE): BOOL 
	// END ReadDirectoryChangesW;
	
	proc VirtualLock(lpAddress: PtrVoid; dwSize: integer): BOOL 
	// END VirtualLock;
	
	proc VirtualUnlock(lpAddress: PtrVoid; dwSize: integer): BOOL 
	// END VirtualUnlock;
	
	proc MapViewOfFileEx(hFileMappingObject: HANDLE; dwDesiredAccess: set; dwFileOffsetHigh: integer; dwFileOffsetLow: integer; dwNumberOfBytesToMap: integer; lpBaseAddress: PtrVoid): PtrVoid 
	// END MapViewOfFileEx;
	
	proc SetPriorityClass(hProcess: HANDLE; dwPriorityClass: integer): BOOL 
	// END SetPriorityClass;
	
	proc GetPriorityClass(hProcess: HANDLE): integer 
	// END GetPriorityClass;
	
	proc IsBadReadPtr(lp: PtrVoid; ucb: integer): BOOL 
	// END IsBadReadPtr;
	
	proc IsBadWritePtr(lp: PtrVoid; ucb: integer): BOOL 
	// END IsBadWritePtr;
	
	proc IsBadHugeReadPtr(lp: PtrVoid; ucb: integer): BOOL 
	// END IsBadHugeReadPtr;
	
	proc IsBadHugeWritePtr(lp: PtrVoid; ucb: integer): BOOL 
	// END IsBadHugeWritePtr;
	
	proc IsBadCodePtr(lpfn: FARPROC): BOOL 
	// END IsBadCodePtr;
	
	proc IsBadStringPtrA(lpsz: PtrSTR; ucchMax: integer): BOOL 
	// END IsBadStringPtrA;
	
	proc IsBadStringPtrW(lpsz: PtrWSTR; ucchMax: integer): BOOL 
	// END IsBadStringPtrW;
	
	proc IsBadStringPtr(lpsz: PtrSTR; ucchMax: integer): BOOL 
	// END IsBadStringPtr;
	
	proc LookupAccountSidA(lpSystemName: PtrSTR; Sid: PSID; Name: PtrSTR; var cbName: integer; ReferencedDomainName: PtrSTR; var cbReferencedDomainName: integer; var peUse: SID_NAME_USE): BOOL 
	// END LookupAccountSidA;
	
	proc LookupAccountSidW(lpSystemName: PtrWSTR; Sid: PSID; Name: PtrWSTR; var cbName: integer; ReferencedDomainName: PtrWSTR; var cbReferencedDomainName: integer; var peUse: SID_NAME_USE): BOOL 
	// END LookupAccountSidW;
	
	proc LookupAccountSid(lpSystemName: PtrSTR; Sid: PSID; Name: PtrSTR; var cbName: integer; ReferencedDomainName: PtrSTR; var cbReferencedDomainName: integer; var peUse: SID_NAME_USE): BOOL 
	// END LookupAccountSid;
	
	proc LookupAccountNameA(lpSystemName: PtrSTR; lpAccountName: PtrSTR; Sid: PSID; var cbSid: integer; ReferencedDomainName: PtrSTR; var cbReferencedDomainName: integer; var peUse: SID_NAME_USE): BOOL 
	// END LookupAccountNameA;
	
	proc LookupAccountNameW(lpSystemName: PtrWSTR; lpAccountName: PtrWSTR; Sid: PSID; var cbSid: integer; ReferencedDomainName: PtrWSTR; var cbReferencedDomainName: integer; var peUse: SID_NAME_USE): BOOL 
	// END LookupAccountNameW;
	
	proc LookupAccountName(lpSystemName: PtrSTR; lpAccountName: PtrSTR; Sid: PSID; var cbSid: integer; ReferencedDomainName: PtrSTR; var cbReferencedDomainName: integer; var peUse: SID_NAME_USE): BOOL 
	// END LookupAccountName;
	
	proc LookupPrivilegeValueA(lpSystemName: PtrSTR; lpName: PtrSTR; var lpLuid: longint): BOOL 
	// END LookupPrivilegeValueA;
	
	proc LookupPrivilegeValueW(lpSystemName: PtrWSTR; lpName: PtrWSTR; var lpLuid: longint): BOOL 
	// END LookupPrivilegeValueW;
	
	proc LookupPrivilegeValue(lpSystemName: PtrSTR; lpName: PtrSTR; var lpLuid: longint): BOOL 
	// END LookupPrivilegeValue;
	
	proc LookupPrivilegeNameA(lpSystemName: PtrSTR; var lpLuid: longint; lpName: PtrSTR; var cbName: integer): BOOL 
	// END LookupPrivilegeNameA;
	
	proc LookupPrivilegeNameW(lpSystemName: PtrWSTR; var lpLuid: longint; lpName: PtrWSTR; var cbName: integer): BOOL 
	// END LookupPrivilegeNameW;
	
	proc LookupPrivilegeName(lpSystemName: PtrSTR; var lpLuid: longint; lpName: PtrSTR; var cbName: integer): BOOL 
	// END LookupPrivilegeName;
	
	proc LookupPrivilegeDisplayNameA(lpSystemName: PtrSTR; lpName: PtrSTR; lpDisplayName: PtrSTR; var cbDisplayName: integer; var lpLanguageId: integer): BOOL 
	// END LookupPrivilegeDisplayNameA;
	
	proc LookupPrivilegeDisplayNameW(lpSystemName: PtrWSTR; lpName: PtrWSTR; lpDisplayName: PtrWSTR; var cbDisplayName: integer; var lpLanguageId: integer): BOOL 
	// END LookupPrivilegeDisplayNameW;
	
	proc LookupPrivilegeDisplayName(lpSystemName: PtrSTR; lpName: PtrSTR; lpDisplayName: PtrSTR; var cbDisplayName: integer; var lpLanguageId: integer): BOOL 
	// END LookupPrivilegeDisplayName;
	
	proc AllocateLocallyUniqueId(var Luid: longint): BOOL 
	// END AllocateLocallyUniqueId;
	
	proc BuildCommDCBA(lpDef: PtrSTR; var lpDCB: DCB): BOOL 
	// END BuildCommDCBA;
	
	proc BuildCommDCBW(lpDef: PtrWSTR; var lpDCB: DCB): BOOL 
	// END BuildCommDCBW;
	
	proc BuildCommDCB(lpDef: PtrSTR; var lpDCB: DCB): BOOL 
	// END BuildCommDCB;
	
	proc BuildCommDCBAndTimeoutsA(lpDef: PtrSTR; var lpDCB: DCB; var lpCommTimeouts: COMMTIMEOUTS): BOOL 
	// END BuildCommDCBAndTimeoutsA;
	
	proc BuildCommDCBAndTimeoutsW(lpDef: PtrWSTR; var lpDCB: DCB; var lpCommTimeouts: COMMTIMEOUTS): BOOL 
	// END BuildCommDCBAndTimeoutsW;
	
	proc BuildCommDCBAndTimeouts(lpDef: PtrSTR; var lpDCB: DCB; var lpCommTimeouts: COMMTIMEOUTS): BOOL 
	// END BuildCommDCBAndTimeouts;
	
	proc CommConfigDialogA(lpszName: PtrSTR; hWnd: HWND; var lpCC: COMMCONFIG): BOOL 
	// END CommConfigDialogA;
	
	proc CommConfigDialogW(lpszName: PtrWSTR; hWnd: HWND; var lpCC: COMMCONFIG): BOOL 
	// END CommConfigDialogW;
	
	proc CommConfigDialog(lpszName: PtrSTR; hWnd: HWND; var lpCC: COMMCONFIG): BOOL 
	// END CommConfigDialog;
	
	proc GetDefaultCommConfigA(lpszName: PtrSTR; var lpCC: COMMCONFIG; var lpdwSize: integer): BOOL 
	// END GetDefaultCommConfigA;
	
	proc GetDefaultCommConfigW(lpszName: PtrWSTR; var lpCC: COMMCONFIG; var lpdwSize: integer): BOOL 
	// END GetDefaultCommConfigW;
	
	proc GetDefaultCommConfig(lpszName: PtrSTR; var lpCC: COMMCONFIG; var lpdwSize: integer): BOOL 
	// END GetDefaultCommConfig;
	
	proc SetDefaultCommConfigA(lpszName: PtrSTR; var lpCC: COMMCONFIG; dwSize: integer): BOOL 
	// END SetDefaultCommConfigA;
	
	proc SetDefaultCommConfigW(lpszName: PtrWSTR; var lpCC: COMMCONFIG; dwSize: integer): BOOL 
	// END SetDefaultCommConfigW;
	
	proc SetDefaultCommConfig(lpszName: PtrSTR; var lpCC: COMMCONFIG; dwSize: integer): BOOL 
	// END SetDefaultCommConfig;
	
	proc GetComputerNameA(lpBuffer: PtrSTR; var nSize: integer): BOOL 
	// END GetComputerNameA;
	
	proc GetComputerNameW(lpBuffer: PtrWSTR; var nSize: integer): BOOL 
	// END GetComputerNameW;
	
	proc GetComputerName(lpBuffer: PtrSTR; var nSize: integer): BOOL 
	// END GetComputerName;
	
	proc SetComputerNameA(lpComputerName: PtrSTR): BOOL 
	// END SetComputerNameA;
	
	proc SetComputerNameW(lpComputerName: PtrWSTR): BOOL 
	// END SetComputerNameW;
	
	proc SetComputerName(lpComputerName: PtrSTR): BOOL 
	// END SetComputerName;
	
	proc GetUserNameA(lpBuffer: PtrSTR; var nSize: integer): BOOL 
	// END GetUserNameA;
	
	proc GetUserNameW(lpBuffer: PtrWSTR; var nSize: integer): BOOL 
	// END GetUserNameW;
	
	proc GetUserName(lpBuffer: PtrSTR; var nSize: integer): BOOL 
	// END GetUserName;
	
	proc LogonUserA(lpszUsername: PtrSTR; lpszDomain: PtrSTR; lpszPassword: PtrSTR; dwLogonType: integer; dwLogonProvider: integer; var phToken: HANDLE): BOOL 
	// END LogonUserA;
	
	proc LogonUserW(lpszUsername: PtrWSTR; lpszDomain: PtrWSTR; lpszPassword: PtrWSTR; dwLogonType: integer; dwLogonProvider: integer; var phToken: HANDLE): BOOL 
	// END LogonUserW;
	
	proc LogonUser(lpszUsername: PtrSTR; lpszDomain: PtrSTR; lpszPassword: PtrSTR; dwLogonType: integer; dwLogonProvider: integer; var phToken: HANDLE): BOOL 
	// END LogonUser;
	
	proc ImpersonateLoggedOnUser(hToken: HANDLE): BOOL 
	// END ImpersonateLoggedOnUser;
	
	proc CreateProcessAsUserA(hToken: HANDLE; lpApplicationName: PtrSTR; lpCommandLine: PtrSTR; var lpProcessAttributes: SECURITY_ATTRIBUTES; var lpThreadAttributes: SECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: set; lpEnvironment: PtrVoid; lpCurrentDirectory: PtrSTR; var lpStartupInfo: STARTUPINFOA; var lpProcessInformation: PROCESS_INFORMATION): BOOL 
	// END CreateProcessAsUserA;
	
	proc CreateProcessAsUserW(hToken: HANDLE; lpApplicationName: PtrWSTR; lpCommandLine: PtrWSTR; var lpProcessAttributes: SECURITY_ATTRIBUTES; var lpThreadAttributes: SECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: set; lpEnvironment: PtrVoid; lpCurrentDirectory: PtrWSTR; var lpStartupInfo: STARTUPINFOW; var lpProcessInformation: PROCESS_INFORMATION): BOOL 
	// END CreateProcessAsUserW;
	
	proc CreateProcessAsUser(hToken: HANDLE; lpApplicationName: PtrSTR; lpCommandLine: PtrSTR; var lpProcessAttributes: SECURITY_ATTRIBUTES; var lpThreadAttributes: SECURITY_ATTRIBUTES; bInheritHandles: BOOL; dwCreationFlags: set; lpEnvironment: PtrVoid; lpCurrentDirectory: PtrSTR; var lpStartupInfo: STARTUPINFOA; var lpProcessInformation: PROCESS_INFORMATION): BOOL 
	// END CreateProcessAsUser;
	
	proc GetCurrentHwProfileA(var lpHwProfileInfo: HW_PROFILE_INFOA): BOOL 
	// END GetCurrentHwProfileA;
	
	proc GetCurrentHwProfileW(var lpHwProfileInfo: HW_PROFILE_INFOW): BOOL 
	// END GetCurrentHwProfileW;
	
	proc GetCurrentHwProfile(var lpHwProfileInfo: HW_PROFILE_INFOA): BOOL 
	// END GetCurrentHwProfile;
	
	proc QueryPerformanceCounter(var lpPerformanceCount: longint): BOOL 
	// END QueryPerformanceCounter;
	
	proc QueryPerformanceFrequency(var lpFrequency: longint): BOOL 
	// END QueryPerformanceFrequency;
	
	proc GetVersionExA(var lpVersionInformation: OSVERSIONINFOA): BOOL 
	// END GetVersionExA;
	
	proc GetVersionExW(var lpVersionInformation: OSVERSIONINFOW): BOOL 
	// END GetVersionExW;
	
	proc GetVersionEx(var lpVersionInformation: OSVERSIONINFOA): BOOL 
	// END GetVersionEx;
	
	proc GetSystemPowerStatus(var lpSystemPowerStatus: SYSTEM_POWER_STATUS): BOOL 
	// END GetSystemPowerStatus;
	
	proc SetSystemPowerState(fSuspend: BOOL; fForce: BOOL): BOOL 
	// END SetSystemPowerState;
	
	proc AddFontResourceA(p0: PtrSTR): integer 
	// END AddFontResourceA;
	
	proc AddFontResourceW(p0: PtrWSTR): integer 
	// END AddFontResourceW;
	
	proc AddFontResource(p0: PtrSTR): integer 
	// END AddFontResource;
	
	proc AnimatePalette(p0: HPALETTE; p1: integer; p2: integer; var p3: PALETTEENTRY): BOOL 
	// END AnimatePalette;
	
	proc Arc(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer): BOOL 
	// END Arc;
	
	proc BitBlt(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: HDC; p6: integer; p7: integer; p8: integer): BOOL 
	// END BitBlt;
	
	proc CancelDC(p0: HDC): BOOL 
	// END CancelDC;
	
	proc Chord(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer): BOOL 
	// END Chord;
	
	proc ChoosePixelFormat(p0: HDC; var p1: PIXELFORMATDESCRIPTOR): integer 
	// END ChoosePixelFormat;
	
	proc CloseMetaFile(p0: HDC): HMETAFILE 
	// END CloseMetaFile;
	
	proc CombineRgn(p0: HRGN; p1: HRGN; p2: HRGN; p3: integer): integer 
	// END CombineRgn;
	
	proc CopyMetaFileA(p0: HMETAFILE; p1: PtrSTR): HMETAFILE 
	// END CopyMetaFileA;
	
	proc CopyMetaFileW(p0: HMETAFILE; p1: PtrWSTR): HMETAFILE 
	// END CopyMetaFileW;
	
	proc CopyMetaFile(p0: HMETAFILE; p1: PtrSTR): HMETAFILE 
	// END CopyMetaFile;
	
	proc CreateBitmap(p0: integer; p1: integer; p2: integer; p3: integer; p4: PtrVoid): HBITMAP 
	// END CreateBitmap;
	
	proc CreateBitmapIndirect(var p0: BITMAP): HBITMAP 
	// END CreateBitmapIndirect;
	
	proc CreateBrushIndirect(var p0: LOGBRUSH): HBRUSH 
	// END CreateBrushIndirect;
	
	proc CreateCompatibleBitmap(p0: HDC; p1: integer; p2: integer): HBITMAP 
	// END CreateCompatibleBitmap;
	
	proc CreateDiscardableBitmap(p0: HDC; p1: integer; p2: integer): HBITMAP 
	// END CreateDiscardableBitmap;
	
	proc CreateCompatibleDC(p0: HDC): HDC 
	// END CreateCompatibleDC;
	
	proc CreateDCA(p0: PtrSTR; p1: PtrSTR; p2: PtrSTR; var p3: DEVMODEA): HDC 
	// END CreateDCA;
	
	proc CreateDCW(p0: PtrWSTR; p1: PtrWSTR; p2: PtrWSTR; var p3: DEVMODEW): HDC 
	// END CreateDCW;
	
	proc CreateDC(p0: PtrSTR; p1: PtrSTR; p2: PtrSTR; var p3: DEVMODEA): HDC 
	// END CreateDC;
	
	proc CreateDIBitmap(p0: HDC; var p1: BITMAPINFOHEADER; p2: integer; p3: PtrVoid; var p4: BITMAPINFO; p5: integer): HBITMAP 
	// END CreateDIBitmap;
	
	proc CreateDIBPatternBrush(p0: HGLOBAL; p1: integer): HBRUSH 
	// END CreateDIBPatternBrush;
	
	proc CreateDIBPatternBrushPt(p0: PtrVoid; p1: integer): HBRUSH 
	// END CreateDIBPatternBrushPt;
	
	proc CreateEllipticRgn(p0: integer; p1: integer; p2: integer; p3: integer): HRGN 
	// END CreateEllipticRgn;
	
	proc CreateEllipticRgnIndirect(var p0: RECT): HRGN 
	// END CreateEllipticRgnIndirect;
	
	proc CreateFontIndirectA(var p0: LOGFONTA): HFONT 
	// END CreateFontIndirectA;
	
	proc CreateFontIndirectW(var p0: LOGFONTW): HFONT 
	// END CreateFontIndirectW;
	
	proc CreateFontIndirect(var p0: LOGFONTA): HFONT 
	// END CreateFontIndirect;
	
	proc CreateFontA(p0: integer; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer; p9: integer; p10: integer; p11: integer; p12: integer; p13: PtrSTR): HFONT 
	// END CreateFontA;
	
	proc CreateFontW(p0: integer; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer; p9: integer; p10: integer; p11: integer; p12: integer; p13: PtrWSTR): HFONT 
	// END CreateFontW;
	
	proc CreateFont(p0: integer; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer; p9: integer; p10: integer; p11: integer; p12: integer; p13: PtrSTR): HFONT 
	// END CreateFont;
	
	proc CreateHatchBrush(p0: integer; p1: COLORREF): HBRUSH 
	// END CreateHatchBrush;
	
	proc CreateICA(p0: PtrSTR; p1: PtrSTR; p2: PtrSTR; var p3: DEVMODEA): HDC 
	// END CreateICA;
	
	proc CreateICW(p0: PtrWSTR; p1: PtrWSTR; p2: PtrWSTR; var p3: DEVMODEW): HDC 
	// END CreateICW;
	
	proc CreateIC(p0: PtrSTR; p1: PtrSTR; p2: PtrSTR; var p3: DEVMODEA): HDC 
	// END CreateIC;
	
	proc CreateMetaFileA(p0: PtrSTR): HDC 
	// END CreateMetaFileA;
	
	proc CreateMetaFileW(p0: PtrWSTR): HDC 
	// END CreateMetaFileW;
	
	proc CreateMetaFile(p0: PtrSTR): HDC 
	// END CreateMetaFile;
	
	proc CreatePalette(var p0: LOGPALETTE): HPALETTE 
	// END CreatePalette;
	
	proc CreatePen(p0: integer; p1: integer; p2: COLORREF): HPEN 
	// END CreatePen;
	
	proc CreatePenIndirect(var p0: LOGPEN): HPEN 
	// END CreatePenIndirect;
	
	proc CreatePolyPolygonRgn(var p0: POINT; var p1: integer; p2: integer; p3: integer): HRGN 
	// END CreatePolyPolygonRgn;
	
	proc CreatePatternBrush(p0: HBITMAP): HBRUSH 
	// END CreatePatternBrush;
	
	proc CreateRectRgn(p0: integer; p1: integer; p2: integer; p3: integer): HRGN 
	// END CreateRectRgn;
	
	proc CreateRectRgnIndirect(var p0: RECT): HRGN 
	// END CreateRectRgnIndirect;
	
	proc CreateRoundRectRgn(p0: integer; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer): HRGN 
	// END CreateRoundRectRgn;
	
	proc CreateScalableFontResourceA(p0: integer; p1: PtrSTR; p2: PtrSTR; p3: PtrSTR): BOOL 
	// END CreateScalableFontResourceA;
	
	proc CreateScalableFontResourceW(p0: integer; p1: PtrWSTR; p2: PtrWSTR; p3: PtrWSTR): BOOL 
	// END CreateScalableFontResourceW;
	
	proc CreateScalableFontResource(p0: integer; p1: PtrSTR; p2: PtrSTR; p3: PtrSTR): BOOL 
	// END CreateScalableFontResource;
	
	proc CreateSolidBrush(p0: COLORREF): HBRUSH 
	// END CreateSolidBrush;
	
	proc DeleteDC(p0: HDC): BOOL 
	// END DeleteDC;
	
	proc DeleteMetaFile(p0: HMETAFILE): BOOL 
	// END DeleteMetaFile;
	
	proc DeleteObject(p0: HGDIOBJ): BOOL 
	// END DeleteObject;
	
	proc DescribePixelFormat(p0: HDC; p1: integer; p2: integer; var p3: PIXELFORMATDESCRIPTOR): integer 
	// END DescribePixelFormat;
	
	proc DeviceCapabilitiesA(p0: PtrSTR; p1: PtrSTR; p2: shortint; p3: PtrSTR; var p4: DEVMODEA): integer 
	// END DeviceCapabilitiesA;
	
	proc DeviceCapabilitiesW(p0: PtrWSTR; p1: PtrWSTR; p2: shortint; p3: PtrWSTR; var p4: DEVMODEW): integer 
	// END DeviceCapabilitiesW;
	
	proc DeviceCapabilities(p0: PtrSTR; p1: PtrSTR; p2: shortint; p3: PtrSTR; var p4: DEVMODEA): integer 
	// END DeviceCapabilities;
	
	proc DrawEscape(p0: HDC; p1: integer; p2: integer; p3: PtrSTR): integer 
	// END DrawEscape;
	
	proc Ellipse(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer): BOOL 
	// END Ellipse;
	
	proc EnumFontFamiliesExA(p0: HDC; var p1: LOGFONTA; p2: FONTENUMPROCEXA; p3: LPARAM; p4: integer): integer 
	// END EnumFontFamiliesExA;
	
	proc EnumFontFamiliesExW(p0: HDC; var p1: LOGFONTW; p2: FONTENUMPROCEXW; p3: LPARAM; p4: integer): integer 
	// END EnumFontFamiliesExW;
	
	proc EnumFontFamiliesEx(p0: HDC; var p1: LOGFONTA; p2: FONTENUMPROCEXA; p3: LPARAM; p4: integer): integer 
	// END EnumFontFamiliesEx;
	
	proc EnumFontFamiliesA(p0: HDC; p1: PtrSTR; p2: NEWFONTENUMPROCA; p3: LPARAM): integer 
	// END EnumFontFamiliesA;
	
	proc EnumFontFamiliesW(p0: HDC; p1: PtrWSTR; p2: NEWFONTENUMPROCW; p3: LPARAM): integer 
	// END EnumFontFamiliesW;
	
	proc EnumFontFamilies(p0: HDC; p1: PtrSTR; p2: NEWFONTENUMPROCA; p3: LPARAM): integer 
	// END EnumFontFamilies;
	
	proc EnumFontsA(p0: HDC; p1: PtrSTR; p2: FONTENUMPROCA; p3: LPARAM): integer 
	// END EnumFontsA;
	
	proc EnumFontsW(p0: HDC; p1: PtrWSTR; p2: FONTENUMPROCW; p3: LPARAM): integer 
	// END EnumFontsW;
	
	proc EnumFonts(p0: HDC; p1: PtrSTR; p2: FONTENUMPROCA; p3: LPARAM): integer 
	// END EnumFonts;
	
	proc EnumObjects(p0: HDC; p1: integer; p2: GOBJENUMPROC; p3: PtrVoid): integer 
	// END EnumObjects;
	
	proc EqualRgn(p0: HRGN; p1: HRGN): BOOL 
	// END EqualRgn;
	
	proc Escape(p0: HDC; p1: integer; p2: integer; p3: PtrSTR; p4: PtrVoid): integer 
	// END Escape;
	
	proc ExtEscape(p0: HDC; p1: integer; p2: integer; p3: PtrSTR; p4: integer; p5: PtrSTR): integer 
	// END ExtEscape;
	
	proc ExcludeClipRect(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer): integer 
	// END ExcludeClipRect;
	
	proc ExtCreateRegion(var p0: XFORM; p1: integer; var p2: RGNDATA): HRGN 
	// END ExtCreateRegion;
	
	proc ExtFloodFill(p0: HDC; p1: integer; p2: integer; p3: COLORREF; p4: integer): BOOL 
	// END ExtFloodFill;
	
	proc FillRgn(p0: HDC; p1: HRGN; p2: HBRUSH): BOOL 
	// END FillRgn;
	
	proc FloodFill(p0: HDC; p1: integer; p2: integer; p3: COLORREF): BOOL 
	// END FloodFill;
	
	proc FrameRgn(p0: HDC; p1: HRGN; p2: HBRUSH; p3: integer; p4: integer): BOOL 
	// END FrameRgn;
	
	proc GetROP2(p0: HDC): integer 
	// END GetROP2;
	
	proc GetAspectRatioFilterEx(p0: HDC; var p1: SIZE): BOOL 
	// END GetAspectRatioFilterEx;
	
	proc GetBkColor(p0: HDC): COLORREF 
	// END GetBkColor;
	
	proc GetBkMode(p0: HDC): integer 
	// END GetBkMode;
	
	proc GetBitmapBits(p0: HBITMAP; p1: integer; p2: PtrVoid): integer 
	// END GetBitmapBits;
	
	proc GetBitmapDimensionEx(p0: HBITMAP; var p1: SIZE): BOOL 
	// END GetBitmapDimensionEx;
	
	proc GetBoundsRect(p0: HDC; var p1: RECT; p2: set): set 
	// END GetBoundsRect;
	
	proc GetBrushOrgEx(p0: HDC; var p1: POINT): BOOL 
	// END GetBrushOrgEx;
	
	proc GetCharWidthA(p0: HDC; p1: integer; p2: integer; var p3: carray of integer): BOOL 
	// END GetCharWidthA;
	
	proc GetCharWidthW(p0: HDC; p1: integer; p2: integer; var p3: carray of integer): BOOL 
	// END GetCharWidthW;
	
	proc GetCharWidth(p0: HDC; p1: integer; p2: integer; var p3: carray of integer): BOOL 
	// END GetCharWidth;
	
	proc GetCharWidth32A(p0: HDC; p1: integer; p2: integer; var p3: carray of integer): BOOL 
	// END GetCharWidth32A;
	
	proc GetCharWidth32W(p0: HDC; p1: integer; p2: integer; var p3: carray of integer): BOOL 
	// END GetCharWidth32W;
	
	proc GetCharWidth32(p0: HDC; p1: integer; p2: integer; var p3: carray of integer): BOOL 
	// END GetCharWidth32;
	
	proc GetCharWidthFloatA(p0: HDC; p1: integer; p2: integer; var p3: real): BOOL 
	// END GetCharWidthFloatA;
	
	proc GetCharWidthFloatW(p0: HDC; p1: integer; p2: integer; var p3: real): BOOL 
	// END GetCharWidthFloatW;
	
	proc GetCharWidthFloat(p0: HDC; p1: integer; p2: integer; var p3: real): BOOL 
	// END GetCharWidthFloat;
	
	proc GetCharABCWidthsA(p0: HDC; p1: integer; p2: integer; var p3: carray of ABC): BOOL 
	// END GetCharABCWidthsA;
	
	proc GetCharABCWidthsW(p0: HDC; p1: integer; p2: integer; var p3: carray of ABC): BOOL 
	// END GetCharABCWidthsW;
	
	proc GetCharABCWidths(p0: HDC; p1: integer; p2: integer; var p3: carray of ABC): BOOL 
	// END GetCharABCWidths;
	
	proc GetCharABCWidthsFloatA(p0: HDC; p1: integer; p2: integer; var p3: ABCFLOAT): BOOL 
	// END GetCharABCWidthsFloatA;
	
	proc GetCharABCWidthsFloatW(p0: HDC; p1: integer; p2: integer; var p3: ABCFLOAT): BOOL 
	// END GetCharABCWidthsFloatW;
	
	proc GetCharABCWidthsFloat(p0: HDC; p1: integer; p2: integer; var p3: ABCFLOAT): BOOL 
	// END GetCharABCWidthsFloat;
	
	proc GetClipBox(p0: HDC; var p1: RECT): integer 
	// END GetClipBox;
	
	proc GetClipRgn(p0: HDC; p1: HRGN): integer 
	// END GetClipRgn;
	
	proc GetMetaRgn(p0: HDC; p1: HRGN): integer 
	// END GetMetaRgn;
	
	proc GetCurrentObject(p0: HDC; p1: integer): HGDIOBJ 
	// END GetCurrentObject;
	
	proc GetCurrentPositionEx(p0: HDC; var p1: POINT): BOOL 
	// END GetCurrentPositionEx;
	
	proc GetDeviceCaps(p0: HDC; p1: integer): integer 
	// END GetDeviceCaps;
	
	proc GetDIBits(p0: HDC; p1: HBITMAP; p2: integer; p3: integer; p4: PtrVoid; var p5: BITMAPINFO; p6: integer): integer 
	// END GetDIBits;
	
	proc GetFontData(p0: HDC; p1: integer; p2: integer; p3: PtrVoid; p4: integer): integer 
	// END GetFontData;
	
	proc GetGlyphOutlineA(p0: HDC; p1: integer; p2: integer; var p3: GLYPHMETRICS; p4: integer; p5: PtrVoid; var p6: MAT2): integer 
	// END GetGlyphOutlineA;
	
	proc GetGlyphOutlineW(p0: HDC; p1: integer; p2: integer; var p3: GLYPHMETRICS; p4: integer; p5: PtrVoid; var p6: MAT2): integer 
	// END GetGlyphOutlineW;
	
	proc GetGlyphOutline(p0: HDC; p1: integer; p2: integer; var p3: GLYPHMETRICS; p4: integer; p5: PtrVoid; var p6: MAT2): integer 
	// END GetGlyphOutline;
	
	proc GetGraphicsMode(p0: HDC): integer 
	// END GetGraphicsMode;
	
	proc GetMapMode(p0: HDC): integer 
	// END GetMapMode;
	
	proc GetMetaFileBitsEx(p0: HMETAFILE; p1: integer; var p2: carray of byte): integer 
	// END GetMetaFileBitsEx;
	
	proc GetMetaFileA(p0: PtrSTR): HMETAFILE 
	// END GetMetaFileA;
	
	proc GetMetaFileW(p0: PtrWSTR): HMETAFILE 
	// END GetMetaFileW;
	
	proc GetMetaFile(p0: PtrSTR): HMETAFILE 
	// END GetMetaFile;
	
	proc GetNearestColor(p0: HDC; p1: COLORREF): COLORREF 
	// END GetNearestColor;
	
	proc GetNearestPaletteIndex(p0: HPALETTE; p1: COLORREF): integer 
	// END GetNearestPaletteIndex;
	
	proc GetObjectType(h: HGDIOBJ): integer 
	// END GetObjectType;
	
	proc GetOutlineTextMetricsA(p0: HDC; p1: integer; var p2: OUTLINETEXTMETRICA): integer 
	// END GetOutlineTextMetricsA;
	
	proc GetOutlineTextMetricsW(p0: HDC; p1: integer; var p2: OUTLINETEXTMETRICW): integer 
	// END GetOutlineTextMetricsW;
	
	proc GetOutlineTextMetrics(p0: HDC; p1: integer; var p2: OUTLINETEXTMETRICA): integer 
	// END GetOutlineTextMetrics;
	
	proc GetPaletteEntries(p0: HPALETTE; p1: integer; p2: integer; var p3: PALETTEENTRY): integer 
	// END GetPaletteEntries;
	
	proc GetPixel(p0: HDC; p1: integer; p2: integer): COLORREF 
	// END GetPixel;
	
	proc GetPixelFormat(p0: HDC): integer 
	// END GetPixelFormat;
	
	proc GetPolyFillMode(p0: HDC): integer 
	// END GetPolyFillMode;
	
	proc GetRasterizerCaps(var p0: RASTERIZER_STATUS; p1: integer): BOOL 
	// END GetRasterizerCaps;
	
	proc GetRegionData(p0: HRGN; p1: integer; var p2: RGNDATA): integer 
	// END GetRegionData;
	
	proc GetRgnBox(p0: HRGN; var p1: RECT): integer 
	// END GetRgnBox;
	
	proc GetStockObject(p0: integer): HGDIOBJ 
	// END GetStockObject;
	
	proc GetStretchBltMode(p0: HDC): integer 
	// END GetStretchBltMode;
	
	proc GetSystemPaletteEntries(p0: HDC; p1: integer; p2: integer; var p3: PALETTEENTRY): integer 
	// END GetSystemPaletteEntries;
	
	proc GetSystemPaletteUse(p0: HDC): integer 
	// END GetSystemPaletteUse;
	
	proc GetTextCharacterExtra(p0: HDC): integer 
	// END GetTextCharacterExtra;
	
	proc GetTextAlign(p0: HDC): set 
	// END GetTextAlign;
	
	proc GetTextColor(p0: HDC): COLORREF 
	// END GetTextColor;
	
	proc GetTextExtentPointA(p0: HDC; p1: PtrSTR; p2: integer; var p3: SIZE): BOOL 
	// END GetTextExtentPointA;
	
	proc GetTextExtentPointW(p0: HDC; p1: PtrWSTR; p2: integer; var p3: SIZE): BOOL 
	// END GetTextExtentPointW;
	
	proc GetTextExtentPoint(p0: HDC; p1: PtrSTR; p2: integer; var p3: SIZE): BOOL 
	// END GetTextExtentPoint;
	
	proc GetTextExtentPoint32A(p0: HDC; p1: PtrSTR; p2: integer; var p3: SIZE): BOOL 
	// END GetTextExtentPoint32A;
	
	proc GetTextExtentPoint32W(p0: HDC; p1: PtrWSTR; p2: integer; var p3: SIZE): BOOL 
	// END GetTextExtentPoint32W;
	
	proc GetTextExtentPoint32(p0: HDC; p1: PtrSTR; p2: integer; var p3: SIZE): BOOL 
	// END GetTextExtentPoint32;
	
	proc GetTextExtentExPointA(p0: HDC; p1: PtrSTR; p2: integer; p3: integer; var p4: integer; var p5: integer; var p6: SIZE): BOOL 
	// END GetTextExtentExPointA;
	
	proc GetTextExtentExPointW(p0: HDC; p1: PtrWSTR; p2: integer; p3: integer; var p4: integer; var p5: integer; var p6: SIZE): BOOL 
	// END GetTextExtentExPointW;
	
	proc GetTextExtentExPoint(p0: HDC; p1: PtrSTR; p2: integer; p3: integer; var p4: integer; var p5: integer; var p6: SIZE): BOOL 
	// END GetTextExtentExPoint;
	
	proc GetTextCharset(hdc: HDC): integer 
	// END GetTextCharset;
	
	proc GetTextCharsetInfo(hdc: HDC; var lpSig: FONTSIGNATURE; dwFlags: set): integer 
	// END GetTextCharsetInfo;
	
	proc TranslateCharsetInfo(var lpSrc: integer; var lpCs: CHARSETINFO; dwFlags: set): BOOL 
	// END TranslateCharsetInfo;
	
	proc GetFontLanguageInfo(p0: HDC): set 
	// END GetFontLanguageInfo;
	
	proc GetCharacterPlacementA(p0: HDC; p1: PtrSTR; p2: integer; p3: integer; var p4: GCP_RESULTSA; p5: integer): integer 
	// END GetCharacterPlacementA;
	
	proc GetCharacterPlacementW(p0: HDC; p1: PtrWSTR; p2: integer; p3: integer; var p4: GCP_RESULTSW; p5: integer): integer 
	// END GetCharacterPlacementW;
	
	proc GetCharacterPlacement(p0: HDC; p1: PtrSTR; p2: integer; p3: integer; var p4: GCP_RESULTSA; p5: integer): integer 
	// END GetCharacterPlacement;
	
	proc GetViewportExtEx(p0: HDC; var p1: SIZE): BOOL 
	// END GetViewportExtEx;
	
	proc GetViewportOrgEx(p0: HDC; var p1: POINT): BOOL 
	// END GetViewportOrgEx;
	
	proc GetWindowExtEx(p0: HDC; var p1: SIZE): BOOL 
	// END GetWindowExtEx;
	
	proc GetWindowOrgEx(p0: HDC; var p1: POINT): BOOL 
	// END GetWindowOrgEx;
	
	proc IntersectClipRect(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer): integer 
	// END IntersectClipRect;
	
	proc InvertRgn(p0: HDC; p1: HRGN): BOOL 
	// END InvertRgn;
	
	proc LineDDA(p0: integer; p1: integer; p2: integer; p3: integer; p4: LINEDDAPROC; p5: LPARAM): BOOL 
	// END LineDDA;
	
	proc LineTo(p0: HDC; p1: integer; p2: integer): BOOL 
	// END LineTo;
	
	proc MaskBlt(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: HDC; p6: integer; p7: integer; p8: HBITMAP; p9: integer; p10: integer; p11: integer): BOOL 
	// END MaskBlt;
	
	proc PlgBlt(p0: HDC; var p1: POINT; p2: HDC; p3: integer; p4: integer; p5: integer; p6: integer; p7: HBITMAP; p8: integer; p9: integer): BOOL 
	// END PlgBlt;
	
	proc OffsetClipRgn(p0: HDC; p1: integer; p2: integer): integer 
	// END OffsetClipRgn;
	
	proc OffsetRgn(p0: HRGN; p1: integer; p2: integer): integer 
	// END OffsetRgn;
	
	proc PatBlt(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer): BOOL 
	// END PatBlt;
	
	proc Pie(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer): BOOL 
	// END Pie;
	
	proc PlayMetaFile(p0: HDC; p1: HMETAFILE): BOOL 
	// END PlayMetaFile;
	
	proc PaintRgn(p0: HDC; p1: HRGN): BOOL 
	// END PaintRgn;
	
	proc PolyPolygon(p0: HDC; var p1: POINT; var p2: integer; p3: integer): BOOL 
	// END PolyPolygon;
	
	proc PtInRegion(p0: HRGN; p1: integer; p2: integer): BOOL 
	// END PtInRegion;
	
	proc PtVisible(p0: HDC; p1: integer; p2: integer): BOOL 
	// END PtVisible;
	
	proc RectInRegion(p0: HRGN; var p1: RECT): BOOL 
	// END RectInRegion;
	
	proc RectVisible(p0: HDC; var p1: RECT): BOOL 
	// END RectVisible;
	
	proc Rectangle(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer): BOOL 
	// END Rectangle;
	
	proc RestoreDC(p0: HDC; p1: integer): BOOL 
	// END RestoreDC;
	
	proc ResetDCA(p0: HDC; var p1: DEVMODEA): HDC 
	// END ResetDCA;
	
	proc ResetDCW(p0: HDC; var p1: DEVMODEW): HDC 
	// END ResetDCW;
	
	proc ResetDC(p0: HDC; var p1: DEVMODEA): HDC 
	// END ResetDC;
	
	proc RealizePalette(p0: HDC): integer 
	// END RealizePalette;
	
	proc RemoveFontResourceA(p0: PtrSTR): BOOL 
	// END RemoveFontResourceA;
	
	proc RemoveFontResourceW(p0: PtrWSTR): BOOL 
	// END RemoveFontResourceW;
	
	proc RemoveFontResource(p0: PtrSTR): BOOL 
	// END RemoveFontResource;
	
	proc RoundRect(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer): BOOL 
	// END RoundRect;
	
	proc ResizePalette(p0: HPALETTE; p1: integer): BOOL 
	// END ResizePalette;
	
	proc SaveDC(p0: HDC): integer 
	// END SaveDC;
	
	proc SelectClipRgn(p0: HDC; p1: HRGN): integer 
	// END SelectClipRgn;
	
	proc ExtSelectClipRgn(p0: HDC; p1: HRGN; p2: integer): integer 
	// END ExtSelectClipRgn;
	
	proc SetMetaRgn(p0: HDC): integer 
	// END SetMetaRgn;
	
	proc SelectObject(p0: HDC; p1: HGDIOBJ): HGDIOBJ 
	// END SelectObject;
	
	proc SelectPalette(p0: HDC; p1: HPALETTE; p2: BOOL): HPALETTE 
	// END SelectPalette;
	
	proc SetBkColor(p0: HDC; p1: COLORREF): COLORREF 
	// END SetBkColor;
	
	proc SetBkMode(p0: HDC; p1: integer): integer 
	// END SetBkMode;
	
	proc SetBitmapBits(p0: HBITMAP; p1: integer; p2: PtrVoid): integer 
	// END SetBitmapBits;
	
	proc SetBoundsRect(p0: HDC; var p1: RECT; p2: set): set 
	// END SetBoundsRect;
	
	proc SetDIBits(p0: HDC; p1: HBITMAP; p2: integer; p3: integer; p4: PtrVoid; var p5: BITMAPINFO; p6: integer): integer 
	// END SetDIBits;
	
	proc SetDIBitsToDevice(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer; p9: PtrVoid; var p10: BITMAPINFO; p11: integer): integer 
	// END SetDIBitsToDevice;
	
	proc SetMapperFlags(p0: HDC; p1: integer): integer 
	// END SetMapperFlags;
	
	proc SetGraphicsMode(hdc: HDC; iMode: integer): integer 
	// END SetGraphicsMode;
	
	proc SetMapMode(p0: HDC; p1: integer): integer 
	// END SetMapMode;
	
	proc SetMetaFileBitsEx(p0: integer; var p1: carray of byte): HMETAFILE 
	// END SetMetaFileBitsEx;
	
	proc SetPaletteEntries(p0: HPALETTE; p1: integer; p2: integer; var p3: PALETTEENTRY): integer 
	// END SetPaletteEntries;
	
	proc SetPixel(p0: HDC; p1: integer; p2: integer; p3: COLORREF): COLORREF 
	// END SetPixel;
	
	proc SetPixelV(p0: HDC; p1: integer; p2: integer; p3: COLORREF): BOOL 
	// END SetPixelV;
	
	proc SetPixelFormat(p0: HDC; p1: integer; var p2: PIXELFORMATDESCRIPTOR): BOOL 
	// END SetPixelFormat;
	
	proc SetPolyFillMode(p0: HDC; p1: integer): integer 
	// END SetPolyFillMode;
	
	proc StretchBlt(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: HDC; p6: integer; p7: integer; p8: integer; p9: integer; p10: integer): BOOL 
	// END StretchBlt;
	
	proc SetRectRgn(p0: HRGN; p1: integer; p2: integer; p3: integer; p4: integer): BOOL 
	// END SetRectRgn;
	
	proc StretchDIBits(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer; p9: PtrVoid; var p10: BITMAPINFO; p11: integer; p12: integer): integer 
	// END StretchDIBits;
	
	proc SetROP2(p0: HDC; p1: integer): integer 
	// END SetROP2;
	
	proc SetStretchBltMode(p0: HDC; p1: integer): integer 
	// END SetStretchBltMode;
	
	proc SetSystemPaletteUse(p0: HDC; p1: integer): integer 
	// END SetSystemPaletteUse;
	
	proc SetTextCharacterExtra(p0: HDC; p1: integer): integer 
	// END SetTextCharacterExtra;
	
	proc SetTextColor(p0: HDC; p1: COLORREF): COLORREF 
	// END SetTextColor;
	
	proc SetTextAlign(p0: HDC; p1: set): set 
	// END SetTextAlign;
	
	proc SetTextJustification(p0: HDC; p1: integer; p2: integer): BOOL 
	// END SetTextJustification;
	
	proc UpdateColors(p0: HDC): BOOL 
	// END UpdateColors;
	
	proc PlayMetaFileRecord(p0: HDC; var p1: HANDLETABLE; var p2: METARECORD; p3: integer): BOOL 
	// END PlayMetaFileRecord;
	
	proc EnumMetaFile(p0: HDC; p1: HMETAFILE; p2: MFENUMPROC; p3: LPARAM): BOOL 
	// END EnumMetaFile;
	
	proc CloseEnhMetaFile(p0: HDC): HENHMETAFILE 
	// END CloseEnhMetaFile;
	
	proc CopyEnhMetaFileA(p0: HENHMETAFILE; p1: PtrSTR): HENHMETAFILE 
	// END CopyEnhMetaFileA;
	
	proc CopyEnhMetaFileW(p0: HENHMETAFILE; p1: PtrWSTR): HENHMETAFILE 
	// END CopyEnhMetaFileW;
	
	proc CopyEnhMetaFile(p0: HENHMETAFILE; p1: PtrSTR): HENHMETAFILE 
	// END CopyEnhMetaFile;
	
	proc CreateEnhMetaFileA(p0: HDC; p1: PtrSTR; var p2: RECT; p3: PtrSTR): HDC 
	// END CreateEnhMetaFileA;
	
	proc CreateEnhMetaFileW(p0: HDC; p1: PtrWSTR; var p2: RECT; p3: PtrWSTR): HDC 
	// END CreateEnhMetaFileW;
	
	proc CreateEnhMetaFile(p0: HDC; p1: PtrSTR; var p2: RECT; p3: PtrSTR): HDC 
	// END CreateEnhMetaFile;
	
	proc DeleteEnhMetaFile(p0: HENHMETAFILE): BOOL 
	// END DeleteEnhMetaFile;
	
	proc EnumEnhMetaFile(p0: HDC; p1: HENHMETAFILE; p2: ENHMFENUMPROC; p3: PtrVoid; var p4: RECT): BOOL 
	// END EnumEnhMetaFile;
	
	proc GetEnhMetaFileA(p0: PtrSTR): HENHMETAFILE 
	// END GetEnhMetaFileA;
	
	proc GetEnhMetaFileW(p0: PtrWSTR): HENHMETAFILE 
	// END GetEnhMetaFileW;
	
	proc GetEnhMetaFile(p0: PtrSTR): HENHMETAFILE 
	// END GetEnhMetaFile;
	
	proc GetEnhMetaFileBits(p0: HENHMETAFILE; p1: integer; var p2: char): integer 
	// END GetEnhMetaFileBits;
	
	proc GetEnhMetaFileDescriptionA(p0: HENHMETAFILE; p1: integer; p2: PtrSTR): integer 
	// END GetEnhMetaFileDescriptionA;
	
	proc GetEnhMetaFileDescriptionW(p0: HENHMETAFILE; p1: integer; p2: PtrWSTR): integer 
	// END GetEnhMetaFileDescriptionW;
	
	proc GetEnhMetaFileDescription(p0: HENHMETAFILE; p1: integer; p2: PtrSTR): integer 
	// END GetEnhMetaFileDescription;
	
	proc GetEnhMetaFileHeader(p0: HENHMETAFILE; p1: integer; var p2: ENHMETAHEADER): integer 
	// END GetEnhMetaFileHeader;
	
	proc GetEnhMetaFilePaletteEntries(p0: HENHMETAFILE; p1: integer; var p2: PALETTEENTRY): integer 
	// END GetEnhMetaFilePaletteEntries;
	
	proc GetEnhMetaFilePixelFormat(p0: HENHMETAFILE; p1: integer; var p2: PIXELFORMATDESCRIPTOR): integer 
	// END GetEnhMetaFilePixelFormat;
	
	proc GetWinMetaFileBits(p0: HENHMETAFILE; p1: integer; var p2: char; p3: integer; p4: HDC): integer 
	// END GetWinMetaFileBits;
	
	proc PlayEnhMetaFile(p0: HDC; p1: HENHMETAFILE; var p2: RECT): BOOL 
	// END PlayEnhMetaFile;
	
	proc PlayEnhMetaFileRecord(p0: HDC; var p1: HANDLETABLE; var p2: ENHMETARECORD; p3: integer): BOOL 
	// END PlayEnhMetaFileRecord;
	
	proc SetEnhMetaFileBits(p0: integer; var p1: char): HENHMETAFILE 
	// END SetEnhMetaFileBits;
	
	proc SetWinMetaFileBits(p0: integer; var p1: char; p2: HDC; var p3: METAFILEPICT): HENHMETAFILE 
	// END SetWinMetaFileBits;
	
	proc GdiComment(p0: HDC; p1: integer; var p2: char): BOOL 
	// END GdiComment;
	
	proc GetTextMetricsA(p0: HDC; var p1: TEXTMETRICA): BOOL 
	// END GetTextMetricsA;
	
	proc GetTextMetricsW(p0: HDC; var p1: TEXTMETRICW): BOOL 
	// END GetTextMetricsW;
	
	proc GetTextMetrics(p0: HDC; var p1: TEXTMETRICA): BOOL 
	// END GetTextMetrics;
	
	proc AngleArc(p0: HDC; p1: integer; p2: integer; p3: integer; p4: real; p5: real): BOOL 
	// END AngleArc;
	
	proc PolyPolyline(p0: HDC; var p1: POINT; var p2: integer; p3: integer): BOOL 
	// END PolyPolyline;
	
	proc GetWorldTransform(p0: HDC; var p1: XFORM): BOOL 
	// END GetWorldTransform;
	
	proc SetWorldTransform(p0: HDC; var p1: XFORM): BOOL 
	// END SetWorldTransform;
	
	proc ModifyWorldTransform(p0: HDC; var p1: XFORM; p2: integer): BOOL 
	// END ModifyWorldTransform;
	
	proc CombineTransform(var p0: XFORM; var p1: XFORM; var p2: XFORM): BOOL 
	// END CombineTransform;
	
	proc CreateDIBSection(p0: HDC; var p1: BITMAPINFO; p2: integer; var p3: PtrVoid; p4: HANDLE; p5: integer): HBITMAP 
	// END CreateDIBSection;
	
	proc GetDIBColorTable(p0: HDC; p1: integer; p2: integer; var p3: RGBQUAD): integer 
	// END GetDIBColorTable;
	
	proc SetDIBColorTable(p0: HDC; p1: integer; p2: integer; var p3: array of RGBQUAD): integer 
	// END SetDIBColorTable;
	
	proc SetColorAdjustment(p0: HDC; var p1: COLORADJUSTMENT): BOOL 
	// END SetColorAdjustment;
	
	proc GetColorAdjustment(p0: HDC; var p1: COLORADJUSTMENT): BOOL 
	// END GetColorAdjustment;
	
	proc CreateHalftonePalette(p0: HDC): HPALETTE 
	// END CreateHalftonePalette;
	
	proc StartDocA(p0: HDC; var p1: DOCINFOA): integer 
	// END StartDocA;
	
	proc StartDocW(p0: HDC; var p1: DOCINFOW): integer 
	// END StartDocW;
	
	proc StartDoc(p0: HDC; var p1: DOCINFOA): integer 
	// END StartDoc;
	
	proc EndDoc(p0: HDC): integer 
	// END EndDoc;
	
	proc StartPage(p0: HDC): integer 
	// END StartPage;
	
	proc EndPage(p0: HDC): integer 
	// END EndPage;
	
	proc AbortDoc(p0: HDC): integer 
	// END AbortDoc;
	
	proc SetAbortProc(p0: HDC; p1: ABORTPROC): integer 
	// END SetAbortProc;
	
	proc AbortPath(p0: HDC): BOOL 
	// END AbortPath;
	
	proc ArcTo(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; p5: integer; p6: integer; p7: integer; p8: integer): BOOL 
	// END ArcTo;
	
	proc BeginPath(p0: HDC): BOOL 
	// END BeginPath;
	
	proc CloseFigure(p0: HDC): BOOL 
	// END CloseFigure;
	
	proc EndPath(p0: HDC): BOOL 
	// END EndPath;
	
	proc FillPath(p0: HDC): BOOL 
	// END FillPath;
	
	proc FlattenPath(p0: HDC): BOOL 
	// END FlattenPath;
	
	proc GetPath(p0: HDC; var p1: POINT; var p2: char; p3: integer): integer 
	// END GetPath;
	
	proc PathToRegion(p0: HDC): HRGN 
	// END PathToRegion;
	
	proc PolyDraw(p0: HDC; var p1: POINT; var p2: char; p3: integer): BOOL 
	// END PolyDraw;
	
	proc SelectClipPath(p0: HDC; p1: integer): BOOL 
	// END SelectClipPath;
	
	proc SetArcDirection(p0: HDC; p1: integer): integer 
	// END SetArcDirection;
	
	proc SetMiterLimit(p0: HDC; p1: real; var p2: real): BOOL 
	// END SetMiterLimit;
	
	proc StrokeAndFillPath(p0: HDC): BOOL 
	// END StrokeAndFillPath;
	
	proc StrokePath(p0: HDC): BOOL 
	// END StrokePath;
	
	proc WidenPath(p0: HDC): BOOL 
	// END WidenPath;
	
	proc ExtCreatePen(p0: integer; p1: integer; var p2: LOGBRUSH; p3: integer; var p4: integer): HPEN 
	// END ExtCreatePen;
	
	proc GetMiterLimit(p0: HDC; var p1: real): BOOL 
	// END GetMiterLimit;
	
	proc GetArcDirection(p0: HDC): integer 
	// END GetArcDirection;
	
	proc GetObjectA(p0: HGDIOBJ; p1: integer; p2: PtrVoid): integer 
	// END GetObjectA;
	
	proc GetObjectW(p0: HGDIOBJ; p1: integer; p2: PtrVoid): integer 
	// END GetObjectW;
	
	proc GetObject(p0: HGDIOBJ; p1: integer; p2: PtrVoid): integer 
	// END GetObject;
	
	proc MoveToEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END MoveToEx;
	
	proc TextOutA(p0: HDC; p1: integer; p2: integer; p3: PtrSTR; p4: integer): BOOL 
	// END TextOutA;
	
	proc TextOutW(p0: HDC; p1: integer; p2: integer; p3: PtrWSTR; p4: integer): BOOL 
	// END TextOutW;
	
	proc TextOut(p0: HDC; p1: integer; p2: integer; p3: PtrSTR; p4: integer): BOOL 
	// END TextOut;
	
	proc ExtTextOutA(p0: HDC; p1: integer; p2: integer; p3: integer; var p4: RECT; p5: PtrSTR; p6: integer; var p7: carray of integer): BOOL 
	// END ExtTextOutA;
	
	proc ExtTextOutW(p0: HDC; p1: integer; p2: integer; p3: integer; var p4: RECT; p5: PtrWSTR; p6: integer; var p7: carray of integer): BOOL 
	// END ExtTextOutW;
	
	proc ExtTextOut(p0: HDC; p1: integer; p2: integer; p3: integer; var p4: RECT; p5: PtrSTR; p6: integer; var p7: carray of integer): BOOL 
	// END ExtTextOut;
	
	proc PolyTextOutA(p0: HDC; var p1: POLYTEXTA; p2: integer): BOOL 
	// END PolyTextOutA;
	
	proc PolyTextOutW(p0: HDC; var p1: POLYTEXTW; p2: integer): BOOL 
	// END PolyTextOutW;
	
	proc PolyTextOut(p0: HDC; var p1: POLYTEXTA; p2: integer): BOOL 
	// END PolyTextOut;
	
	proc CreatePolygonRgn(var p0: POINT; p1: integer; p2: integer): HRGN 
	// END CreatePolygonRgn;
	
	proc DPtoLP(p0: HDC; var p1: POINT; p2: integer): BOOL 
	// END DPtoLP;
	
	proc LPtoDP(p0: HDC; var p1: POINT; p2: integer): BOOL 
	// END LPtoDP;
	
	proc Polygon(p0: HDC; var p1: carray of POINT; p2: integer): BOOL 
	// END Polygon;
	
	proc Polyline(p0: HDC; var p1: carray of POINT; p2: integer): BOOL 
	// END Polyline;
	
	proc PolyBezier(p0: HDC; var p1: carray of POINT; p2: integer): BOOL 
	// END PolyBezier;
	
	proc PolyBezierTo(p0: HDC; var p1: carray of POINT; p2: integer): BOOL 
	// END PolyBezierTo;
	
	proc PolylineTo(p0: HDC; var p1: carray of POINT; p2: integer): BOOL 
	// END PolylineTo;
	
	proc SetViewportExtEx(p0: HDC; p1: integer; p2: integer; var p3: SIZE): BOOL 
	// END SetViewportExtEx;
	
	proc SetViewportOrgEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END SetViewportOrgEx;
	
	proc SetWindowExtEx(p0: HDC; p1: integer; p2: integer; var p3: SIZE): BOOL 
	// END SetWindowExtEx;
	
	proc SetWindowOrgEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END SetWindowOrgEx;
	
	proc OffsetViewportOrgEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END OffsetViewportOrgEx;
	
	proc OffsetWindowOrgEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END OffsetWindowOrgEx;
	
	proc ScaleViewportExtEx(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; var p5: SIZE): BOOL 
	// END ScaleViewportExtEx;
	
	proc ScaleWindowExtEx(p0: HDC; p1: integer; p2: integer; p3: integer; p4: integer; var p5: SIZE): BOOL 
	// END ScaleWindowExtEx;
	
	proc SetBitmapDimensionEx(p0: HBITMAP; p1: integer; p2: integer; var p3: SIZE): BOOL 
	// END SetBitmapDimensionEx;
	
	proc SetBrushOrgEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END SetBrushOrgEx;
	
	proc GetTextFaceA(p0: HDC; p1: integer; p2: PtrSTR): integer 
	// END GetTextFaceA;
	
	proc GetTextFaceW(p0: HDC; p1: integer; p2: PtrWSTR): integer 
	// END GetTextFaceW;
	
	proc GetTextFace(p0: HDC; p1: integer; p2: PtrSTR): integer 
	// END GetTextFace;
	
	proc GetKerningPairsA(p0: HDC; p1: integer; var p2: KERNINGPAIR): integer 
	// END GetKerningPairsA;
	
	proc GetKerningPairsW(p0: HDC; p1: integer; var p2: KERNINGPAIR): integer 
	// END GetKerningPairsW;
	
	proc GetKerningPairs(p0: HDC; p1: integer; var p2: KERNINGPAIR): integer 
	// END GetKerningPairs;
	
	proc GetDCOrgEx(p0: HDC; var p1: POINT): BOOL 
	// END GetDCOrgEx;
	
	proc FixBrushOrgEx(p0: HDC; p1: integer; p2: integer; var p3: POINT): BOOL 
	// END FixBrushOrgEx;
	
	proc UnrealizeObject(p0: HGDIOBJ): BOOL 
	// END UnrealizeObject;
	
	proc GdiFlush(): BOOL 
	// END GdiFlush;
	
	proc GdiSetBatchLimit(p0: integer): integer 
	// END GdiSetBatchLimit;
	
	proc GdiGetBatchLimit(): integer 
	// END GdiGetBatchLimit;
	
	proc SetICMMode(p0: HDC; p1: integer): integer 
	// END SetICMMode;
	
	proc CheckColorsInGamut(p0: HDC; p1: PtrVoid; p2: PtrVoid; p3: integer): BOOL 
	// END CheckColorsInGamut;
	
	proc GetColorSpace(p0: HDC): HANDLE 
	// END GetColorSpace;
	
	proc GetLogColorSpaceA(p0: HCOLORSPACE; var p1: LOGCOLORSPACEA; p2: integer): BOOL 
	// END GetLogColorSpaceA;
	
	proc GetLogColorSpaceW(p0: HCOLORSPACE; var p1: LOGCOLORSPACEW; p2: integer): BOOL 
	// END GetLogColorSpaceW;
	
	proc GetLogColorSpace(p0: HCOLORSPACE; var p1: LOGCOLORSPACEA; p2: integer): BOOL 
	// END GetLogColorSpace;
	
	proc CreateColorSpaceA(var p0: LOGCOLORSPACEA): HCOLORSPACE 
	// END CreateColorSpaceA;
	
	proc CreateColorSpaceW(var p0: LOGCOLORSPACEW): HCOLORSPACE 
	// END CreateColorSpaceW;
	
	proc CreateColorSpace(var p0: LOGCOLORSPACEA): HCOLORSPACE 
	// END CreateColorSpace;
	
	proc SetColorSpace(p0: HDC; p1: HCOLORSPACE): BOOL 
	// END SetColorSpace;
	
	proc DeleteColorSpace(p0: HCOLORSPACE): BOOL 
	// END DeleteColorSpace;
	
	proc GetICMProfileA(p0: HDC; var p1: integer; p2: PtrSTR): BOOL 
	// END GetICMProfileA;
	
	proc GetICMProfileW(p0: HDC; var p1: integer; p2: PtrWSTR): BOOL 
	// END GetICMProfileW;
	
	proc GetICMProfile(p0: HDC; var p1: integer; p2: PtrSTR): BOOL 
	// END GetICMProfile;
	
	proc SetICMProfileA(p0: HDC; p1: PtrSTR): BOOL 
	// END SetICMProfileA;
	
	proc SetICMProfileW(p0: HDC; p1: PtrWSTR): BOOL 
	// END SetICMProfileW;
	
	proc SetICMProfile(p0: HDC; p1: PtrSTR): BOOL 
	// END SetICMProfile;
	
	proc GetDeviceGammaRamp(p0: HDC; p1: PtrVoid): BOOL 
	// END GetDeviceGammaRamp;
	
	proc SetDeviceGammaRamp(p0: HDC; p1: PtrVoid): BOOL 
	// END SetDeviceGammaRamp;
	
	proc ColorMatchToTarget(p0: HDC; p1: HDC; p2: integer): BOOL 
	// END ColorMatchToTarget;
	
	proc EnumICMProfilesA(p0: HDC; p1: ICMENUMPROCA; p2: LPARAM): integer 
	// END EnumICMProfilesA;
	
	proc EnumICMProfilesW(p0: HDC; p1: ICMENUMPROCW; p2: LPARAM): integer 
	// END EnumICMProfilesW;
	
	proc EnumICMProfiles(p0: HDC; p1: ICMENUMPROCA; p2: LPARAM): integer 
	// END EnumICMProfiles;
	
	proc wglCopyContext(p0: HGLRC; p1: HGLRC; p2: integer): BOOL 
	// END wglCopyContext;
	
	proc wglCreateContext(p0: HDC): HGLRC 
	// END wglCreateContext;
	
	proc wglCreateLayerContext(p0: HDC; p1: integer): HGLRC 
	// END wglCreateLayerContext;
	
	proc wglDeleteContext(p0: HGLRC): BOOL 
	// END wglDeleteContext;
	
	proc wglGetCurrentContext(): HGLRC 
	// END wglGetCurrentContext;
	
	proc wglGetCurrentDC(): HDC 
	// END wglGetCurrentDC;
	
	proc wglGetProcAddress(p0: PtrSTR): ROC 
	// END wglGetProcAddress;
	
	proc wglMakeCurrent(p0: HDC; p1: HGLRC): BOOL 
	// END wglMakeCurrent;
	
	proc wglShareLists(p0: HGLRC; p1: HGLRC): BOOL 
	// END wglShareLists;
	
	proc wglUseFontBitmapsA(p0: HDC; p1: integer; p2: integer; p3: integer): BOOL 
	// END wglUseFontBitmapsA;
	
	proc wglUseFontBitmapsW(p0: HDC; p1: integer; p2: integer; p3: integer): BOOL 
	// END wglUseFontBitmapsW;
	
	proc wglUseFontBitmaps(p0: HDC; p1: integer; p2: integer; p3: integer): BOOL 
	// END wglUseFontBitmaps;
	
	proc SwapBuffers(p0: HDC): BOOL 
	// END SwapBuffers;
	
	proc wglUseFontOutlinesA(p0: HDC; p1: integer; p2: integer; p3: integer; p4: real; p5: real; p6: integer; var p7: GLYPHMETRICSFLOAT): BOOL 
	// END wglUseFontOutlinesA;
	
	proc wglUseFontOutlinesW(p0: HDC; p1: integer; p2: integer; p3: integer; p4: real; p5: real; p6: integer; var p7: GLYPHMETRICSFLOAT): BOOL 
	// END wglUseFontOutlinesW;
	
	proc wglUseFontOutlines(p0: HDC; p1: integer; p2: integer; p3: integer; p4: real; p5: real; p6: integer; var p7: GLYPHMETRICSFLOAT): BOOL 
	// END wglUseFontOutlines;
	
	proc wglDescribeLayerPlane(p0: HDC; p1: integer; p2: integer; p3: integer; var p4: LAYERPLANEDESCRIPTOR): BOOL 
	// END wglDescribeLayerPlane;
	
	proc wglSetLayerPaletteEntries(p0: HDC; p1: integer; p2: integer; p3: integer; var p4: COLORREF): integer 
	// END wglSetLayerPaletteEntries;
	
	proc wglGetLayerPaletteEntries(p0: HDC; p1: integer; p2: integer; p3: integer; var p4: COLORREF): integer 
	// END wglGetLayerPaletteEntries;
	
	proc wglRealizeLayerPalette(p0: HDC; p1: integer; p2: BOOL): BOOL 
	// END wglRealizeLayerPalette;
	
	proc wglSwapLayerBuffers(p0: HDC; p1: integer): BOOL 
	// END wglSwapLayerBuffers;
	
	proc wvsprintfA(p0: PtrSTR; p1: PtrSTR; arglist: PtrSTR): integer 
	// END wvsprintfA;
	
	proc wvsprintfW(p0: PtrWSTR; p1: PtrWSTR; arglist: PtrSTR): integer 
	// END wvsprintfW;
	
	proc wvsprintf(p0: PtrSTR; p1: PtrSTR; arglist: PtrSTR): integer 
	// END wvsprintf;
	
	proc wsprintfA(p0: PtrSTR; p1: PtrSTR): integer 
	// END wsprintfA;
	
	proc wsprintfW(p0: PtrWSTR; p1: PtrWSTR): integer 
	// END wsprintfW;
	
	proc wsprintf(p0: PtrSTR; p1: PtrSTR): integer 
	// END wsprintf;
	
	proc LoadKeyboardLayoutA(pwszKLID: PtrSTR; Flags: set): HKL 
	// END LoadKeyboardLayoutA;
	
	proc LoadKeyboardLayoutW(pwszKLID: PtrWSTR; Flags: set): HKL 
	// END LoadKeyboardLayoutW;
	
	proc LoadKeyboardLayout(pwszKLID: PtrSTR; Flags: set): HKL 
	// END LoadKeyboardLayout;
	
	proc ActivateKeyboardLayout(hkl: HKL; Flags: set): HKL 
	// END ActivateKeyboardLayout;
	
	proc ToUnicodeEx(wVirtKey: integer; wScanCode: integer; var lpKeyState: char; pwszBuff: PtrWSTR; cchBuff: integer; wFlags: integer; dwhkl: HKL): integer 
	// END ToUnicodeEx;
	
	proc UnloadKeyboardLayout(hkl: HKL): BOOL 
	// END UnloadKeyboardLayout;
	
	proc GetKeyboardLayoutNameA(pwszKLID: PtrSTR): BOOL 
	// END GetKeyboardLayoutNameA;
	
	proc GetKeyboardLayoutNameW(pwszKLID: PtrWSTR): BOOL 
	// END GetKeyboardLayoutNameW;
	
	proc GetKeyboardLayoutName(pwszKLID: PtrSTR): BOOL 
	// END GetKeyboardLayoutName;
	
	proc GetKeyboardLayoutList(nBuff: integer; var lpList: HKL): integer 
	// END GetKeyboardLayoutList;
	
	proc GetKeyboardLayout(dwLayout: integer): HKL 
	// END GetKeyboardLayout;
	
	proc CreateDesktopA(lpszDesktop: PtrSTR; lpszDevice: PtrSTR; var pDevmode: DEVMODEA; dwFlags: set; dwDesiredAccess: set; var lpsa: SECURITY_ATTRIBUTES): HDESK 
	// END CreateDesktopA;
	
	proc CreateDesktopW(lpszDesktop: PtrWSTR; lpszDevice: PtrWSTR; var pDevmode: DEVMODEW; dwFlags: set; dwDesiredAccess: set; var lpsa: SECURITY_ATTRIBUTES): HDESK 
	// END CreateDesktopW;
	
	proc CreateDesktop(lpszDesktop: PtrSTR; lpszDevice: PtrSTR; var pDevmode: DEVMODEA; dwFlags: set; dwDesiredAccess: set; var lpsa: SECURITY_ATTRIBUTES): HDESK 
	// END CreateDesktop;
	
	proc OpenDesktopA(lpszDesktop: PtrSTR; dwFlags: set; fInherit: BOOL; dwDesiredAccess: set): HDESK 
	// END OpenDesktopA;
	
	proc OpenDesktopW(lpszDesktop: PtrWSTR; dwFlags: set; fInherit: BOOL; dwDesiredAccess: set): HDESK 
	// END OpenDesktopW;
	
	proc OpenDesktop(lpszDesktop: PtrSTR; dwFlags: set; fInherit: BOOL; dwDesiredAccess: set): HDESK 
	// END OpenDesktop;
	
	proc OpenInputDesktop(dwFlags: set; fInherit: BOOL; dwDesiredAccess: set): HDESK 
	// END OpenInputDesktop;
	
	proc EnumDesktopsA(hwinsta: HWINSTA; lpEnumFunc: DESKTOPENUMPROCA; lParam: LPARAM): BOOL 
	// END EnumDesktopsA;
	
	proc EnumDesktopsW(hwinsta: HWINSTA; lpEnumFunc: DESKTOPENUMPROCW; lParam: LPARAM): BOOL 
	// END EnumDesktopsW;
	
	proc EnumDesktops(hwinsta: HWINSTA; lpEnumFunc: DESKTOPENUMPROCA; lParam: LPARAM): BOOL 
	// END EnumDesktops;
	
	proc EnumDesktopWindows(hDesktop: HDESK; lpfn: WNDENUMPROC; lParam: LPARAM): BOOL 
	// END EnumDesktopWindows;
	
	proc SwitchDesktop(hDesktop: HDESK): BOOL 
	// END SwitchDesktop;
	
	proc SetThreadDesktop(hDesktop: HDESK): BOOL 
	// END SetThreadDesktop;
	
	proc CloseDesktop(hDesktop: HDESK): BOOL 
	// END CloseDesktop;
	
	proc GetThreadDesktop(dwThreadId: integer): HDESK 
	// END GetThreadDesktop;
	
	proc CreateWindowStationA(lpwinsta: PtrSTR; dwReserved: integer; dwDesiredAccess: set; var lpsa: SECURITY_ATTRIBUTES): HWINSTA 
	// END CreateWindowStationA;
	
	proc CreateWindowStationW(lpwinsta: PtrWSTR; dwReserved: integer; dwDesiredAccess: set; var lpsa: SECURITY_ATTRIBUTES): HWINSTA 
	// END CreateWindowStationW;
	
	proc CreateWindowStation(lpwinsta: PtrSTR; dwReserved: integer; dwDesiredAccess: set; var lpsa: SECURITY_ATTRIBUTES): HWINSTA 
	// END CreateWindowStation;
	
	proc OpenWindowStationA(lpszWinSta: PtrSTR; fInherit: BOOL; dwDesiredAccess: set): HWINSTA 
	// END OpenWindowStationA;
	
	proc OpenWindowStationW(lpszWinSta: PtrWSTR; fInherit: BOOL; dwDesiredAccess: set): HWINSTA 
	// END OpenWindowStationW;
	
	proc OpenWindowStation(lpszWinSta: PtrSTR; fInherit: BOOL; dwDesiredAccess: set): HWINSTA 
	// END OpenWindowStation;
	
	proc EnumWindowStationsA(lpEnumFunc: WINSTAENUMPROCA; lParam: LPARAM): BOOL 
	// END EnumWindowStationsA;
	
	proc EnumWindowStationsW(lpEnumFunc: WINSTAENUMPROCW; lParam: LPARAM): BOOL 
	// END EnumWindowStationsW;
	
	proc EnumWindowStations(lpEnumFunc: WINSTAENUMPROCA; lParam: LPARAM): BOOL 
	// END EnumWindowStations;
	
	proc CloseWindowStation(hWinSta: HWINSTA): BOOL 
	// END CloseWindowStation;
	
	proc SetProcessWindowStation(hWinSta: HWINSTA): BOOL 
	// END SetProcessWindowStation;
	
	proc GetProcessWindowStation(): HWINSTA 
	// END GetProcessWindowStation;
	
	proc SetUserObjectSecurity(hObj: HANDLE; var pSIRequested: integer; pSID: PSECURITY_DESCRIPTOR): BOOL 
	// END SetUserObjectSecurity;
	
	proc GetUserObjectSecurity(hObj: HANDLE; var pSIRequested: integer; pSID: PSECURITY_DESCRIPTOR; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetUserObjectSecurity;
	
	proc GetUserObjectInformationA(hObj: HANDLE; nIndex: integer; pvInfo: PtrVoid; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetUserObjectInformationA;
	
	proc GetUserObjectInformationW(hObj: HANDLE; nIndex: integer; pvInfo: PtrVoid; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetUserObjectInformationW;
	
	proc GetUserObjectInformation(hObj: HANDLE; nIndex: integer; pvInfo: PtrVoid; nLength: integer; var lpnLengthNeeded: integer): BOOL 
	// END GetUserObjectInformation;
	
	proc SetUserObjectInformationA(hObj: HANDLE; nIndex: integer; pvInfo: PtrVoid; nLength: integer): BOOL 
	// END SetUserObjectInformationA;
	
	proc SetUserObjectInformationW(hObj: HANDLE; nIndex: integer; pvInfo: PtrVoid; nLength: integer): BOOL 
	// END SetUserObjectInformationW;
	
	proc SetUserObjectInformation(hObj: HANDLE; nIndex: integer; pvInfo: PtrVoid; nLength: integer): BOOL 
	// END SetUserObjectInformation;
	
	proc RegisterWindowMessageA(lpString: PtrSTR): integer 
	// END RegisterWindowMessageA;
	
	proc RegisterWindowMessageW(lpString: PtrWSTR): integer 
	// END RegisterWindowMessageW;
	
	proc RegisterWindowMessage(lpString: PtrSTR): integer 
	// END RegisterWindowMessage;
	
	proc DrawEdge(hdc: HDC; var qrc: RECT; edge: set; grfFlags: set): BOOL 
	// END DrawEdge;
	
	proc DrawFrameControl(p0: HDC; var p1: RECT; p2: integer; p3: set): BOOL 
	// END DrawFrameControl;
	
	proc DrawCaption(p0: HWND; p1: HDC; var p2: RECT; p3: integer): BOOL 
	// END DrawCaption;
	
	proc DrawAnimatedRects(hwnd: HWND; idAni: integer; var lprcFrom: RECT; var lprcTo: RECT): BOOL 
	// END DrawAnimatedRects;
	
	proc GetMessageA(var lpMsg: MSG; hWnd: HWND; wMsgFilterMin: integer; wMsgFilterMax: integer): BOOL 
	// END GetMessageA;
	
	proc GetMessageW(var lpMsg: MSG; hWnd: HWND; wMsgFilterMin: integer; wMsgFilterMax: integer): BOOL 
	// END GetMessageW;
	
	proc GetMessage(var lpMsg: MSG; hWnd: HWND; wMsgFilterMin: integer; wMsgFilterMax: integer): BOOL 
	// END GetMessage;
	
	proc TranslateMessage(var lpMsg: MSG): BOOL 
	// END TranslateMessage;
	
	proc DispatchMessageA(var lpMsg: MSG): integer 
	// END DispatchMessageA;
	
	proc DispatchMessageW(var lpMsg: MSG): integer 
	// END DispatchMessageW;
	
	proc DispatchMessage(var lpMsg: MSG): integer 
	// END DispatchMessage;
	
	proc SetMessageQueue(cMessagesMax: integer): BOOL 
	// END SetMessageQueue;
	
	proc PeekMessageA(var lpMsg: MSG; hWnd: HWND; wMsgFilterMin: integer; wMsgFilterMax: integer; wRemoveMsg: integer): BOOL 
	// END PeekMessageA;
	
	proc PeekMessageW(var lpMsg: MSG; hWnd: HWND; wMsgFilterMin: integer; wMsgFilterMax: integer; wRemoveMsg: integer): BOOL 
	// END PeekMessageW;
	
	proc PeekMessage(var lpMsg: MSG; hWnd: HWND; wMsgFilterMin: integer; wMsgFilterMax: integer; wRemoveMsg: integer): BOOL 
	// END PeekMessage;
	
	proc RegisterHotKey(hWnd: HWND; id: integer; fsModifiers: set; vk: integer): BOOL 
	// END RegisterHotKey;
	
	proc UnregisterHotKey(hWnd: HWND; id: integer): BOOL 
	// END UnregisterHotKey;
	
	proc ExitWindowsEx(uFlags: set; dwReserved: integer): BOOL 
	// END ExitWindowsEx;
	
	proc SwapMouseButton(fSwap: BOOL): BOOL 
	// END SwapMouseButton;
	
	proc GetMessagePos(): integer 
	// END GetMessagePos;
	
	proc GetMessageTime(): integer 
	// END GetMessageTime;
	
	proc GetMessageExtraInfo(): integer 
	// END GetMessageExtraInfo;
	
	proc SetMessageExtraInfo(lParam: LPARAM): LPARAM 
	// END SetMessageExtraInfo;
	
	proc SendMessageA(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END SendMessageA;
	
	proc SendMessageW(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END SendMessageW;
	
	proc SendMessage(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END SendMessage;
	
	proc SendMessageTimeoutA(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM; fuFlags: set; uTimeout: integer; var lpdwResult: integer): LRESULT 
	// END SendMessageTimeoutA;
	
	proc SendMessageTimeoutW(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM; fuFlags: set; uTimeout: integer; var lpdwResult: integer): LRESULT 
	// END SendMessageTimeoutW;
	
	proc SendMessageTimeout(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM; fuFlags: set; uTimeout: integer; var lpdwResult: integer): LRESULT 
	// END SendMessageTimeout;
	
	proc SendNotifyMessageA(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END SendNotifyMessageA;
	
	proc SendNotifyMessageW(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END SendNotifyMessageW;
	
	proc SendNotifyMessage(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END SendNotifyMessage;
	
	proc SendMessageCallbackA(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM; lpResultCallBack: SENDASYNCPROC; dwData: integer): BOOL 
	// END SendMessageCallbackA;
	
	proc SendMessageCallbackW(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM; lpResultCallBack: SENDASYNCPROC; dwData: integer): BOOL 
	// END SendMessageCallbackW;
	
	proc SendMessageCallback(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM; lpResultCallBack: SENDASYNCPROC; dwData: integer): BOOL 
	// END SendMessageCallback;
	
	proc BroadcastSystemMessageA(p0: set; var p1: set; p2: integer; p3: WPARAM; p4: LPARAM): integer 
	// END BroadcastSystemMessageA;
	
	proc BroadcastSystemMessageW(p0: set; var p1: set; p2: integer; p3: WPARAM; p4: LPARAM): integer 
	// END BroadcastSystemMessageW;
	
	proc BroadcastSystemMessage(p0: set; var p1: set; p2: integer; p3: WPARAM; p4: LPARAM): integer 
	// END BroadcastSystemMessage;
	
	proc PostMessageA(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END PostMessageA;
	
	proc PostMessageW(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END PostMessageW;
	
	proc PostMessage(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END PostMessage;
	
	proc PostThreadMessageA(idThread: integer; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END PostThreadMessageA;
	
	proc PostThreadMessageW(idThread: integer; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END PostThreadMessageW;
	
	proc PostThreadMessage(idThread: integer; Msg: integer; wParam: WPARAM; lParam: LPARAM): BOOL 
	// END PostThreadMessage;
	
	proc AttachThreadInput(idAttach: integer; idAttachTo: integer; fAttach: BOOL): BOOL 
	// END AttachThreadInput;
	
	proc ReplyMessage(lResult: LRESULT): BOOL 
	// END ReplyMessage;
	
	proc WaitMessage(): BOOL 
	// END WaitMessage;
	
	proc WaitForInputIdle(hProcess: HANDLE; dwMilliseconds: integer): integer 
	// END WaitForInputIdle;
	
	proc DefWindowProcA(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefWindowProcA;
	
	proc DefWindowProcW(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefWindowProcW;
	
	proc DefWindowProc(hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefWindowProc;
	
	proc PostQuitMessage(nExitCode: integer) 
	// END PostQuitMessage;
	
	proc CallWindowProcA(lpPrevWndFunc: FARPROC; hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END CallWindowProcA;
	
	proc CallWindowProcW(lpPrevWndFunc: FARPROC; hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END CallWindowProcW;
	
	proc CallWindowProc(lpPrevWndFunc: FARPROC; hWnd: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END CallWindowProc;
	
	proc InSendMessage(): BOOL 
	// END InSendMessage;
	
	proc GetDoubleClickTime(): integer 
	// END GetDoubleClickTime;
	
	proc SetDoubleClickTime(p0: integer): BOOL 
	// END SetDoubleClickTime;
	
	proc RegisterClassA(var lpWndClass: WNDCLASSA): ATOM 
	// END RegisterClassA;
	
	proc RegisterClassW(var lpWndClass: WNDCLASSW): ATOM 
	// END RegisterClassW;
	
	proc RegisterClass(var lpWndClass: WNDCLASSA): ATOM 
	// END RegisterClass;
	
	proc UnregisterClassA(lpClassName: PtrSTR; hInstance: HINSTANCE): BOOL 
	// END UnregisterClassA;
	
	proc UnregisterClassW(lpClassName: PtrWSTR; hInstance: HINSTANCE): BOOL 
	// END UnregisterClassW;
	
	proc UnregisterClass(lpClassName: PtrSTR; hInstance: HINSTANCE): BOOL 
	// END UnregisterClass;
	
	proc GetClassInfoA(hInstance: HINSTANCE; lpClassName: PtrSTR; var lpWndClass: WNDCLASSA): BOOL 
	// END GetClassInfoA;
	
	proc GetClassInfoW(hInstance: HINSTANCE; lpClassName: PtrWSTR; var lpWndClass: WNDCLASSW): BOOL 
	// END GetClassInfoW;
	
	proc GetClassInfo(hInstance: HINSTANCE; lpClassName: PtrSTR; var lpWndClass: WNDCLASSA): BOOL 
	// END GetClassInfo;
	
	proc RegisterClassExA(var p0: WNDCLASSEXA): ATOM 
	// END RegisterClassExA;
	
	proc RegisterClassExW(var p0: WNDCLASSEXW): ATOM 
	// END RegisterClassExW;
	
	proc RegisterClassEx(var p0: WNDCLASSEXA): ATOM 
	// END RegisterClassEx;
	
	proc GetClassInfoExA(p0: HINSTANCE; p1: PtrSTR; var p2: WNDCLASSEXA): BOOL 
	// END GetClassInfoExA;
	
	proc GetClassInfoExW(p0: HINSTANCE; p1: PtrWSTR; var p2: WNDCLASSEXW): BOOL 
	// END GetClassInfoExW;
	
	proc GetClassInfoEx(p0: HINSTANCE; p1: PtrSTR; var p2: WNDCLASSEXA): BOOL 
	// END GetClassInfoEx;
	
	proc CreateWindowExA(dwExStyle: set; lpClassName: PtrSTR; lpWindowName: PtrSTR; dwStyle: set; X: integer; Y: integer; nWidth: integer; nHeight: integer; hWndParent: HWND; hMenu: HMENU; hInstance: HINSTANCE; lpParam: PtrVoid): HWND 
	// END CreateWindowExA;
	
	proc CreateWindowExW(dwExStyle: set; lpClassName: PtrWSTR; lpWindowName: PtrWSTR; dwStyle: set; X: integer; Y: integer; nWidth: integer; nHeight: integer; hWndParent: HWND; hMenu: HMENU; hInstance: HINSTANCE; lpParam: PtrVoid): HWND 
	// END CreateWindowExW;
	
	proc CreateWindowEx(dwExStyle: set; lpClassName: PtrSTR; lpWindowName: PtrSTR; dwStyle: set; X: integer; Y: integer; nWidth: integer; nHeight: integer; hWndParent: HWND; hMenu: HMENU; hInstance: HINSTANCE; lpParam: PtrVoid): HWND 
	// END CreateWindowEx;
	
	proc IsWindow(hWnd: HWND): BOOL 
	// END IsWindow;
	
	proc IsMenu(hMenu: HMENU): BOOL 
	// END IsMenu;
	
	proc IsChild(hWndParent: HWND; hWnd: HWND): BOOL 
	// END IsChild;
	
	proc DestroyWindow(hWnd: HWND): BOOL 
	// END DestroyWindow;
	
	proc ShowWindow(hWnd: HWND; nCmdShow: integer): BOOL 
	// END ShowWindow;
	
	proc ShowWindowAsync(hWnd: HWND; nCmdShow: integer): BOOL 
	// END ShowWindowAsync;
	
	proc FlashWindow(hWnd: HWND; bInvert: BOOL): BOOL 
	// END FlashWindow;
	
	proc ShowOwnedPopups(hWnd: HWND; fShow: BOOL): BOOL 
	// END ShowOwnedPopups;
	
	proc OpenIcon(hWnd: HWND): BOOL 
	// END OpenIcon;
	
	proc CloseWindow(hWnd: HWND): BOOL 
	// END CloseWindow;
	
	proc MoveWindow(hWnd: HWND; X: integer; Y: integer; nWidth: integer; nHeight: integer; bRepaint: BOOL): BOOL 
	// END MoveWindow;
	
	proc SetWindowPos(hWnd: HWND; hWndInsertAfter: HWND; X: integer; Y: integer; cx: integer; cy: integer; uFlags: set): BOOL 
	// END SetWindowPos;
	
	proc GetWindowPlacement(hWnd: HWND; var lpwndpl: WINDOWPLACEMENT): BOOL 
	// END GetWindowPlacement;
	
	proc SetWindowPlacement(hWnd: HWND; var lpwndpl: WINDOWPLACEMENT): BOOL 
	// END SetWindowPlacement;
	
	proc BeginDeferWindowPos(nNumWindows: integer): HDWP 
	// END BeginDeferWindowPos;
	
	proc DeferWindowPos(hWinPosInfo: HDWP; hWnd: HWND; hWndInsertAfter: HWND; x: integer; y: integer; cx: integer; cy: integer; uFlags: set): HDWP 
	// END DeferWindowPos;
	
	proc EndDeferWindowPos(hWinPosInfo: HDWP): BOOL 
	// END EndDeferWindowPos;
	
	proc IsWindowVisible(hWnd: HWND): BOOL 
	// END IsWindowVisible;
	
	proc IsIconic(hWnd: HWND): BOOL 
	// END IsIconic;
	
	proc AnyPopup(): BOOL 
	// END AnyPopup;
	
	proc BringWindowToTop(hWnd: HWND): BOOL 
	// END BringWindowToTop;
	
	proc IsZoomed(hWnd: HWND): BOOL 
	// END IsZoomed;
	
	proc CreateDialogParamA(hInstance: HINSTANCE; lpTemplateName: PtrSTR; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): HWND 
	// END CreateDialogParamA;
	
	proc CreateDialogParamW(hInstance: HINSTANCE; lpTemplateName: PtrWSTR; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): HWND 
	// END CreateDialogParamW;
	
	proc CreateDialogParam(hInstance: HINSTANCE; lpTemplateName: PtrSTR; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): HWND 
	// END CreateDialogParam;
	
	proc CreateDialogIndirectParamA(hInstance: HINSTANCE; var lpTemplate: DLGTEMPLATE; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): HWND 
	// END CreateDialogIndirectParamA;
	
	proc CreateDialogIndirectParamW(hInstance: HINSTANCE; var lpTemplate: DLGTEMPLATE; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): HWND 
	// END CreateDialogIndirectParamW;
	
	proc CreateDialogIndirectParam(hInstance: HINSTANCE; var lpTemplate: DLGTEMPLATE; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): HWND 
	// END CreateDialogIndirectParam;
	
	proc DialogBoxParamA(hInstance: HINSTANCE; lpTemplateName: PtrSTR; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): integer 
	// END DialogBoxParamA;
	
	proc DialogBoxParamW(hInstance: HINSTANCE; lpTemplateName: PtrWSTR; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): integer 
	// END DialogBoxParamW;
	
	proc DialogBoxParam(hInstance: HINSTANCE; lpTemplateName: PtrSTR; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): integer 
	// END DialogBoxParam;
	
	proc DialogBoxIndirectParamA(hInstance: HINSTANCE; var hDialogTemplate: DLGTEMPLATE; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): integer 
	// END DialogBoxIndirectParamA;
	
	proc DialogBoxIndirectParamW(hInstance: HINSTANCE; var hDialogTemplate: DLGTEMPLATE; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): integer 
	// END DialogBoxIndirectParamW;
	
	proc DialogBoxIndirectParam(hInstance: HINSTANCE; var hDialogTemplate: DLGTEMPLATE; hWndParent: HWND; lpDialogFunc: DLGPROC; dwInitParam: LPARAM): integer 
	// END DialogBoxIndirectParam;
	
	proc EndDialog(hDlg: HWND; nResult: integer): BOOL 
	// END EndDialog;
	
	proc GetDlgItem(hDlg: HWND; nIDDlgItem: integer): HWND 
	// END GetDlgItem;
	
	proc SetDlgItemInt(hDlg: HWND; nIDDlgItem: integer; uValue: integer; bSigned: BOOL): BOOL 
	// END SetDlgItemInt;
	
	proc GetDlgItemInt(hDlg: HWND; nIDDlgItem: integer; var lpTranslated: BOOL; bSigned: BOOL): integer 
	// END GetDlgItemInt;
	
	proc SetDlgItemTextA(hDlg: HWND; nIDDlgItem: integer; lpString: PtrSTR): BOOL 
	// END SetDlgItemTextA;
	
	proc SetDlgItemTextW(hDlg: HWND; nIDDlgItem: integer; lpString: PtrWSTR): BOOL 
	// END SetDlgItemTextW;
	
	proc SetDlgItemText(hDlg: HWND; nIDDlgItem: integer; lpString: PtrSTR): BOOL 
	// END SetDlgItemText;
	
	proc GetDlgItemTextA(hDlg: HWND; nIDDlgItem: integer; lpString: PtrSTR; nMaxCount: integer): integer 
	// END GetDlgItemTextA;
	
	proc GetDlgItemTextW(hDlg: HWND; nIDDlgItem: integer; lpString: PtrWSTR; nMaxCount: integer): integer 
	// END GetDlgItemTextW;
	
	proc GetDlgItemText(hDlg: HWND; nIDDlgItem: integer; lpString: PtrSTR; nMaxCount: integer): integer 
	// END GetDlgItemText;
	
	proc CheckDlgButton(hDlg: HWND; nIDButton: integer; uCheck: set): BOOL 
	// END CheckDlgButton;
	
	proc CheckRadioButton(hDlg: HWND; nIDFirstButton: integer; nIDLastButton: integer; nIDCheckButton: integer): BOOL 
	// END CheckRadioButton;
	
	proc IsDlgButtonChecked(hDlg: HWND; nIDButton: integer): integer 
	// END IsDlgButtonChecked;
	
	proc SendDlgItemMessageA(hDlg: HWND; nIDDlgItem: integer; Msg: integer; wParam: WPARAM; lParam: LPARAM): integer 
	// END SendDlgItemMessageA;
	
	proc SendDlgItemMessageW(hDlg: HWND; nIDDlgItem: integer; Msg: integer; wParam: WPARAM; lParam: LPARAM): integer 
	// END SendDlgItemMessageW;
	
	proc SendDlgItemMessage(hDlg: HWND; nIDDlgItem: integer; Msg: integer; wParam: WPARAM; lParam: LPARAM): integer 
	// END SendDlgItemMessage;
	
	proc GetNextDlgGroupItem(hDlg: HWND; hCtl: HWND; bPrevious: BOOL): HWND 
	// END GetNextDlgGroupItem;
	
	proc GetNextDlgTabItem(hDlg: HWND; hCtl: HWND; bPrevious: BOOL): HWND 
	// END GetNextDlgTabItem;
	
	proc GetDlgCtrlID(hWnd: HWND): integer 
	// END GetDlgCtrlID;
	
	proc GetDialogBaseUnits(): integer 
	// END GetDialogBaseUnits;
	
	proc DefDlgProcA(hDlg: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefDlgProcA;
	
	proc DefDlgProcW(hDlg: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefDlgProcW;
	
	proc DefDlgProc(hDlg: HWND; Msg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefDlgProc;
	
	proc CallMsgFilterA(var lpMsg: MSG; nCode: integer): BOOL 
	// END CallMsgFilterA;
	
	proc CallMsgFilterW(var lpMsg: MSG; nCode: integer): BOOL 
	// END CallMsgFilterW;
	
	proc CallMsgFilter(var lpMsg: MSG; nCode: integer): BOOL 
	// END CallMsgFilter;
	
	proc OpenClipboard(hWndNewOwner: HWND): BOOL 
	// END OpenClipboard;
	
	proc CloseClipboard(): BOOL 
	// END CloseClipboard;
	
	proc GetClipboardOwner(): HWND 
	// END GetClipboardOwner;
	
	proc SetClipboardViewer(hWndNewViewer: HWND): HWND 
	// END SetClipboardViewer;
	
	proc GetClipboardViewer(): HWND 
	// END GetClipboardViewer;
	
	proc ChangeClipboardChain(hWndRemove: HWND; hWndNewNext: HWND): BOOL 
	// END ChangeClipboardChain;
	
	proc SetClipboardData(uFormat: integer; hMem: HANDLE): HANDLE 
	// END SetClipboardData;
	
	proc GetClipboardData(uFormat: integer): HANDLE 
	// END GetClipboardData;
	
	proc RegisterClipboardFormatA(lpszFormat: PtrSTR): integer 
	// END RegisterClipboardFormatA;
	
	proc RegisterClipboardFormatW(lpszFormat: PtrWSTR): integer 
	// END RegisterClipboardFormatW;
	
	proc RegisterClipboardFormat(lpszFormat: PtrSTR): integer 
	// END RegisterClipboardFormat;
	
	proc CountClipboardFormats(): integer 
	// END CountClipboardFormats;
	
	proc EnumClipboardFormats(format: integer): integer 
	// END EnumClipboardFormats;
	
	proc GetClipboardFormatNameA(format: integer; lpszFormatName: PtrSTR; cchMaxCount: integer): integer 
	// END GetClipboardFormatNameA;
	
	proc GetClipboardFormatNameW(format: integer; lpszFormatName: PtrWSTR; cchMaxCount: integer): integer 
	// END GetClipboardFormatNameW;
	
	proc GetClipboardFormatName(format: integer; lpszFormatName: PtrSTR; cchMaxCount: integer): integer 
	// END GetClipboardFormatName;
	
	proc EmptyClipboard(): BOOL 
	// END EmptyClipboard;
	
	proc IsClipboardFormatAvailable(format: integer): BOOL 
	// END IsClipboardFormatAvailable;
	
	proc GetPriorityClipboardFormat(var paFormatPriorityList: integer; cFormats: integer): integer 
	// END GetPriorityClipboardFormat;
	
	proc GetOpenClipboardWindow(): HWND 
	// END GetOpenClipboardWindow;
	
	proc CharToOemA(lpszSrc: PtrSTR; lpszDst: PtrSTR): BOOL 
	// END CharToOemA;
	
	proc CharToOemW(lpszSrc: PtrWSTR; lpszDst: PtrSTR): BOOL 
	// END CharToOemW;
	
	proc CharToOem(lpszSrc: PtrSTR; lpszDst: PtrSTR): BOOL 
	// END CharToOem;
	
	proc OemToCharA(lpszSrc: PtrSTR; lpszDst: PtrSTR): BOOL 
	// END OemToCharA;
	
	proc OemToCharW(lpszSrc: PtrSTR; lpszDst: PtrWSTR): BOOL 
	// END OemToCharW;
	
	proc OemToChar(lpszSrc: PtrSTR; lpszDst: PtrSTR): BOOL 
	// END OemToChar;
	
	proc CharToOemBuffA(lpszSrc: PtrSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END CharToOemBuffA;
	
	proc CharToOemBuffW(lpszSrc: PtrWSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END CharToOemBuffW;
	
	proc CharToOemBuff(lpszSrc: PtrSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END CharToOemBuff;
	
	proc OemToCharBuffA(lpszSrc: PtrSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END OemToCharBuffA;
	
	proc OemToCharBuffW(lpszSrc: PtrSTR; lpszDst: PtrWSTR; cchDstLength: integer): BOOL 
	// END OemToCharBuffW;
	
	proc OemToCharBuff(lpszSrc: PtrSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END OemToCharBuff;
	
	proc CharUpperA(lpsz: PtrSTR): PtrSTR 
	// END CharUpperA;
	
	proc CharUpperW(lpsz: PtrWSTR): PtrWSTR 
	// END CharUpperW;
	
	proc CharUpper(lpsz: PtrSTR): PtrSTR 
	// END CharUpper;
	
	proc CharUpperBuffA(lpsz: PtrSTR; cchLength: integer): integer 
	// END CharUpperBuffA;
	
	proc CharUpperBuffW(lpsz: PtrWSTR; cchLength: integer): integer 
	// END CharUpperBuffW;
	
	proc CharUpperBuff(lpsz: PtrSTR; cchLength: integer): integer 
	// END CharUpperBuff;
	
	proc CharLowerA(lpsz: PtrSTR): PtrSTR 
	// END CharLowerA;
	
	proc CharLowerW(lpsz: PtrWSTR): PtrWSTR 
	// END CharLowerW;
	
	proc CharLower(lpsz: PtrSTR): PtrSTR 
	// END CharLower;
	
	proc CharLowerBuffA(lpsz: PtrSTR; cchLength: integer): integer 
	// END CharLowerBuffA;
	
	proc CharLowerBuffW(lpsz: PtrWSTR; cchLength: integer): integer 
	// END CharLowerBuffW;
	
	proc CharLowerBuff(lpsz: PtrSTR; cchLength: integer): integer 
	// END CharLowerBuff;
	
	proc CharNextA(lpsz: PtrSTR): PtrSTR 
	// END CharNextA;
	
	proc CharNextW(lpsz: PtrWSTR): PtrWSTR 
	// END CharNextW;
	
	proc CharNext(lpsz: PtrSTR): PtrSTR 
	// END CharNext;
	
	proc CharPrevA(lpszStart: PtrSTR; lpszCurrent: PtrSTR): PtrSTR 
	// END CharPrevA;
	
	proc CharPrevW(lpszStart: PtrWSTR; lpszCurrent: PtrWSTR): PtrWSTR 
	// END CharPrevW;
	
	proc CharPrev(lpszStart: PtrSTR; lpszCurrent: PtrSTR): PtrSTR 
	// END CharPrev;
	
	proc CharNextExA(CodePage: shortint; lpCurrentChar: PtrSTR; dwFlags: set): PtrSTR 
	// END CharNextExA;
	
	proc CharPrevExA(CodePage: shortint; lpStart: PtrSTR; lpCurrentChar: PtrSTR; dwFlags: set): PtrSTR 
	// END CharPrevExA;
	
	proc AnsiToOem(lpszSrc: PtrSTR; lpszDst: PtrSTR): BOOL 
	// END AnsiToOem;
	
	proc OemToAnsi(lpszSrc: PtrSTR; lpszDst: PtrSTR): BOOL 
	// END OemToAnsi;
	
	proc AnsiToOemBuff(lpszSrc: PtrSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END AnsiToOemBuff;
	
	proc OemToAnsiBuff(lpszSrc: PtrSTR; lpszDst: PtrSTR; cchDstLength: integer): BOOL 
	// END OemToAnsiBuff;
	
	proc AnsiUpper(lpsz: PtrSTR): PtrSTR 
	// END AnsiUpper;
	
	proc AnsiUpperBuff(lpsz: PtrSTR; cchLength: integer): integer 
	// END AnsiUpperBuff;
	
	proc AnsiLower(lpsz: PtrSTR): PtrSTR 
	// END AnsiLower;
	
	proc AnsiLowerBuff(lpsz: PtrSTR; cchLength: integer): integer 
	// END AnsiLowerBuff;
	
	proc AnsiNext(lpsz: PtrSTR): PtrSTR 
	// END AnsiNext;
	
	proc AnsiPrev(lpszStart: PtrSTR; lpszCurrent: PtrSTR): PtrSTR 
	// END AnsiPrev;
	
	proc IsCharAlphaA(ch: char): BOOL 
	// END IsCharAlphaA;
	
	proc IsCharAlphaW(ch: wchar): BOOL 
	// END IsCharAlphaW;
	
	proc IsCharAlpha(ch: char): BOOL 
	// END IsCharAlpha;
	
	proc IsCharAlphaNumericA(ch: char): BOOL 
	// END IsCharAlphaNumericA;
	
	proc IsCharAlphaNumericW(ch: wchar): BOOL 
	// END IsCharAlphaNumericW;
	
	proc IsCharAlphaNumeric(ch: char): BOOL 
	// END IsCharAlphaNumeric;
	
	proc IsCharUpperA(ch: char): BOOL 
	// END IsCharUpperA;
	
	proc IsCharUpperW(ch: wchar): BOOL 
	// END IsCharUpperW;
	
	proc IsCharUpper(ch: char): BOOL 
	// END IsCharUpper;
	
	proc IsCharLowerA(ch: char): BOOL 
	// END IsCharLowerA;
	
	proc IsCharLowerW(ch: wchar): BOOL 
	// END IsCharLowerW;
	
	proc IsCharLower(ch: char): BOOL 
	// END IsCharLower;
	
	proc SetFocus(hWnd: HWND): HWND 
	// END SetFocus;
	
	proc GetActiveWindow(): HWND 
	// END GetActiveWindow;
	
	proc GetFocus(): HWND 
	// END GetFocus;
	
	proc GetKBCodePage(): integer 
	// END GetKBCodePage;
	
	proc GetKeyState(nVirtKey: integer): shortint 
	// END GetKeyState;
	
	proc GetAsyncKeyState(vKey: integer): shortint 
	// END GetAsyncKeyState;
	
	proc GetKeyboardState(var lpKeyState: char): BOOL 
	// END GetKeyboardState;
	
	proc SetKeyboardState(var lpKeyState: char): BOOL 
	// END SetKeyboardState;
	
	proc GetKeyNameTextA(lParam: integer; lpString: PtrSTR; nSize: integer): integer 
	// END GetKeyNameTextA;
	
	proc GetKeyNameTextW(lParam: integer; lpString: PtrWSTR; nSize: integer): integer 
	// END GetKeyNameTextW;
	
	proc GetKeyNameText(lParam: integer; lpString: PtrSTR; nSize: integer): integer 
	// END GetKeyNameText;
	
	proc GetKeyboardType(nTypeFlag: integer): integer 
	// END GetKeyboardType;
	
	proc ToAscii(uVirtKey: integer; uScanCode: integer; var lpKeyState: char; var lpChar: shortint; uFlags: set): integer 
	// END ToAscii;
	
	proc ToAsciiEx(uVirtKey: integer; uScanCode: integer; var lpKeyState: char; var lpChar: shortint; uFlags: set; dwhkl: HKL): integer 
	// END ToAsciiEx;
	
	proc ToUnicode(wVirtKey: integer; wScanCode: integer; var lpKeyState: char; pwszBuff: PtrWSTR; cchBuff: integer; wFlags: integer): integer 
	// END ToUnicode;
	
	proc OemKeyScan(wOemChar: shortint): integer 
	// END OemKeyScan;
	
	proc VkKeyScanA(ch: char): shortint 
	// END VkKeyScanA;
	
	proc VkKeyScanW(ch: wchar): shortint 
	// END VkKeyScanW;
	
	proc VkKeyScan(ch: char): shortint 
	// END VkKeyScan;
	
	proc VkKeyScanExA(ch: char; dwhkl: HKL): shortint 
	// END VkKeyScanExA;
	
	proc VkKeyScanExW(ch: wchar; dwhkl: HKL): shortint 
	// END VkKeyScanExW;
	
	proc VkKeyScanEx(ch: char; dwhkl: HKL): shortint 
	// END VkKeyScanEx;
	
	proc keybd_event(bVk: char; bScan: char; dwFlags: set; dwExtraInfo: integer) 
	// END keybd_event;
	
	proc mouse_event(dwFlags: set; dx: integer; dy: integer; cButtons: integer; dwExtraInfo: integer) 
	// END mouse_event;
	
	proc MapVirtualKeyA(uCode: integer; uMapType: integer): integer 
	// END MapVirtualKeyA;
	
	proc MapVirtualKeyW(uCode: integer; uMapType: integer): integer 
	// END MapVirtualKeyW;
	
	proc MapVirtualKey(uCode: integer; uMapType: integer): integer 
	// END MapVirtualKey;
	
	proc MapVirtualKeyExA(uCode: integer; uMapType: integer; dwhkl: HKL): integer 
	// END MapVirtualKeyExA;
	
	proc MapVirtualKeyExW(uCode: integer; uMapType: integer; dwhkl: HKL): integer 
	// END MapVirtualKeyExW;
	
	proc MapVirtualKeyEx(uCode: integer; uMapType: integer; dwhkl: HKL): integer 
	// END MapVirtualKeyEx;
	
	proc GetInputState(): BOOL 
	// END GetInputState;
	
	proc GetQueueStatus(flags: set): integer 
	// END GetQueueStatus;
	
	proc GetCapture(): HWND 
	// END GetCapture;
	
	proc SetCapture(hWnd: HWND): HWND 
	// END SetCapture;
	
	proc ReleaseCapture(): BOOL 
	// END ReleaseCapture;
	
	proc MsgWaitForMultipleObjects(nCount: integer; var pHandles: HANDLE; fWaitAll: BOOL; dwMilliseconds: integer; dwWakeMask: integer): integer 
	// END MsgWaitForMultipleObjects;
	
	proc MsgWaitForMultipleObjectsEx(nCount: integer; var pHandles: HANDLE; dwMilliseconds: integer; dwWakeMask: integer; dwFlags: set): integer 
	// END MsgWaitForMultipleObjectsEx;
	
	proc SetTimer(hWnd: HWND; nIDEvent: integer; uElapse: integer; lpTimerFunc: TIMERPROC): integer 
	// END SetTimer;
	
	proc KillTimer(hWnd: HWND; uIDEvent: integer): BOOL 
	// END KillTimer;
	
	proc IsWindowUnicode(hWnd: HWND): BOOL 
	// END IsWindowUnicode;
	
	proc EnableWindow(hWnd: HWND; bEnable: BOOL): BOOL 
	// END EnableWindow;
	
	proc IsWindowEnabled(hWnd: HWND): BOOL 
	// END IsWindowEnabled;
	
	proc LoadAcceleratorsA(hInstance: HINSTANCE; lpTableName: PtrSTR): HACCEL 
	// END LoadAcceleratorsA;
	
	proc LoadAcceleratorsW(hInstance: HINSTANCE; lpTableName: PtrWSTR): HACCEL 
	// END LoadAcceleratorsW;
	
	proc LoadAccelerators(hInstance: HINSTANCE; lpTableName: PtrSTR): HACCEL 
	// END LoadAccelerators;
	
	proc CreateAcceleratorTableA(var p0: ACCEL; p1: integer): HACCEL 
	// END CreateAcceleratorTableA;
	
	proc CreateAcceleratorTableW(var p0: ACCEL; p1: integer): HACCEL 
	// END CreateAcceleratorTableW;
	
	proc CreateAcceleratorTable(var p0: ACCEL; p1: integer): HACCEL 
	// END CreateAcceleratorTable;
	
	proc DestroyAcceleratorTable(hAccel: HACCEL): BOOL 
	// END DestroyAcceleratorTable;
	
	proc CopyAcceleratorTableA(hAccelSrc: HACCEL; var lpAccelDst: ACCEL; cAccelEntries: integer): integer 
	// END CopyAcceleratorTableA;
	
	proc CopyAcceleratorTableW(hAccelSrc: HACCEL; var lpAccelDst: ACCEL; cAccelEntries: integer): integer 
	// END CopyAcceleratorTableW;
	
	proc CopyAcceleratorTable(hAccelSrc: HACCEL; var lpAccelDst: ACCEL; cAccelEntries: integer): integer 
	// END CopyAcceleratorTable;
	
	proc TranslateAcceleratorA(hWnd: HWND; hAccTable: HACCEL; var lpMsg: MSG): integer 
	// END TranslateAcceleratorA;
	
	proc TranslateAcceleratorW(hWnd: HWND; hAccTable: HACCEL; var lpMsg: MSG): integer 
	// END TranslateAcceleratorW;
	
	proc TranslateAccelerator(hWnd: HWND; hAccTable: HACCEL; var lpMsg: MSG): integer 
	// END TranslateAccelerator;
	
	proc GetSystemMetrics(nIndex: integer): integer 
	// END GetSystemMetrics;
	
	proc LoadMenuA(hInstance: HINSTANCE; lpMenuName: PtrSTR): HMENU 
	// END LoadMenuA;
	
	proc LoadMenuW(hInstance: HINSTANCE; lpMenuName: PtrWSTR): HMENU 
	// END LoadMenuW;
	
	proc LoadMenu(hInstance: HINSTANCE; lpMenuName: PtrSTR): HMENU 
	// END LoadMenu;
	
	proc LoadMenuIndirectA(lpMenuTemplate: PtrMENUTEMPLATEA): HMENU 
	// END LoadMenuIndirectA;
	
	proc LoadMenuIndirectW(lpMenuTemplate: PtrMENUTEMPLATEW): HMENU 
	// END LoadMenuIndirectW;
	
	proc LoadMenuIndirect(lpMenuTemplate: PtrMENUTEMPLATEA): HMENU 
	// END LoadMenuIndirect;
	
	proc GetMenu(hWnd: HWND): HMENU 
	// END GetMenu;
	
	proc SetMenu(hWnd: HWND; hMenu: HMENU): BOOL 
	// END SetMenu;
	
	proc ChangeMenuA(hMenu: HMENU; cmd: integer; lpszNewItem: PtrSTR; cmdInsert: integer; flags: set): BOOL 
	// END ChangeMenuA;
	
	proc ChangeMenuW(hMenu: HMENU; cmd: integer; lpszNewItem: PtrWSTR; cmdInsert: integer; flags: set): BOOL 
	// END ChangeMenuW;
	
	proc ChangeMenu(hMenu: HMENU; cmd: integer; lpszNewItem: PtrSTR; cmdInsert: integer; flags: set): BOOL 
	// END ChangeMenu;
	
	proc HiliteMenuItem(hWnd: HWND; hMenu: HMENU; uIDHiliteItem: integer; uHilite: integer): BOOL 
	// END HiliteMenuItem;
	
	proc GetMenuStringA(hMenu: HMENU; uIDItem: integer; lpString: PtrSTR; nMaxCount: integer; uFlag: set): integer 
	// END GetMenuStringA;
	
	proc GetMenuStringW(hMenu: HMENU; uIDItem: integer; lpString: PtrWSTR; nMaxCount: integer; uFlag: set): integer 
	// END GetMenuStringW;
	
	proc GetMenuString(hMenu: HMENU; uIDItem: integer; lpString: PtrSTR; nMaxCount: integer; uFlag: set): integer 
	// END GetMenuString;
	
	proc GetMenuState(hMenu: HMENU; uId: integer; uFlags: set): integer 
	// END GetMenuState;
	
	proc DrawMenuBar(hWnd: HWND): BOOL 
	// END DrawMenuBar;
	
	proc GetSystemMenu(hWnd: HWND; bRevert: BOOL): HMENU 
	// END GetSystemMenu;
	
	proc CreateMenu(): HMENU 
	// END CreateMenu;
	
	proc CreatePopupMenu(): HMENU 
	// END CreatePopupMenu;
	
	proc DestroyMenu(hMenu: HMENU): BOOL 
	// END DestroyMenu;
	
	proc CheckMenuItem(hMenu: HMENU; uIDCheckItem: integer; uCheck: set): integer 
	// END CheckMenuItem;
	
	proc EnableMenuItem(hMenu: HMENU; uIDEnableItem: integer; uEnable: set): BOOL 
	// END EnableMenuItem;
	
	proc GetSubMenu(hMenu: HMENU; nPos: integer): HMENU 
	// END GetSubMenu;
	
	proc GetMenuItemID(hMenu: HMENU; nPos: integer): integer 
	// END GetMenuItemID;
	
	proc GetMenuItemCount(hMenu: HMENU): integer 
	// END GetMenuItemCount;
	
	proc InsertMenuA(hMenu: HMENU; uPosition: integer; uFlags: set; uIDNewItem: integer; lpNewItem: PtrSTR): BOOL 
	// END InsertMenuA;
	
	proc InsertMenuW(hMenu: HMENU; uPosition: integer; uFlags: set; uIDNewItem: integer; lpNewItem: PtrWSTR): BOOL 
	// END InsertMenuW;
	
	proc InsertMenu(hMenu: HMENU; uPosition: integer; uFlags: set; uIDNewItem: integer; lpNewItem: PtrSTR): BOOL 
	// END InsertMenu;
	
	proc AppendMenuA(hMenu: HMENU; uFlags: set; uIDNewItem: integer; lpNewItem: PtrSTR): BOOL 
	// END AppendMenuA;
	
	proc AppendMenuW(hMenu: HMENU; uFlags: set; uIDNewItem: integer; lpNewItem: PtrWSTR): BOOL 
	// END AppendMenuW;
	
	proc AppendMenu(hMenu: HMENU; uFlags: set; uIDNewItem: integer; lpNewItem: PtrSTR): BOOL 
	// END AppendMenu;
	
	proc ModifyMenuA(hMnu: HMENU; uPosition: integer; uFlags: set; uIDNewItem: integer; lpNewItem: PtrSTR): BOOL 
	// END ModifyMenuA;
	
	proc ModifyMenuW(hMnu: HMENU; uPosition: integer; uFlags: set; uIDNewItem: integer; lpNewItem: PtrWSTR): BOOL 
	// END ModifyMenuW;
	
	proc ModifyMenu(hMnu: HMENU; uPosition: integer; uFlags: set; uIDNewItem: integer; lpNewItem: PtrSTR): BOOL 
	// END ModifyMenu;
	
	proc RemoveMenu(hMenu: HMENU; uPosition: integer; uFlags: set): BOOL 
	// END RemoveMenu;
	
	proc DeleteMenu(hMenu: HMENU; uPosition: integer; uFlags: set): BOOL 
	// END DeleteMenu;
	
	proc SetMenuItemBitmaps(hMenu: HMENU; uPosition: integer; uFlags: set; hBitmapUnchecked: HBITMAP; hBitmapChecked: HBITMAP): BOOL 
	// END SetMenuItemBitmaps;
	
	proc GetMenuCheckMarkDimensions(): integer 
	// END GetMenuCheckMarkDimensions;
	
	proc TrackPopupMenu(hMenu: HMENU; uFlags: set; x: integer; y: integer; nReserved: integer; hWnd: HWND; var prcRect: RECT): BOOL 
	// END TrackPopupMenu;
	
	proc TrackPopupMenuEx(p0: HMENU; p1: integer; p2: integer; p3: integer; p4: HWND; var p5: TPMPARAMS): BOOL 
	// END TrackPopupMenuEx;
	
	proc InsertMenuItemA(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOA): BOOL 
	// END InsertMenuItemA;
	
	proc InsertMenuItemW(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOW): BOOL 
	// END InsertMenuItemW;
	
	proc InsertMenuItem(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOA): BOOL 
	// END InsertMenuItem;
	
	proc GetMenuItemInfoA(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOA): BOOL 
	// END GetMenuItemInfoA;
	
	proc GetMenuItemInfoW(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOW): BOOL 
	// END GetMenuItemInfoW;
	
	proc GetMenuItemInfo(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOA): BOOL 
	// END GetMenuItemInfo;
	
	proc SetMenuItemInfoA(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOA): BOOL 
	// END SetMenuItemInfoA;
	
	proc SetMenuItemInfoW(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOW): BOOL 
	// END SetMenuItemInfoW;
	
	proc SetMenuItemInfo(p0: HMENU; p1: integer; p2: BOOL; var p3: MENUITEMINFOA): BOOL 
	// END SetMenuItemInfo;
	
	proc GetMenuDefaultItem(hMenu: HMENU; fByPos: integer; gmdiFlags: set): integer 
	// END GetMenuDefaultItem;
	
	proc SetMenuDefaultItem(hMenu: HMENU; uItem: integer; fByPos: integer): BOOL 
	// END SetMenuDefaultItem;
	
	proc GetMenuItemRect(hWnd: HWND; hMenu: HMENU; uItem: integer; var lprcItem: RECT): BOOL 
	// END GetMenuItemRect;
	
	proc MenuItemFromPoint(hWnd: HWND; hMenu: HMENU; ptScreen: POINT): integer 
	// END MenuItemFromPoint;
	
	proc DragObject(p0: HWND; p1: HWND; p2: integer; p3: integer; p4: HCURSOR): integer 
	// END DragObject;
	
	proc DragDetect(p0: HWND; p1: POINT): BOOL 
	// END DragDetect;
	
	proc DrawIcon(hDC: HDC; X: integer; Y: integer; hIcon: HICON): BOOL 
	// END DrawIcon;
	
	proc DrawTextA(hDC: HDC; lpString: PtrSTR; nCount: integer; var lpRect: RECT; uFormat: set): integer 
	// END DrawTextA;
	
	proc DrawTextW(hDC: HDC; lpString: PtrWSTR; nCount: integer; var lpRect: RECT; uFormat: set): integer 
	// END DrawTextW;
	
	proc DrawText(hDC: HDC; lpString: PtrSTR; nCount: integer; var lpRect: RECT; uFormat: set): integer 
	// END DrawText;
	
	proc DrawTextExA(p0: HDC; p1: PtrSTR; p2: integer; var p3: RECT; p4: integer; var p5: DRAWTEXTPARAMS): integer 
	// END DrawTextExA;
	
	proc DrawTextExW(p0: HDC; p1: PtrWSTR; p2: integer; var p3: RECT; p4: integer; var p5: DRAWTEXTPARAMS): integer 
	// END DrawTextExW;
	
	proc DrawTextEx(p0: HDC; p1: PtrSTR; p2: integer; var p3: RECT; p4: integer; var p5: DRAWTEXTPARAMS): integer 
	// END DrawTextEx;
	
	proc GrayStringA(hDC: HDC; hBrush: HBRUSH; lpOutputFunc: GRAYSTRINGPROC; lpData: LPARAM; nCount: integer; X: integer; Y: integer; nWidth: integer; nHeight: integer): BOOL 
	// END GrayStringA;
	
	proc GrayStringW(hDC: HDC; hBrush: HBRUSH; lpOutputFunc: GRAYSTRINGPROC; lpData: LPARAM; nCount: integer; X: integer; Y: integer; nWidth: integer; nHeight: integer): BOOL 
	// END GrayStringW;
	
	proc GrayString(hDC: HDC; hBrush: HBRUSH; lpOutputFunc: GRAYSTRINGPROC; lpData: LPARAM; nCount: integer; X: integer; Y: integer; nWidth: integer; nHeight: integer): BOOL 
	// END GrayString;
	
	proc DrawStateA(p0: HDC; p1: HBRUSH; p2: DRAWSTATEPROC; p3: LPARAM; p4: WPARAM; p5: integer; p6: integer; p7: integer; p8: integer; p9: set): BOOL 
	// END DrawStateA;
	
	proc DrawStateW(p0: HDC; p1: HBRUSH; p2: DRAWSTATEPROC; p3: LPARAM; p4: WPARAM; p5: integer; p6: integer; p7: integer; p8: integer; p9: set): BOOL 
	// END DrawStateW;
	
	proc DrawState(p0: HDC; p1: HBRUSH; p2: DRAWSTATEPROC; p3: LPARAM; p4: WPARAM; p5: integer; p6: integer; p7: integer; p8: integer; p9: set): BOOL 
	// END DrawState;
	
	proc TabbedTextOutA(hDC: HDC; X: integer; Y: integer; lpString: PtrSTR; nCount: integer; nTabPositions: integer; var lpnTabStopPositions: integer; nTabOrigin: integer): integer 
	// END TabbedTextOutA;
	
	proc TabbedTextOutW(hDC: HDC; X: integer; Y: integer; lpString: PtrWSTR; nCount: integer; nTabPositions: integer; var lpnTabStopPositions: integer; nTabOrigin: integer): integer 
	// END TabbedTextOutW;
	
	proc TabbedTextOut(hDC: HDC; X: integer; Y: integer; lpString: PtrSTR; nCount: integer; nTabPositions: integer; var lpnTabStopPositions: integer; nTabOrigin: integer): integer 
	// END TabbedTextOut;
	
	proc GetTabbedTextExtentA(hDC: HDC; lpString: PtrSTR; nCount: integer; nTabPositions: integer; var lpnTabStopPositions: integer): integer 
	// END GetTabbedTextExtentA;
	
	proc GetTabbedTextExtentW(hDC: HDC; lpString: PtrWSTR; nCount: integer; nTabPositions: integer; var lpnTabStopPositions: integer): integer 
	// END GetTabbedTextExtentW;
	
	proc GetTabbedTextExtent(hDC: HDC; lpString: PtrSTR; nCount: integer; nTabPositions: integer; var lpnTabStopPositions: integer): integer 
	// END GetTabbedTextExtent;
	
	proc UpdateWindow(hWnd: HWND): BOOL 
	// END UpdateWindow;
	
	proc SetActiveWindow(hWnd: HWND): HWND 
	// END SetActiveWindow;
	
	proc GetForegroundWindow(): HWND 
	// END GetForegroundWindow;
	
	proc PaintDesktop(hdc: HDC): BOOL 
	// END PaintDesktop;
	
	proc SetForegroundWindow(hWnd: HWND): BOOL 
	// END SetForegroundWindow;
	
	proc WindowFromDC(hDC: HDC): HWND 
	// END WindowFromDC;
	
	proc GetDC(hWnd: HWND): HDC 
	// END GetDC;
	
	proc GetDCEx(hWnd: HWND; hrgnClip: HRGN; flags: set): HDC 
	// END GetDCEx;
	
	proc GetWindowDC(hWnd: HWND): HDC 
	// END GetWindowDC;
	
	proc ReleaseDC(hWnd: HWND; hDC: HDC): integer 
	// END ReleaseDC;
	
	proc BeginPaint(hWnd: HWND; var lpPaint: PAINTSTRUCT): HDC 
	// END BeginPaint;
	
	proc EndPaint(hWnd: HWND; var lpPaint: PAINTSTRUCT): BOOL 
	// END EndPaint;
	
	proc GetUpdateRect(hWnd: HWND; var lpRect: RECT; bErase: BOOL): BOOL 
	// END GetUpdateRect;
	
	proc GetUpdateRgn(hWnd: HWND; hRgn: HRGN; bErase: BOOL): integer 
	// END GetUpdateRgn;
	
	proc SetWindowRgn(hWnd: HWND; hRgn: HRGN; bRedraw: BOOL): integer 
	// END SetWindowRgn;
	
	proc GetWindowRgn(hWnd: HWND; hRgn: HRGN): integer 
	// END GetWindowRgn;
	
	proc ExcludeUpdateRgn(hDC: HDC; hWnd: HWND): integer 
	// END ExcludeUpdateRgn;
	
	proc InvalidateRect(hWnd: HWND; var lpRect: RECT; bErase: BOOL): BOOL 
	// END InvalidateRect;
	
	proc ValidateRect(hWnd: HWND; var lpRect: RECT): BOOL 
	// END ValidateRect;
	
	proc InvalidateRgn(hWnd: HWND; hRgn: HRGN; bErase: BOOL): BOOL 
	// END InvalidateRgn;
	
	proc ValidateRgn(hWnd: HWND; hRgn: HRGN): BOOL 
	// END ValidateRgn;
	
	proc RedrawWindow(hWnd: HWND; var lprcUpdate: RECT; hrgnUpdate: HRGN; flags: set): BOOL 
	// END RedrawWindow;
	
	proc LockWindowUpdate(hWndLock: HWND): BOOL 
	// END LockWindowUpdate;
	
	proc ScrollWindow(hWnd: HWND; XAmount: integer; YAmount: integer; var lpRect: RECT; var lpClipRect: RECT): BOOL 
	// END ScrollWindow;
	
	proc ScrollDC(hDC: HDC; dx: integer; dy: integer; var lprcScroll: RECT; var lprcClip: RECT; hrgnUpdate: HRGN; var lprcUpdate: RECT): BOOL 
	// END ScrollDC;
	
	proc ScrollWindowEx(hWnd: HWND; dx: integer; dy: integer; var prcScroll: RECT; var prcClip: RECT; hrgnUpdate: HRGN; var prcUpdate: RECT; flags: set): integer 
	// END ScrollWindowEx;
	
	proc SetScrollPos(hWnd: HWND; nBar: integer; nPos: integer; bRedraw: BOOL): integer 
	// END SetScrollPos;
	
	proc GetScrollPos(hWnd: HWND; nBar: integer): integer 
	// END GetScrollPos;
	
	proc SetScrollRange(hWnd: HWND; nBar: integer; nMinPos: integer; nMaxPos: integer; bRedraw: BOOL): BOOL 
	// END SetScrollRange;
	
	proc GetScrollRange(hWnd: HWND; nBar: integer; var lpMinPos: integer; var lpMaxPos: integer): BOOL 
	// END GetScrollRange;
	
	proc ShowScrollBar(hWnd: HWND; wBar: integer; bShow: BOOL): BOOL 
	// END ShowScrollBar;
	
	proc EnableScrollBar(hWnd: HWND; wSBflags: integer; wArrows: integer): BOOL 
	// END EnableScrollBar;
	
	proc SetPropA(hWnd: HWND; lpString: PtrSTR; hData: HANDLE): BOOL 
	// END SetPropA;
	
	proc SetPropW(hWnd: HWND; lpString: PtrWSTR; hData: HANDLE): BOOL 
	// END SetPropW;
	
	proc SetProp(hWnd: HWND; lpString: PtrSTR; hData: HANDLE): BOOL 
	// END SetProp;
	
	proc GetPropA(hWnd: HWND; lpString: PtrSTR): HANDLE 
	// END GetPropA;
	
	proc GetPropW(hWnd: HWND; lpString: PtrWSTR): HANDLE 
	// END GetPropW;
	
	proc GetProp(hWnd: HWND; lpString: PtrSTR): HANDLE 
	// END GetProp;
	
	proc RemovePropA(hWnd: HWND; lpString: PtrSTR): HANDLE 
	// END RemovePropA;
	
	proc RemovePropW(hWnd: HWND; lpString: PtrWSTR): HANDLE 
	// END RemovePropW;
	
	proc RemoveProp(hWnd: HWND; lpString: PtrSTR): HANDLE 
	// END RemoveProp;
	
	proc EnumPropsExA(hWnd: HWND; lpEnumFunc: ROPENUMPROCEXA; lParam: LPARAM): integer 
	// END EnumPropsExA;
	
	proc EnumPropsExW(hWnd: HWND; lpEnumFunc: ROPENUMPROCEXW; lParam: LPARAM): integer 
	// END EnumPropsExW;
	
	proc EnumPropsEx(hWnd: HWND; lpEnumFunc: ROPENUMPROCEXA; lParam: LPARAM): integer 
	// END EnumPropsEx;
	
	proc EnumPropsA(hWnd: HWND; lpEnumFunc: ROPENUMPROCA): integer 
	// END EnumPropsA;
	
	proc EnumPropsW(hWnd: HWND; lpEnumFunc: ROPENUMPROCW): integer 
	// END EnumPropsW;
	
	proc EnumProps(hWnd: HWND; lpEnumFunc: ROPENUMPROCA): integer 
	// END EnumProps;
	
	proc SetWindowTextA(hWnd: HWND; lpString: PtrSTR): BOOL 
	// END SetWindowTextA;
	
	proc SetWindowTextW(hWnd: HWND; lpString: PtrWSTR): BOOL 
	// END SetWindowTextW;
	
	proc SetWindowText(hWnd: HWND; lpString: PtrSTR): BOOL 
	// END SetWindowText;
	
	proc GetWindowTextA(hWnd: HWND; lpString: PtrSTR; nMaxCount: integer): integer 
	// END GetWindowTextA;
	
	proc GetWindowTextW(hWnd: HWND; lpString: PtrWSTR; nMaxCount: integer): integer 
	// END GetWindowTextW;
	
	proc GetWindowText(hWnd: HWND; lpString: PtrSTR; nMaxCount: integer): integer 
	// END GetWindowText;
	
	proc GetWindowTextLengthA(hWnd: HWND): integer 
	// END GetWindowTextLengthA;
	
	proc GetWindowTextLengthW(hWnd: HWND): integer 
	// END GetWindowTextLengthW;
	
	proc GetWindowTextLength(hWnd: HWND): integer 
	// END GetWindowTextLength;
	
	proc GetClientRect(hWnd: HWND; var lpRect: RECT): BOOL 
	// END GetClientRect;
	
	proc GetWindowRect(hWnd: HWND; var lpRect: RECT): BOOL 
	// END GetWindowRect;
	
	proc AdjustWindowRect(var lpRect: RECT; dwStyle: set; bMenu: BOOL): BOOL 
	// END AdjustWindowRect;
	
	proc AdjustWindowRectEx(var lpRect: RECT; dwStyle: set; bMenu: BOOL; dwExStyle: set): BOOL 
	// END AdjustWindowRectEx;
	
	proc SetWindowContextHelpId(p0: HWND; p1: integer): BOOL 
	// END SetWindowContextHelpId;
	
	proc GetWindowContextHelpId(p0: HWND): integer 
	// END GetWindowContextHelpId;
	
	proc SetMenuContextHelpId(p0: HMENU; p1: integer): BOOL 
	// END SetMenuContextHelpId;
	
	proc GetMenuContextHelpId(p0: HMENU): integer 
	// END GetMenuContextHelpId;
	
	proc MessageBoxA(hWnd: HWND; lpText: PtrSTR; lpCaption: PtrSTR; uType: set): integer 
	// END MessageBoxA;
	
	proc MessageBoxW(hWnd: HWND; lpText: PtrWSTR; lpCaption: PtrWSTR; uType: set): integer 
	// END MessageBoxW;
	
	proc MessageBox(hWnd: HWND; lpText: PtrSTR; lpCaption: PtrSTR; uType: set): integer 
	// END MessageBox;
	
	proc MessageBoxExA(hWnd: HWND; lpText: PtrSTR; lpCaption: PtrSTR; uType: set; wLanguageId: shortint): integer 
	// END MessageBoxExA;
	
	proc MessageBoxExW(hWnd: HWND; lpText: PtrWSTR; lpCaption: PtrWSTR; uType: set; wLanguageId: shortint): integer 
	// END MessageBoxExW;
	
	proc MessageBoxEx(hWnd: HWND; lpText: PtrSTR; lpCaption: PtrSTR; uType: set; wLanguageId: shortint): integer 
	// END MessageBoxEx;
	
	proc MessageBoxIndirectA(var p0: MSGBOXPARAMSA): integer 
	// END MessageBoxIndirectA;
	
	proc MessageBoxIndirectW(var p0: MSGBOXPARAMSW): integer 
	// END MessageBoxIndirectW;
	
	proc MessageBoxIndirect(var p0: MSGBOXPARAMSA): integer 
	// END MessageBoxIndirect;
	
	proc MessageBeep(uType: set): BOOL 
	// END MessageBeep;
	
	proc ShowCursor(bShow: BOOL): integer 
	// END ShowCursor;
	
	proc SetCursorPos(X: integer; Y: integer): BOOL 
	// END SetCursorPos;
	
	proc SetCursor(hCursor: HCURSOR): HCURSOR 
	// END SetCursor;
	
	proc GetCursorPos(var lpPoint: POINT): BOOL 
	// END GetCursorPos;
	
	proc ClipCursor(var lpRect: RECT): BOOL 
	// END ClipCursor;
	
	proc GetClipCursor(var lpRect: RECT): BOOL 
	// END GetClipCursor;
	
	proc GetCursor(): HCURSOR 
	// END GetCursor;
	
	proc CreateCaret(hWnd: HWND; hBitmap: HBITMAP; nWidth: integer; nHeight: integer): BOOL 
	// END CreateCaret;
	
	proc GetCaretBlinkTime(): integer 
	// END GetCaretBlinkTime;
	
	proc SetCaretBlinkTime(uMSeconds: integer): BOOL 
	// END SetCaretBlinkTime;
	
	proc DestroyCaret(): BOOL 
	// END DestroyCaret;
	
	proc HideCaret(hWnd: HWND): BOOL 
	// END HideCaret;
	
	proc ShowCaret(hWnd: HWND): BOOL 
	// END ShowCaret;
	
	proc SetCaretPos(X: integer; Y: integer): BOOL 
	// END SetCaretPos;
	
	proc GetCaretPos(var lpPoint: POINT): BOOL 
	// END GetCaretPos;
	
	proc ClientToScreen(hWnd: HWND; var lpPoint: POINT): BOOL 
	// END ClientToScreen;
	
	proc ScreenToClient(hWnd: HWND; var lpPoint: POINT): BOOL 
	// END ScreenToClient;
	
	proc MapWindowPoints(hWndFrom: HWND; hWndTo: HWND; var lpPoints: POINT; cPoints: integer): integer 
	// END MapWindowPoints;
	
	proc WindowFromPoint(Point: POINT): HWND 
	// END WindowFromPoint;
	
	proc ChildWindowFromPoint(hWndParent: HWND; Point: POINT): HWND 
	// END ChildWindowFromPoint;
	
	proc ChildWindowFromPointEx(p0: HWND; p1: POINT; p2: set): HWND 
	// END ChildWindowFromPointEx;
	
	proc GetSysColor(nIndex: integer): integer 
	// END GetSysColor;
	
	proc GetSysColorBrush(nIndex: integer): HBRUSH 
	// END GetSysColorBrush;
	
	proc SetSysColors(cElements: integer; var lpaElements: integer; var lpaRgbValues: COLORREF): BOOL 
	// END SetSysColors;
	
	proc DrawFocusRect(hDC: HDC; var lprc: RECT): BOOL 
	// END DrawFocusRect;
	
	proc FillRect(hDC: HDC; var lprc: RECT; hbr: HBRUSH): integer 
	// END FillRect;
	
	proc FrameRect(hDC: HDC; var lprc: RECT; hbr: HBRUSH): integer 
	// END FrameRect;
	
	proc InvertRect(hDC: HDC; var lprc: RECT): BOOL 
	// END InvertRect;
	
	proc SetRect(var lprc: RECT; xLeft: integer; yTop: integer; xRight: integer; yBottom: integer): BOOL 
	// END SetRect;
	
	proc SetRectEmpty(var lprc: RECT): BOOL 
	// END SetRectEmpty;
	
	proc CopyRect(var lprcDst: RECT; var lprcSrc: RECT): BOOL 
	// END CopyRect;
	
	proc InflateRect(var lprc: RECT; dx: integer; dy: integer): BOOL 
	// END InflateRect;
	
	proc IntersectRect(var lprcDst: RECT; var lprcSrc1: RECT; var lprcSrc2: RECT): BOOL 
	// END IntersectRect;
	
	proc UnionRect(var lprcDst: RECT; var lprcSrc1: RECT; var lprcSrc2: RECT): BOOL 
	// END UnionRect;
	
	proc SubtractRect(var lprcDst: RECT; var lprcSrc1: RECT; var lprcSrc2: RECT): BOOL 
	// END SubtractRect;
	
	proc OffsetRect(var lprc: RECT; dx: integer; dy: integer): BOOL 
	// END OffsetRect;
	
	proc IsRectEmpty(var lprc: RECT): BOOL 
	// END IsRectEmpty;
	
	proc EqualRect(var lprc1: RECT; var lprc2: RECT): BOOL 
	// END EqualRect;
	
	proc PtInRect(var lprc: RECT; pt: POINT): BOOL 
	// END PtInRect;
	
	proc GetWindowWord(hWnd: HWND; nIndex: integer): shortint 
	// END GetWindowWord;
	
	proc SetWindowWord(hWnd: HWND; nIndex: integer; wNewWord: shortint): shortint 
	// END SetWindowWord;
	
	proc GetWindowLongA(hWnd: HWND; nIndex: integer): integer 
	// END GetWindowLongA;
	
	proc GetWindowLongW(hWnd: HWND; nIndex: integer): integer 
	// END GetWindowLongW;
	
	proc GetWindowLong(hWnd: HWND; nIndex: integer): integer 
	// END GetWindowLong;
	
	proc SetWindowLongA(hWnd: HWND; nIndex: integer; dwNewLong: integer): integer 
	// END SetWindowLongA;
	
	proc SetWindowLongW(hWnd: HWND; nIndex: integer; dwNewLong: integer): integer 
	// END SetWindowLongW;
	
	proc SetWindowLong(hWnd: HWND; nIndex: integer; dwNewLong: integer): integer 
	// END SetWindowLong;
	
	proc GetClassWord(hWnd: HWND; nIndex: integer): shortint 
	// END GetClassWord;
	
	proc SetClassWord(hWnd: HWND; nIndex: integer; wNewWord: shortint): shortint 
	// END SetClassWord;
	
	proc GetClassLongA(hWnd: HWND; nIndex: integer): integer 
	// END GetClassLongA;
	
	proc GetClassLongW(hWnd: HWND; nIndex: integer): integer 
	// END GetClassLongW;
	
	proc GetClassLong(hWnd: HWND; nIndex: integer): integer 
	// END GetClassLong;
	
	proc SetClassLongA(hWnd: HWND; nIndex: integer; dwNewLong: integer): integer 
	// END SetClassLongA;
	
	proc SetClassLongW(hWnd: HWND; nIndex: integer; dwNewLong: integer): integer 
	// END SetClassLongW;
	
	proc SetClassLong(hWnd: HWND; nIndex: integer; dwNewLong: integer): integer 
	// END SetClassLong;
	
	proc GetDesktopWindow(): HWND 
	// END GetDesktopWindow;
	
	proc GetParent(hWnd: HWND): HWND 
	// END GetParent;
	
	proc SetParent(hWndChild: HWND; hWndNewParent: HWND): HWND 
	// END SetParent;
	
	proc EnumChildWindows(hWndParent: HWND; lpEnumFunc: WNDENUMPROC; lParam: LPARAM): BOOL 
	// END EnumChildWindows;
	
	proc FindWindowA(lpClassName: PtrSTR; lpWindowName: PtrSTR): HWND 
	// END FindWindowA;
	
	proc FindWindowW(lpClassName: PtrWSTR; lpWindowName: PtrWSTR): HWND 
	// END FindWindowW;
	
	proc FindWindow(lpClassName: PtrSTR; lpWindowName: PtrSTR): HWND 
	// END FindWindow;
	
	proc FindWindowExA(p0: HWND; p1: HWND; p2: PtrSTR; p3: PtrSTR): HWND 
	// END FindWindowExA;
	
	proc FindWindowExW(p0: HWND; p1: HWND; p2: PtrWSTR; p3: PtrWSTR): HWND 
	// END FindWindowExW;
	
	proc FindWindowEx(p0: HWND; p1: HWND; p2: PtrSTR; p3: PtrSTR): HWND 
	// END FindWindowEx;
	
	proc EnumWindows(lpEnumFunc: WNDENUMPROC; lParam: LPARAM): BOOL 
	// END EnumWindows;
	
	proc EnumThreadWindows(dwThreadId: integer; lpfn: WNDENUMPROC; lParam: LPARAM): BOOL 
	// END EnumThreadWindows;
	
	proc GetClassNameA(hWnd: HWND; lpClassName: PtrSTR; nMaxCount: integer): integer 
	// END GetClassNameA;
	
	proc GetClassNameW(hWnd: HWND; lpClassName: PtrWSTR; nMaxCount: integer): integer 
	// END GetClassNameW;
	
	proc GetClassName(hWnd: HWND; lpClassName: PtrSTR; nMaxCount: integer): integer 
	// END GetClassName;
	
	proc GetTopWindow(hWnd: HWND): HWND 
	// END GetTopWindow;
	
	proc GetWindowThreadProcessId(hWnd: HWND; var lpdwProcessId: integer): integer 
	// END GetWindowThreadProcessId;
	
	proc GetLastActivePopup(hWnd: HWND): HWND 
	// END GetLastActivePopup;
	
	proc GetWindow(hWnd: HWND; uCmd: integer): HWND 
	// END GetWindow;
	
	proc SetWindowsHookA(nFilterType: integer; pfnFilterProc: HOOKPROC): HOOKPROC 
	// END SetWindowsHookA;
	
	proc SetWindowsHookW(nFilterType: integer; pfnFilterProc: HOOKPROC): HOOKPROC 
	// END SetWindowsHookW;
	
	proc SetWindowsHook(nFilterType: integer; pfnFilterProc: HOOKPROC): HOOKPROC 
	// END SetWindowsHook;
	
	proc UnhookWindowsHook(nCode: integer; pfnFilterProc: HOOKPROC): BOOL 
	// END UnhookWindowsHook;
	
	proc SetWindowsHookExA(idHook: integer; lpfn: HOOKPROC; hmod: HINSTANCE; dwThreadId: integer): HHOOK 
	// END SetWindowsHookExA;
	
	proc SetWindowsHookExW(idHook: integer; lpfn: HOOKPROC; hmod: HINSTANCE; dwThreadId: integer): HHOOK 
	// END SetWindowsHookExW;
	
	proc SetWindowsHookEx(idHook: integer; lpfn: HOOKPROC; hmod: HINSTANCE; dwThreadId: integer): HHOOK 
	// END SetWindowsHookEx;
	
	proc UnhookWindowsHookEx(hhk: HHOOK): BOOL 
	// END UnhookWindowsHookEx;
	
	proc CallNextHookEx(hhk: HHOOK; nCode: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END CallNextHookEx;
	
	proc CheckMenuRadioItem(p0: HMENU; p1: integer; p2: integer; p3: integer; p4: integer): BOOL 
	// END CheckMenuRadioItem;
	
	proc LoadBitmapA(hInstance: HINSTANCE; lpBitmapName: PtrSTR): HBITMAP 
	// END LoadBitmapA;
	
	proc LoadBitmapW(hInstance: HINSTANCE; lpBitmapName: PtrWSTR): HBITMAP 
	// END LoadBitmapW;
	
	proc LoadBitmap(hInstance: HINSTANCE; lpBitmapName: PtrSTR): HBITMAP 
	// END LoadBitmap;
	
	proc LoadCursorA(hInstance: HINSTANCE; lpCursorName: PtrSTR): HCURSOR 
	// END LoadCursorA;
	
	proc LoadCursorW(hInstance: HINSTANCE; lpCursorName: PtrWSTR): HCURSOR 
	// END LoadCursorW;
	
	proc LoadCursor(hInstance: HINSTANCE; lpCursorName: PtrSTR): HCURSOR 
	// END LoadCursor;
	
	proc LoadCursorFromFileA(lpFileName: PtrSTR): HCURSOR 
	// END LoadCursorFromFileA;
	
	proc LoadCursorFromFileW(lpFileName: PtrWSTR): HCURSOR 
	// END LoadCursorFromFileW;
	
	proc LoadCursorFromFile(lpFileName: PtrSTR): HCURSOR 
	// END LoadCursorFromFile;
	
	proc CreateCursor(hInst: HINSTANCE; xHotSpot: integer; yHotSpot: integer; nWidth: integer; nHeight: integer; pvANDPlane: PtrVoid; pvXORPlane: PtrVoid): HCURSOR 
	// END CreateCursor;
	
	proc DestroyCursor(hCursor: HCURSOR): BOOL 
	// END DestroyCursor;
	
	proc SetSystemCursor(hcur: HCURSOR; id: integer): BOOL 
	// END SetSystemCursor;
	
	proc LoadIconA(hInstance: HINSTANCE; lpIconName: PtrSTR): HICON 
	// END LoadIconA;
	
	proc LoadIconW(hInstance: HINSTANCE; lpIconName: PtrWSTR): HICON 
	// END LoadIconW;
	
	proc LoadIcon(hInstance: HINSTANCE; lpIconName: PtrSTR): HICON 
	// END LoadIcon;
	
	proc CreateIcon(hInstance: HINSTANCE; nWidth: integer; nHeight: integer; cPlanes: char; cBitsPixel: char; var lpbANDbits: char; var lpbXORbits: char): HICON 
	// END CreateIcon;
	
	proc DestroyIcon(hIcon: HICON): BOOL 
	// END DestroyIcon;
	
	proc LookupIconIdFromDirectory(var presbits: char; fIcon: BOOL): integer 
	// END LookupIconIdFromDirectory;
	
	proc LookupIconIdFromDirectoryEx(var presbits: char; fIcon: BOOL; cxDesired: integer; cyDesired: integer; Flags: set): integer 
	// END LookupIconIdFromDirectoryEx;
	
	proc CreateIconFromResource(var presbits: char; dwResSize: integer; fIcon: BOOL; dwVer: integer): HICON 
	// END CreateIconFromResource;
	
	proc CreateIconFromResourceEx(var presbits: char; dwResSize: integer; fIcon: BOOL; dwVer: integer; cxDesired: integer; cyDesired: integer; Flags: set): HICON 
	// END CreateIconFromResourceEx;
	
	proc LoadImageA(p0: HINSTANCE; p1: PtrSTR; p2: integer; p3: integer; p4: integer; p5: integer): HANDLE 
	// END LoadImageA;
	
	proc LoadImageW(p0: HINSTANCE; p1: PtrWSTR; p2: integer; p3: integer; p4: integer; p5: integer): HANDLE 
	// END LoadImageW;
	
	proc LoadImage(p0: HINSTANCE; p1: PtrSTR; p2: integer; p3: integer; p4: integer; p5: integer): HANDLE 
	// END LoadImage;
	
	proc CopyImage(p0: HANDLE; p1: integer; p2: integer; p3: integer; p4: integer): HANDLE 
	// END CopyImage;
	
	proc DrawIconEx(hdc: HDC; xLeft: integer; yTop: integer; hIcon: HICON; cxWidth: integer; cyWidth: integer; istepIfAniCur: integer; hbrFlickerFreeDraw: HBRUSH; diFlags: set): BOOL 
	// END DrawIconEx;
	
	proc CreateIconIndirect(var piconinfo: ICONINFO): HICON 
	// END CreateIconIndirect;
	
	proc CopyIcon(hIcon: HICON): HICON 
	// END CopyIcon;
	
	proc GetIconInfo(hIcon: HICON; var piconinfo: ICONINFO): BOOL 
	// END GetIconInfo;
	
	proc LoadStringA(hInstance: HINSTANCE; uID: integer; lpBuffer: PtrSTR; nBufferMax: integer): integer 
	// END LoadStringA;
	
	proc LoadStringW(hInstance: HINSTANCE; uID: integer; lpBuffer: PtrWSTR; nBufferMax: integer): integer 
	// END LoadStringW;
	
	proc LoadString(hInstance: HINSTANCE; uID: integer; lpBuffer: PtrSTR; nBufferMax: integer): integer 
	// END LoadString;
	
	proc IsDialogMessageA(hDlg: HWND; var lpMsg: MSG): BOOL 
	// END IsDialogMessageA;
	
	proc IsDialogMessageW(hDlg: HWND; var lpMsg: MSG): BOOL 
	// END IsDialogMessageW;
	
	proc IsDialogMessage(hDlg: HWND; var lpMsg: MSG): BOOL 
	// END IsDialogMessage;
	
	proc MapDialogRect(hDlg: HWND; var lpRect: RECT): BOOL 
	// END MapDialogRect;
	
	proc DlgDirListA(hDlg: HWND; lpPathSpec: PtrSTR; nIDListBox: integer; nIDStaticPath: integer; uFileType: set): integer 
	// END DlgDirListA;
	
	proc DlgDirListW(hDlg: HWND; lpPathSpec: PtrWSTR; nIDListBox: integer; nIDStaticPath: integer; uFileType: set): integer 
	// END DlgDirListW;
	
	proc DlgDirList(hDlg: HWND; lpPathSpec: PtrSTR; nIDListBox: integer; nIDStaticPath: integer; uFileType: set): integer 
	// END DlgDirList;
	
	proc DlgDirSelectExA(hDlg: HWND; lpString: PtrSTR; nCount: integer; nIDListBox: integer): BOOL 
	// END DlgDirSelectExA;
	
	proc DlgDirSelectExW(hDlg: HWND; lpString: PtrWSTR; nCount: integer; nIDListBox: integer): BOOL 
	// END DlgDirSelectExW;
	
	proc DlgDirSelectEx(hDlg: HWND; lpString: PtrSTR; nCount: integer; nIDListBox: integer): BOOL 
	// END DlgDirSelectEx;
	
	proc DlgDirListComboBoxA(hDlg: HWND; lpPathSpec: PtrSTR; nIDComboBox: integer; nIDStaticPath: integer; uFiletype: integer): integer 
	// END DlgDirListComboBoxA;
	
	proc DlgDirListComboBoxW(hDlg: HWND; lpPathSpec: PtrWSTR; nIDComboBox: integer; nIDStaticPath: integer; uFiletype: integer): integer 
	// END DlgDirListComboBoxW;
	
	proc DlgDirListComboBox(hDlg: HWND; lpPathSpec: PtrSTR; nIDComboBox: integer; nIDStaticPath: integer; uFiletype: integer): integer 
	// END DlgDirListComboBox;
	
	proc DlgDirSelectComboBoxExA(hDlg: HWND; lpString: PtrSTR; nCount: integer; nIDComboBox: integer): BOOL 
	// END DlgDirSelectComboBoxExA;
	
	proc DlgDirSelectComboBoxExW(hDlg: HWND; lpString: PtrWSTR; nCount: integer; nIDComboBox: integer): BOOL 
	// END DlgDirSelectComboBoxExW;
	
	proc DlgDirSelectComboBoxEx(hDlg: HWND; lpString: PtrSTR; nCount: integer; nIDComboBox: integer): BOOL 
	// END DlgDirSelectComboBoxEx;
	
	proc SetScrollInfo(p0: HWND; p1: integer; var p2: SCROLLINFO; p3: BOOL): integer 
	// END SetScrollInfo;
	
	proc GetScrollInfo(p0: HWND; p1: integer; var p2: SCROLLINFO): BOOL 
	// END GetScrollInfo;
	
	proc DefFrameProcA(hWnd: HWND; hWndMDIClient: HWND; uMsg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefFrameProcA;
	
	proc DefFrameProcW(hWnd: HWND; hWndMDIClient: HWND; uMsg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefFrameProcW;
	
	proc DefFrameProc(hWnd: HWND; hWndMDIClient: HWND; uMsg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefFrameProc;
	
	proc DefMDIChildProcA(hWnd: HWND; uMsg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefMDIChildProcA;
	
	proc DefMDIChildProcW(hWnd: HWND; uMsg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefMDIChildProcW;
	
	proc DefMDIChildProc(hWnd: HWND; uMsg: integer; wParam: WPARAM; lParam: LPARAM): LRESULT 
	// END DefMDIChildProc;
	
	proc TranslateMDISysAccel(hWndClient: HWND; var lpMsg: MSG): BOOL 
	// END TranslateMDISysAccel;
	
	proc ArrangeIconicWindows(hWnd: HWND): integer 
	// END ArrangeIconicWindows;
	
	proc CreateMDIWindowA(lpClassName: PtrSTR; lpWindowName: PtrSTR; dwStyle: set; X: integer; Y: integer; nWidth: integer; nHeight: integer; hWndParent: HWND; hInstance: HINSTANCE; lParam: LPARAM): HWND 
	// END CreateMDIWindowA;
	
	proc CreateMDIWindowW(lpClassName: PtrWSTR; lpWindowName: PtrWSTR; dwStyle: set; X: integer; Y: integer; nWidth: integer; nHeight: integer; hWndParent: HWND; hInstance: HINSTANCE; lParam: LPARAM): HWND 
	// END CreateMDIWindowW;
	
	proc CreateMDIWindow(lpClassName: PtrSTR; lpWindowName: PtrSTR; dwStyle: set; X: integer; Y: integer; nWidth: integer; nHeight: integer; hWndParent: HWND; hInstance: HINSTANCE; lParam: LPARAM): HWND 
	// END CreateMDIWindow;
	
	proc TileWindows(hwndParent: HWND; wHow: integer; var lpRect: RECT; cKids: integer; var lpKids: HWND): shortint 
	// END TileWindows;
	
	proc CascadeWindows(hwndParent: HWND; wHow: integer; var lpRect: RECT; cKids: integer; var lpKids: HWND): shortint 
	// END CascadeWindows;
	
	proc WinHelpA(hWndMain: HWND; lpszHelp: PtrSTR; uCommand: integer; dwData: integer): BOOL 
	// END WinHelpA;
	
	proc WinHelpW(hWndMain: HWND; lpszHelp: PtrWSTR; uCommand: integer; dwData: integer): BOOL 
	// END WinHelpW;
	
	proc WinHelp(hWndMain: HWND; lpszHelp: PtrSTR; uCommand: integer; dwData: integer): BOOL 
	// END WinHelp;
	
	proc ChangeDisplaySettingsA(var lpDevMode: DEVMODEA; dwFlags: set): integer 
	// END ChangeDisplaySettingsA;
	
	proc ChangeDisplaySettingsW(var lpDevMode: DEVMODEW; dwFlags: set): integer 
	// END ChangeDisplaySettingsW;
	
	proc ChangeDisplaySettings(var lpDevMode: DEVMODEA; dwFlags: set): integer 
	// END ChangeDisplaySettings;
	
	proc EnumDisplaySettingsA(lpszDeviceName: PtrSTR; iModeNum: integer; var lpDevMode: DEVMODEA): BOOL 
	// END EnumDisplaySettingsA;
	
	proc EnumDisplaySettingsW(lpszDeviceName: PtrWSTR; iModeNum: integer; var lpDevMode: DEVMODEW): BOOL 
	// END EnumDisplaySettingsW;
	
	proc EnumDisplaySettings(lpszDeviceName: PtrSTR; iModeNum: integer; var lpDevMode: DEVMODEA): BOOL 
	// END EnumDisplaySettings;
	
	proc SystemParametersInfoA(uiAction: integer; uiParam: integer; pvParam: PtrVoid; fWinIni: integer): BOOL 
	// END SystemParametersInfoA;
	
	proc SystemParametersInfoW(uiAction: integer; uiParam: integer; pvParam: PtrVoid; fWinIni: integer): BOOL 
	// END SystemParametersInfoW;
	
	proc SystemParametersInfo(uiAction: integer; uiParam: integer; pvParam: PtrVoid; fWinIni: integer): BOOL 
	// END SystemParametersInfo;
	
	proc SetDebugErrorLevel(dwLevel: integer) 
	// END SetDebugErrorLevel;
	
	proc SetLastErrorEx(dwErrCode: integer; dwType: integer) 
	// END SetLastErrorEx;
	
	proc IsValidCodePage(CodePage: integer): BOOL 
	// END IsValidCodePage;
	
	proc GetACP(): integer 
	// END GetACP;
	
	proc GetOEMCP(): integer 
	// END GetOEMCP;
	
	proc GetCPInfo(CodePage: integer; var lpCPInfo: CPINFO): BOOL 
	// END GetCPInfo;
	
	proc IsDBCSLeadByte(TestChar: char): BOOL 
	// END IsDBCSLeadByte;
	
	proc IsDBCSLeadByteEx(CodePage: integer; TestChar: char): BOOL 
	// END IsDBCSLeadByteEx;
	
	proc MultiByteToWideChar(CodePage: integer; dwFlags: set; lpMultiByteStr: PtrSTR; cchMultiByte: integer; lpWideCharStr: PtrWSTR; cchWideChar: integer): integer 
	// END MultiByteToWideChar;
	
	proc WideCharToMultiByte(CodePage: integer; dwFlags: set; lpWideCharStr: PtrWSTR; cchWideChar: integer; lpMultiByteStr: PtrSTR; cchMultiByte: integer; lpDefaultChar: PtrSTR; var lpUsedDefaultChar: BOOL): integer 
	// END WideCharToMultiByte;
	
	proc CompareStringA(Locale: LCID; dwCmpFlags: set; lpString1: PtrSTR; cchCount1: integer; lpString2: PtrSTR; cchCount2: integer): integer 
	// END CompareStringA;
	
	proc CompareStringW(Locale: LCID; dwCmpFlags: set; lpString1: PtrWSTR; cchCount1: integer; lpString2: PtrWSTR; cchCount2: integer): integer 
	// END CompareStringW;
	
	proc CompareString(Locale: LCID; dwCmpFlags: set; lpString1: PtrSTR; cchCount1: integer; lpString2: PtrSTR; cchCount2: integer): integer 
	// END CompareString;
	
	proc LCMapStringA(Locale: LCID; dwMapFlags: set; lpSrcStr: PtrSTR; cchSrc: integer; lpDestStr: PtrSTR; cchDest: integer): integer 
	// END LCMapStringA;
	
	proc LCMapStringW(Locale: LCID; dwMapFlags: set; lpSrcStr: PtrWSTR; cchSrc: integer; lpDestStr: PtrWSTR; cchDest: integer): integer 
	// END LCMapStringW;
	
	proc LCMapString(Locale: LCID; dwMapFlags: set; lpSrcStr: PtrSTR; cchSrc: integer; lpDestStr: PtrSTR; cchDest: integer): integer 
	// END LCMapString;
	
	proc GetLocaleInfoA(Locale: LCID; LCType: LCTYPE; lpLCData: PtrSTR; cchData: integer): integer 
	// END GetLocaleInfoA;
	
	proc GetLocaleInfoW(Locale: LCID; LCType: LCTYPE; lpLCData: PtrWSTR; cchData: integer): integer 
	// END GetLocaleInfoW;
	
	proc GetLocaleInfo(Locale: LCID; LCType: LCTYPE; lpLCData: PtrSTR; cchData: integer): integer 
	// END GetLocaleInfo;
	
	proc SetLocaleInfoA(Locale: LCID; LCType: LCTYPE; lpLCData: PtrSTR): BOOL 
	// END SetLocaleInfoA;
	
	proc SetLocaleInfoW(Locale: LCID; LCType: LCTYPE; lpLCData: PtrWSTR): BOOL 
	// END SetLocaleInfoW;
	
	proc SetLocaleInfo(Locale: LCID; LCType: LCTYPE; lpLCData: PtrSTR): BOOL 
	// END SetLocaleInfo;
	
	proc GetTimeFormatA(Locale: LCID; dwFlags: set; var lpTime: SYSTEMTIME; lpFormat: PtrSTR; lpTimeStr: PtrSTR; cchTime: integer): integer 
	// END GetTimeFormatA;
	
	proc GetTimeFormatW(Locale: LCID; dwFlags: set; var lpTime: SYSTEMTIME; lpFormat: PtrWSTR; lpTimeStr: PtrWSTR; cchTime: integer): integer 
	// END GetTimeFormatW;
	
	proc GetTimeFormat(Locale: LCID; dwFlags: set; var lpTime: SYSTEMTIME; lpFormat: PtrSTR; lpTimeStr: PtrSTR; cchTime: integer): integer 
	// END GetTimeFormat;
	
	proc GetDateFormatA(Locale: LCID; dwFlags: set; var lpDate: SYSTEMTIME; lpFormat: PtrSTR; lpDateStr: PtrSTR; cchDate: integer): integer 
	// END GetDateFormatA;
	
	proc GetDateFormatW(Locale: LCID; dwFlags: set; var lpDate: SYSTEMTIME; lpFormat: PtrWSTR; lpDateStr: PtrWSTR; cchDate: integer): integer 
	// END GetDateFormatW;
	
	proc GetDateFormat(Locale: LCID; dwFlags: set; var lpDate: SYSTEMTIME; lpFormat: PtrSTR; lpDateStr: PtrSTR; cchDate: integer): integer 
	// END GetDateFormat;
	
	proc GetNumberFormatA(Locale: LCID; dwFlags: set; lpValue: PtrSTR; var lpFormat: NUMBERFMTA; lpNumberStr: PtrSTR; cchNumber: integer): integer 
	// END GetNumberFormatA;
	
	proc GetNumberFormatW(Locale: LCID; dwFlags: set; lpValue: PtrWSTR; var lpFormat: NUMBERFMTW; lpNumberStr: PtrWSTR; cchNumber: integer): integer 
	// END GetNumberFormatW;
	
	proc GetNumberFormat(Locale: LCID; dwFlags: set; lpValue: PtrSTR; var lpFormat: NUMBERFMTA; lpNumberStr: PtrSTR; cchNumber: integer): integer 
	// END GetNumberFormat;
	
	proc GetCurrencyFormatA(Locale: LCID; dwFlags: set; lpValue: PtrSTR; var lpFormat: CURRENCYFMTA; lpCurrencyStr: PtrSTR; cchCurrency: integer): integer 
	// END GetCurrencyFormatA;
	
	proc GetCurrencyFormatW(Locale: LCID; dwFlags: set; lpValue: PtrWSTR; var lpFormat: CURRENCYFMTW; lpCurrencyStr: PtrWSTR; cchCurrency: integer): integer 
	// END GetCurrencyFormatW;
	
	proc GetCurrencyFormat(Locale: LCID; dwFlags: set; lpValue: PtrSTR; var lpFormat: CURRENCYFMTA; lpCurrencyStr: PtrSTR; cchCurrency: integer): integer 
	// END GetCurrencyFormat;
	
	proc EnumCalendarInfoA(lpCalInfoEnumProc: CALINFO_ENUMPROCA; Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL 
	// END EnumCalendarInfoA;
	
	proc EnumCalendarInfoW(lpCalInfoEnumProc: CALINFO_ENUMPROCW; Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL 
	// END EnumCalendarInfoW;
	
	proc EnumCalendarInfo(lpCalInfoEnumProc: CALINFO_ENUMPROCA; Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL 
	// END EnumCalendarInfo;
	
	proc EnumTimeFormatsA(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA; Locale: LCID; dwFlags: set): BOOL 
	// END EnumTimeFormatsA;
	
	proc EnumTimeFormatsW(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW; Locale: LCID; dwFlags: set): BOOL 
	// END EnumTimeFormatsW;
	
	proc EnumTimeFormats(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA; Locale: LCID; dwFlags: set): BOOL 
	// END EnumTimeFormats;
	
	proc EnumDateFormatsA(lpDateFmtEnumProc: DATEFMT_ENUMPROCA; Locale: LCID; dwFlags: set): BOOL 
	// END EnumDateFormatsA;
	
	proc EnumDateFormatsW(lpDateFmtEnumProc: DATEFMT_ENUMPROCW; Locale: LCID; dwFlags: set): BOOL 
	// END EnumDateFormatsW;
	
	proc EnumDateFormats(lpDateFmtEnumProc: DATEFMT_ENUMPROCA; Locale: LCID; dwFlags: set): BOOL 
	// END EnumDateFormats;
	
	proc IsValidLocale(Locale: LCID; dwFlags: set): BOOL 
	// END IsValidLocale;
	
	proc ConvertDefaultLocale(Locale: LCID): LCID 
	// END ConvertDefaultLocale;
	
	proc GetThreadLocale(): LCID 
	// END GetThreadLocale;
	
	proc SetThreadLocale(Locale: LCID): BOOL 
	// END SetThreadLocale;
	
	proc GetSystemDefaultLangID(): LANGID 
	// END GetSystemDefaultLangID;
	
	proc GetUserDefaultLangID(): LANGID 
	// END GetUserDefaultLangID;
	
	proc GetSystemDefaultLCID(): LCID 
	// END GetSystemDefaultLCID;
	
	proc GetUserDefaultLCID(): LCID 
	// END GetUserDefaultLCID;
	
	proc GetStringTypeExA(Locale: LCID; dwInfoType: set; lpSrcStr: PtrSTR; cchSrc: integer; var lpCharType: shortint): BOOL 
	// END GetStringTypeExA;
	
	proc GetStringTypeExW(Locale: LCID; dwInfoType: set; lpSrcStr: PtrWSTR; cchSrc: integer; var lpCharType: shortint): BOOL 
	// END GetStringTypeExW;
	
	proc GetStringTypeEx(Locale: LCID; dwInfoType: set; lpSrcStr: PtrSTR; cchSrc: integer; var lpCharType: shortint): BOOL 
	// END GetStringTypeEx;
	
	proc GetStringTypeA(Locale: LCID; dwInfoType: set; lpSrcStr: PtrSTR; cchSrc: integer; var lpCharType: shortint): BOOL 
	// END GetStringTypeA;
	
	proc GetStringTypeW(dwInfoType: set; lpSrcStr: PtrWSTR; cchSrc: integer; var lpCharType: shortint): BOOL 
	// END GetStringTypeW;
	
	proc FoldStringA(dwMapFlags: set; lpSrcStr: PtrSTR; cchSrc: integer; lpDestStr: PtrSTR; cchDest: integer): integer 
	// END FoldStringA;
	
	proc FoldStringW(dwMapFlags: set; lpSrcStr: PtrWSTR; cchSrc: integer; lpDestStr: PtrWSTR; cchDest: integer): integer 
	// END FoldStringW;
	
	proc FoldString(dwMapFlags: set; lpSrcStr: PtrSTR; cchSrc: integer; lpDestStr: PtrSTR; cchDest: integer): integer 
	// END FoldString;
	
	proc EnumSystemLocalesA(lpLocaleEnumProc: LOCALE_ENUMPROCA; dwFlags: set): BOOL 
	// END EnumSystemLocalesA;
	
	proc EnumSystemLocalesW(lpLocaleEnumProc: LOCALE_ENUMPROCW; dwFlags: set): BOOL 
	// END EnumSystemLocalesW;
	
	proc EnumSystemLocales(lpLocaleEnumProc: LOCALE_ENUMPROCA; dwFlags: set): BOOL 
	// END EnumSystemLocales;
	
	proc EnumSystemCodePagesA(lpCodePageEnumProc: CODEPAGE_ENUMPROCA; dwFlags: set): BOOL 
	// END EnumSystemCodePagesA;
	
	proc EnumSystemCodePagesW(lpCodePageEnumProc: CODEPAGE_ENUMPROCW; dwFlags: set): BOOL 
	// END EnumSystemCodePagesW;
	
	proc EnumSystemCodePages(lpCodePageEnumProc: CODEPAGE_ENUMPROCA; dwFlags: set): BOOL 
	// END EnumSystemCodePages;
	
	proc PeekConsoleInputA(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsRead: integer): BOOL 
	// END PeekConsoleInputA;
	
	proc PeekConsoleInputW(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsRead: integer): BOOL 
	// END PeekConsoleInputW;
	
	proc PeekConsoleInput(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsRead: integer): BOOL 
	// END PeekConsoleInput;
	
	proc ReadConsoleInputA(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsRead: integer): BOOL 
	// END ReadConsoleInputA;
	
	proc ReadConsoleInputW(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsRead: integer): BOOL 
	// END ReadConsoleInputW;
	
	proc ReadConsoleInput(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsRead: integer): BOOL 
	// END ReadConsoleInput;
	
	proc WriteConsoleInputA(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsWritten: integer): BOOL 
	// END WriteConsoleInputA;
	
	proc WriteConsoleInputW(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsWritten: integer): BOOL 
	// END WriteConsoleInputW;
	
	proc WriteConsoleInput(hConsoleInput: HANDLE; var lpBuffer: INPUT_RECORD; nLength: integer; var lpNumberOfEventsWritten: integer): BOOL 
	// END WriteConsoleInput;
	
	proc ReadConsoleOutputA(hConsoleOutput: HANDLE; var lpBuffer: CHAR_INFO; dwBufferSize: COORD; dwBufferCoord: COORD; var lpReadRegion: SMALL_RECT): BOOL 
	// END ReadConsoleOutputA;
	
	proc ReadConsoleOutputW(hConsoleOutput: HANDLE; var lpBuffer: CHAR_INFO; dwBufferSize: COORD; dwBufferCoord: COORD; var lpReadRegion: SMALL_RECT): BOOL 
	// END ReadConsoleOutputW;
	
	proc ReadConsoleOutput(hConsoleOutput: HANDLE; var lpBuffer: CHAR_INFO; dwBufferSize: COORD; dwBufferCoord: COORD; var lpReadRegion: SMALL_RECT): BOOL 
	// END ReadConsoleOutput;
	
	proc WriteConsoleOutputA(hConsoleOutput: HANDLE; var lpBuffer: CHAR_INFO; dwBufferSize: COORD; dwBufferCoord: COORD; var lpWriteRegion: SMALL_RECT): BOOL 
	// END WriteConsoleOutputA;
	
	proc WriteConsoleOutputW(hConsoleOutput: HANDLE; var lpBuffer: CHAR_INFO; dwBufferSize: COORD; dwBufferCoord: COORD; var lpWriteRegion: SMALL_RECT): BOOL 
	// END WriteConsoleOutputW;
	
	proc WriteConsoleOutput(hConsoleOutput: HANDLE; var lpBuffer: CHAR_INFO; dwBufferSize: COORD; dwBufferCoord: COORD; var lpWriteRegion: SMALL_RECT): BOOL 
	// END WriteConsoleOutput;
	
	proc ReadConsoleOutputCharacterA(hConsoleOutput: HANDLE; lpCharacter: PtrSTR; nLength: integer; dwReadCoord: COORD; var lpNumberOfCharsRead: integer): BOOL 
	// END ReadConsoleOutputCharacterA;
	
	proc ReadConsoleOutputCharacterW(hConsoleOutput: HANDLE; lpCharacter: PtrWSTR; nLength: integer; dwReadCoord: COORD; var lpNumberOfCharsRead: integer): BOOL 
	// END ReadConsoleOutputCharacterW;
	
	proc ReadConsoleOutputCharacter(hConsoleOutput: HANDLE; lpCharacter: PtrSTR; nLength: integer; dwReadCoord: COORD; var lpNumberOfCharsRead: integer): BOOL 
	// END ReadConsoleOutputCharacter;
	
	proc ReadConsoleOutputAttribute(hConsoleOutput: HANDLE; var lpAttribute: shortint; nLength: integer; dwReadCoord: COORD; var lpNumberOfAttrsRead: integer): BOOL 
	// END ReadConsoleOutputAttribute;
	
	proc WriteConsoleOutputCharacterA(hConsoleOutput: HANDLE; lpCharacter: PtrSTR; nLength: integer; dwWriteCoord: COORD; var lpNumberOfCharsWritten: integer): BOOL 
	// END WriteConsoleOutputCharacterA;
	
	proc WriteConsoleOutputCharacterW(hConsoleOutput: HANDLE; lpCharacter: PtrWSTR; nLength: integer; dwWriteCoord: COORD; var lpNumberOfCharsWritten: integer): BOOL 
	// END WriteConsoleOutputCharacterW;
	
	proc WriteConsoleOutputCharacter(hConsoleOutput: HANDLE; lpCharacter: PtrSTR; nLength: integer; dwWriteCoord: COORD; var lpNumberOfCharsWritten: integer): BOOL 
	// END WriteConsoleOutputCharacter;
	
	proc WriteConsoleOutputAttribute(hConsoleOutput: HANDLE; var lpAttribute: shortint; nLength: integer; dwWriteCoord: COORD; var lpNumberOfAttrsWritten: integer): BOOL 
	// END WriteConsoleOutputAttribute;
	
	proc FillConsoleOutputCharacterA(hConsoleOutput: HANDLE; cCharacter: char; nLength: integer; dwWriteCoord: COORD; var lpNumberOfCharsWritten: integer): BOOL 
	// END FillConsoleOutputCharacterA;
	
	proc FillConsoleOutputCharacterW(hConsoleOutput: HANDLE; cCharacter: wchar; nLength: integer; dwWriteCoord: COORD; var lpNumberOfCharsWritten: integer): BOOL 
	// END FillConsoleOutputCharacterW;
	
	proc FillConsoleOutputCharacter(hConsoleOutput: HANDLE; cCharacter: char; nLength: integer; dwWriteCoord: COORD; var lpNumberOfCharsWritten: integer): BOOL 
	// END FillConsoleOutputCharacter;
	
	proc FillConsoleOutputAttribute(hConsoleOutput: HANDLE; wAttribute: shortint; nLength: integer; dwWriteCoord: COORD; var lpNumberOfAttrsWritten: integer): BOOL 
	// END FillConsoleOutputAttribute;
	
	proc GetConsoleMode(hConsoleHandle: HANDLE; var lpMode: set): BOOL 
	// END GetConsoleMode;
	
	proc GetNumberOfConsoleInputEvents(hConsoleInput: HANDLE; var lpNumberOfEvents: integer): BOOL 
	// END GetNumberOfConsoleInputEvents;
	
	proc GetConsoleScreenBufferInfo(hConsoleOutput: HANDLE; var lpConsoleScreenBufferInfo: CONSOLE_SCREEN_BUFFER_INFO): BOOL 
	// END GetConsoleScreenBufferInfo;
	
	proc GetLargestConsoleWindowSize(hConsoleOutput: HANDLE): integer 
	// END GetLargestConsoleWindowSize;
	
	proc GetConsoleCursorInfo(hConsoleOutput: HANDLE; var lpConsoleCursorInfo: CONSOLE_CURSOR_INFO): BOOL 
	// END GetConsoleCursorInfo;
	
	proc GetNumberOfConsoleMouseButtons(var lpNumberOfMouseButtons: integer): BOOL 
	// END GetNumberOfConsoleMouseButtons;
	
	proc SetConsoleMode(hConsoleHandle: HANDLE; dwMode: set): BOOL 
	// END SetConsoleMode;
	
	proc SetConsoleActiveScreenBuffer(hConsoleOutput: HANDLE): BOOL 
	// END SetConsoleActiveScreenBuffer;
	
	proc FlushConsoleInputBuffer(hConsoleInput: HANDLE): BOOL 
	// END FlushConsoleInputBuffer;
	
	proc SetConsoleScreenBufferSize(hConsoleOutput: HANDLE; dwSize: COORD): BOOL 
	// END SetConsoleScreenBufferSize;
	
	proc SetConsoleCursorPosition(hConsoleOutput: HANDLE; dwCursorPosition: COORD): BOOL 
	// END SetConsoleCursorPosition;
	
	proc SetConsoleCursorInfo(hConsoleOutput: HANDLE; var lpConsoleCursorInfo: CONSOLE_CURSOR_INFO): BOOL 
	// END SetConsoleCursorInfo;
	
	proc ScrollConsoleScreenBufferA(hConsoleOutput: HANDLE; var lpScrollRectangle: SMALL_RECT; var lpClipRectangle: SMALL_RECT; dwDestinationOrigin: COORD; var lpFill: CHAR_INFO): BOOL 
	// END ScrollConsoleScreenBufferA;
	
	proc ScrollConsoleScreenBufferW(hConsoleOutput: HANDLE; var lpScrollRectangle: SMALL_RECT; var lpClipRectangle: SMALL_RECT; dwDestinationOrigin: COORD; var lpFill: CHAR_INFO): BOOL 
	// END ScrollConsoleScreenBufferW;
	
	proc ScrollConsoleScreenBuffer(hConsoleOutput: HANDLE; var lpScrollRectangle: SMALL_RECT; var lpClipRectangle: SMALL_RECT; dwDestinationOrigin: COORD; var lpFill: CHAR_INFO): BOOL 
	// END ScrollConsoleScreenBuffer;
	
	proc SetConsoleWindowInfo(hConsoleOutput: HANDLE; bAbsolute: BOOL; var lpConsoleWindow: SMALL_RECT): BOOL 
	// END SetConsoleWindowInfo;
	
	proc SetConsoleTextAttribute(hConsoleOutput: HANDLE; wAttributes: shortint): BOOL 
	// END SetConsoleTextAttribute;
	
	proc SetConsoleCtrlHandler(HandlerRoutine: HANDLER_ROUTINE; Add: BOOL): BOOL 
	// END SetConsoleCtrlHandler;
	
	proc GenerateConsoleCtrlEvent(dwCtrlEvent: integer; dwProcessGroupId: integer): BOOL 
	// END GenerateConsoleCtrlEvent;
	
	proc AllocConsole(): BOOL 
	// END AllocConsole;
	
	proc FreeConsole(): BOOL 
	// END FreeConsole;
	
	proc GetConsoleTitleA(lpConsoleTitle: PtrSTR; nSize: integer): integer 
	// END GetConsoleTitleA;
	
	proc GetConsoleTitleW(lpConsoleTitle: PtrWSTR; nSize: integer): integer 
	// END GetConsoleTitleW;
	
	proc GetConsoleTitle(lpConsoleTitle: PtrSTR; nSize: integer): integer 
	// END GetConsoleTitle;
	
	proc SetConsoleTitleA(lpConsoleTitle: PtrSTR): BOOL 
	// END SetConsoleTitleA;
	
	proc SetConsoleTitleW(lpConsoleTitle: PtrWSTR): BOOL 
	// END SetConsoleTitleW;
	
	proc SetConsoleTitle(lpConsoleTitle: PtrSTR): BOOL 
	// END SetConsoleTitle;
	
	proc ReadConsoleA(hConsoleInput: HANDLE; lpBuffer: PtrVoid; nNumberOfCharsToRead: integer; var lpNumberOfCharsRead: integer; lpReserved: PtrVoid): BOOL 
	// END ReadConsoleA;
	
	proc ReadConsoleW(hConsoleInput: HANDLE; lpBuffer: PtrVoid; nNumberOfCharsToRead: integer; var lpNumberOfCharsRead: integer; lpReserved: PtrVoid): BOOL 
	// END ReadConsoleW;
	
	proc ReadConsole(hConsoleInput: HANDLE; lpBuffer: PtrVoid; nNumberOfCharsToRead: integer; var lpNumberOfCharsRead: integer; lpReserved: PtrVoid): BOOL 
	// END ReadConsole;
	
	proc WriteConsoleA(hConsoleOutput: HANDLE; lpBuffer: PtrVoid; nNumberOfCharsToWrite: integer; var lpNumberOfCharsWritten: integer; lpReserved: PtrVoid): BOOL 
	// END WriteConsoleA;
	
	proc WriteConsoleW(hConsoleOutput: HANDLE; lpBuffer: PtrVoid; nNumberOfCharsToWrite: integer; var lpNumberOfCharsWritten: integer; lpReserved: PtrVoid): BOOL 
	// END WriteConsoleW;
	
	proc WriteConsole(hConsoleOutput: HANDLE; lpBuffer: PtrVoid; nNumberOfCharsToWrite: integer; var lpNumberOfCharsWritten: integer; lpReserved: PtrVoid): BOOL 
	// END WriteConsole;
	
	proc CreateConsoleScreenBuffer(dwDesiredAccess: set; dwShareMode: set; var lpSecurityAttributes: SECURITY_ATTRIBUTES; dwFlags: set; lpScreenBufferData: PtrVoid): HANDLE 
	// END CreateConsoleScreenBuffer;
	
	proc GetConsoleCP(): integer 
	// END GetConsoleCP;
	
	proc SetConsoleCP(wCodePageID: integer): BOOL 
	// END SetConsoleCP;
	
	proc GetConsoleOutputCP(): integer 
	// END GetConsoleOutputCP;
	
	proc SetConsoleOutputCP(wCodePageID: integer): BOOL 
	// END SetConsoleOutputCP;
	
	proc VerFindFileA(uFlags: set; szFileName: PtrSTR; szWinDir: PtrSTR; szAppDir: PtrSTR; szCurDir: PtrSTR; var lpuCurDirLen: integer; szDestDir: PtrSTR; var lpuDestDirLen: integer): set 
	// END VerFindFileA;
	
	proc VerFindFileW(uFlags: set; szFileName: PtrWSTR; szWinDir: PtrWSTR; szAppDir: PtrWSTR; szCurDir: PtrWSTR; var lpuCurDirLen: integer; szDestDir: PtrWSTR; var lpuDestDirLen: integer): set 
	// END VerFindFileW;
	
	proc VerFindFile(uFlags: set; szFileName: PtrSTR; szWinDir: PtrSTR; szAppDir: PtrSTR; szCurDir: PtrSTR; var lpuCurDirLen: integer; szDestDir: PtrSTR; var lpuDestDirLen: integer): set 
	// END VerFindFile;
	
	proc VerInstallFileA(uFlags: set; szSrcFileName: PtrSTR; szDestFileName: PtrSTR; szSrcDir: PtrSTR; szDestDir: PtrSTR; szCurDir: PtrSTR; szTmpFile: PtrSTR; var lpuTmpFileLen: integer): set 
	// END VerInstallFileA;
	
	proc VerInstallFileW(uFlags: set; szSrcFileName: PtrWSTR; szDestFileName: PtrWSTR; szSrcDir: PtrWSTR; szDestDir: PtrWSTR; szCurDir: PtrWSTR; szTmpFile: PtrWSTR; var lpuTmpFileLen: integer): set 
	// END VerInstallFileW;
	
	proc VerInstallFile(uFlags: set; szSrcFileName: PtrSTR; szDestFileName: PtrSTR; szSrcDir: PtrSTR; szDestDir: PtrSTR; szCurDir: PtrSTR; szTmpFile: PtrSTR; var lpuTmpFileLen: integer): set 
	// END VerInstallFile;
	
	proc GetFileVersionInfoSizeA(lptstrFilename: PtrSTR; var lpdwHandle: integer): integer 
	// END GetFileVersionInfoSizeA;
	
	proc GetFileVersionInfoSizeW(lptstrFilename: PtrWSTR; var lpdwHandle: integer): integer 
	// END GetFileVersionInfoSizeW;
	
	proc GetFileVersionInfoSize(lptstrFilename: PtrSTR; var lpdwHandle: integer): integer 
	// END GetFileVersionInfoSize;
	
	proc GetFileVersionInfoA(lptstrFilename: PtrSTR; dwHandle: integer; dwLen: integer; lpData: PtrVoid): BOOL 
	// END GetFileVersionInfoA;
	
	proc GetFileVersionInfoW(lptstrFilename: PtrWSTR; dwHandle: integer; dwLen: integer; lpData: PtrVoid): BOOL 
	// END GetFileVersionInfoW;
	
	proc GetFileVersionInfo(lptstrFilename: PtrSTR; dwHandle: integer; dwLen: integer; lpData: PtrVoid): BOOL 
	// END GetFileVersionInfo;
	
	proc VerLanguageNameA(wLang: integer; szLang: PtrSTR; nSize: integer): integer 
	// END VerLanguageNameA;
	
	proc VerLanguageNameW(wLang: integer; szLang: PtrWSTR; nSize: integer): integer 
	// END VerLanguageNameW;
	
	proc VerLanguageName(wLang: integer; szLang: PtrSTR; nSize: integer): integer 
	// END VerLanguageName;
	
	proc VerQueryValueA(pBlock: PtrVoid; lpSubBlock: PtrSTR; lplpBuffer: unsafe pointer to (* ? *)carray of PtrVoid; var puLen: integer): BOOL 
	// END VerQueryValueA;
	
	proc VerQueryValueW(pBlock: PtrVoid; lpSubBlock: PtrWSTR; lplpBuffer: unsafe pointer to (* ? *)carray of PtrVoid; var puLen: integer): BOOL 
	// END VerQueryValueW;
	
	proc VerQueryValue(pBlock: PtrVoid; lpSubBlock: PtrSTR; lplpBuffer: unsafe pointer to (* ? *)carray of PtrVoid; var puLen: integer): BOOL 
	// END VerQueryValue;
	
	proc RegCloseKey(hKey: HKEY): integer 
	// END RegCloseKey;
	
	proc RegConnectRegistryA(lpMachineName: PtrSTR; hKey: HKEY; var phkResult: HKEY): integer 
	// END RegConnectRegistryA;
	
	proc RegConnectRegistryW(lpMachineName: PtrWSTR; hKey: HKEY; var phkResult: HKEY): integer 
	// END RegConnectRegistryW;
	
	proc RegConnectRegistry(lpMachineName: PtrSTR; hKey: HKEY; var phkResult: HKEY): integer 
	// END RegConnectRegistry;
	
	proc RegCreateKeyA(hKey: HKEY; lpSubKey: PtrSTR; var phkResult: HKEY): integer 
	// END RegCreateKeyA;
	
	proc RegCreateKeyW(hKey: HKEY; lpSubKey: PtrWSTR; var phkResult: HKEY): integer 
	// END RegCreateKeyW;
	
	proc RegCreateKey(hKey: HKEY; lpSubKey: PtrSTR; var phkResult: HKEY): integer 
	// END RegCreateKey;
	
	proc RegCreateKeyExA(hKey: HKEY; lpSubKey: PtrSTR; Reserved: integer; lpClass: PtrSTR; dwOptions: set; samDesired: REGSAM; var lpSecurityAttributes: SECURITY_ATTRIBUTES; var phkResult: HKEY; var lpdwDisposition: integer): integer 
	// END RegCreateKeyExA;
	
	proc RegCreateKeyExW(hKey: HKEY; lpSubKey: PtrWSTR; Reserved: integer; lpClass: PtrWSTR; dwOptions: set; samDesired: REGSAM; var lpSecurityAttributes: SECURITY_ATTRIBUTES; var phkResult: HKEY; var lpdwDisposition: integer): integer 
	// END RegCreateKeyExW;
	
	proc RegCreateKeyEx(hKey: HKEY; lpSubKey: PtrSTR; Reserved: integer; lpClass: PtrSTR; dwOptions: set; samDesired: REGSAM; var lpSecurityAttributes: SECURITY_ATTRIBUTES; var phkResult: HKEY; var lpdwDisposition: integer): integer 
	// END RegCreateKeyEx;
	
	proc RegDeleteKeyA(hKey: HKEY; lpSubKey: PtrSTR): integer 
	// END RegDeleteKeyA;
	
	proc RegDeleteKeyW(hKey: HKEY; lpSubKey: PtrWSTR): integer 
	// END RegDeleteKeyW;
	
	proc RegDeleteKey(hKey: HKEY; lpSubKey: PtrSTR): integer 
	// END RegDeleteKey;
	
	proc RegDeleteValueA(hKey: HKEY; lpValueName: PtrSTR): integer 
	// END RegDeleteValueA;
	
	proc RegDeleteValueW(hKey: HKEY; lpValueName: PtrWSTR): integer 
	// END RegDeleteValueW;
	
	proc RegDeleteValue(hKey: HKEY; lpValueName: PtrSTR): integer 
	// END RegDeleteValue;
	
	proc RegEnumKeyA(hKey: HKEY; dwIndex: integer; lpName: PtrSTR; cbName: integer): integer 
	// END RegEnumKeyA;
	
	proc RegEnumKeyW(hKey: HKEY; dwIndex: integer; lpName: PtrWSTR; cbName: integer): integer 
	// END RegEnumKeyW;
	
	proc RegEnumKey(hKey: HKEY; dwIndex: integer; lpName: PtrSTR; cbName: integer): integer 
	// END RegEnumKey;
	
	proc RegEnumKeyExA(hKey: HKEY; dwIndex: integer; lpName: PtrSTR; var lpcbName: integer; var lpReserved: integer; lpClass: PtrSTR; var lpcbClass: integer; var lpftLastWriteTime: FILETIME): integer 
	// END RegEnumKeyExA;
	
	proc RegEnumKeyExW(hKey: HKEY; dwIndex: integer; lpName: PtrWSTR; var lpcbName: integer; var lpReserved: integer; lpClass: PtrWSTR; var lpcbClass: integer; var lpftLastWriteTime: FILETIME): integer 
	// END RegEnumKeyExW;
	
	proc RegEnumKeyEx(hKey: HKEY; dwIndex: integer; lpName: PtrSTR; var lpcbName: integer; var lpReserved: integer; lpClass: PtrSTR; var lpcbClass: integer; var lpftLastWriteTime: FILETIME): integer 
	// END RegEnumKeyEx;
	
	proc RegEnumValueA(hKey: HKEY; dwIndex: integer; lpValueName: PtrSTR; var lpcbValueName: integer; var lpReserved: integer; var lpType: integer; lpData: PtrVoid; var lpcbData: integer): integer 
	// END RegEnumValueA;
	
	proc RegEnumValueW(hKey: HKEY; dwIndex: integer; lpValueName: PtrWSTR; var lpcbValueName: integer; var lpReserved: integer; var lpType: integer; lpData: PtrVoid; var lpcbData: integer): integer 
	// END RegEnumValueW;
	
	proc RegEnumValue(hKey: HKEY; dwIndex: integer; lpValueName: PtrSTR; var lpcbValueName: integer; var lpReserved: integer; var lpType: integer; lpData: PtrVoid; var lpcbData: integer): integer 
	// END RegEnumValue;
	
	proc RegFlushKey(hKey: HKEY): integer 
	// END RegFlushKey;
	
	proc RegGetKeySecurity(hKey: HKEY; SecurityInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR; var lpcbSecurityDescriptor: integer): integer 
	// END RegGetKeySecurity;
	
	proc RegLoadKeyA(hKey: HKEY; lpSubKey: PtrSTR; lpFile: PtrSTR): integer 
	// END RegLoadKeyA;
	
	proc RegLoadKeyW(hKey: HKEY; lpSubKey: PtrWSTR; lpFile: PtrWSTR): integer 
	// END RegLoadKeyW;
	
	proc RegLoadKey(hKey: HKEY; lpSubKey: PtrSTR; lpFile: PtrSTR): integer 
	// END RegLoadKey;
	
	proc RegNotifyChangeKeyValue(hKey: HKEY; bWatchSubtree: BOOL; dwNotifyFilter: set; hEvent: HANDLE; fAsynchronus: BOOL): integer 
	// END RegNotifyChangeKeyValue;
	
	proc RegOpenKeyA(hKey: HKEY; lpSubKey: PtrSTR; var phkResult: HKEY): integer 
	// END RegOpenKeyA;
	
	proc RegOpenKeyW(hKey: HKEY; lpSubKey: PtrWSTR; var phkResult: HKEY): integer 
	// END RegOpenKeyW;
	
	proc RegOpenKey(hKey: HKEY; lpSubKey: PtrSTR; var phkResult: HKEY): integer 
	// END RegOpenKey;
	
	proc RegOpenKeyExA(hKey: HKEY; lpSubKey: PtrSTR; ulOptions: integer; samDesired: REGSAM; var phkResult: HKEY): integer 
	// END RegOpenKeyExA;
	
	proc RegOpenKeyExW(hKey: HKEY; lpSubKey: PtrWSTR; ulOptions: integer; samDesired: REGSAM; var phkResult: HKEY): integer 
	// END RegOpenKeyExW;
	
	proc RegOpenKeyEx(hKey: HKEY; lpSubKey: PtrSTR; ulOptions: integer; samDesired: REGSAM; var phkResult: HKEY): integer 
	// END RegOpenKeyEx;
	
	proc RegQueryInfoKeyA(hKey: HKEY; lpClass: PtrSTR; var lpcbClass: integer; var lpReserved: integer; var lpcSubKeys: integer; var lpcbMaxSubKeyLen: integer; var lpcbMaxClassLen: integer; var lpcValues: integer; var lpcbMaxValueNameLen: integer; var lpcbMaxValueLen: integer; var lpcbSecurityDescriptor: integer; var lpftLastWriteTime: FILETIME): integer 
	// END RegQueryInfoKeyA;
	
	proc RegQueryInfoKeyW(hKey: HKEY; lpClass: PtrWSTR; var lpcbClass: integer; var lpReserved: integer; var lpcSubKeys: integer; var lpcbMaxSubKeyLen: integer; var lpcbMaxClassLen: integer; var lpcValues: integer; var lpcbMaxValueNameLen: integer; var lpcbMaxValueLen: integer; var lpcbSecurityDescriptor: integer; var lpftLastWriteTime: FILETIME): integer 
	// END RegQueryInfoKeyW;
	
	proc RegQueryInfoKey(hKey: HKEY; lpClass: PtrSTR; var lpcbClass: integer; var lpReserved: integer; var lpcSubKeys: integer; var lpcbMaxSubKeyLen: integer; var lpcbMaxClassLen: integer; var lpcValues: integer; var lpcbMaxValueNameLen: integer; var lpcbMaxValueLen: integer; var lpcbSecurityDescriptor: integer; var lpftLastWriteTime: FILETIME): integer 
	// END RegQueryInfoKey;
	
	proc RegQueryValueA(hKey: HKEY; lpSubKey: PtrSTR; lpValue: PtrSTR; var lpcbValue: integer): integer 
	// END RegQueryValueA;
	
	proc RegQueryValueW(hKey: HKEY; lpSubKey: PtrWSTR; lpValue: PtrWSTR; var lpcbValue: integer): integer 
	// END RegQueryValueW;
	
	proc RegQueryValue(hKey: HKEY; lpSubKey: PtrSTR; lpValue: PtrSTR; var lpcbValue: integer): integer 
	// END RegQueryValue;
	
	proc RegQueryMultipleValuesA(hKey: HKEY; var val_list: VALENTA; num_vals: integer; lpValueBuf: PtrSTR; var ldwTotsize: integer): integer 
	// END RegQueryMultipleValuesA;
	
	proc RegQueryMultipleValuesW(hKey: HKEY; var val_list: VALENTW; num_vals: integer; lpValueBuf: PtrWSTR; var ldwTotsize: integer): integer 
	// END RegQueryMultipleValuesW;
	
	proc RegQueryMultipleValues(hKey: HKEY; var val_list: VALENTA; num_vals: integer; lpValueBuf: PtrSTR; var ldwTotsize: integer): integer 
	// END RegQueryMultipleValues;
	
	proc RegQueryValueExA(hKey: HKEY; lpValueName: PtrSTR; var lpReserved: integer; var lpType: integer; lpData: PtrVoid; var lpcbData: integer): integer 
	// END RegQueryValueExA;
	
	proc RegQueryValueExW(hKey: HKEY; lpValueName: PtrWSTR; var lpReserved: integer; var lpType: integer; lpData: PtrVoid; var lpcbData: integer): integer 
	// END RegQueryValueExW;
	
	proc RegQueryValueEx(hKey: HKEY; lpValueName: PtrSTR; var lpReserved: integer; var lpType: integer; lpData: PtrVoid; var lpcbData: integer): integer 
	// END RegQueryValueEx;
	
	proc RegReplaceKeyA(hKey: HKEY; lpSubKey: PtrSTR; lpNewFile: PtrSTR; lpOldFile: PtrSTR): integer 
	// END RegReplaceKeyA;
	
	proc RegReplaceKeyW(hKey: HKEY; lpSubKey: PtrWSTR; lpNewFile: PtrWSTR; lpOldFile: PtrWSTR): integer 
	// END RegReplaceKeyW;
	
	proc RegReplaceKey(hKey: HKEY; lpSubKey: PtrSTR; lpNewFile: PtrSTR; lpOldFile: PtrSTR): integer 
	// END RegReplaceKey;
	
	proc RegRestoreKeyA(hKey: HKEY; lpFile: PtrSTR; dwFlags: set): integer 
	// END RegRestoreKeyA;
	
	proc RegRestoreKeyW(hKey: HKEY; lpFile: PtrWSTR; dwFlags: set): integer 
	// END RegRestoreKeyW;
	
	proc RegRestoreKey(hKey: HKEY; lpFile: PtrSTR; dwFlags: set): integer 
	// END RegRestoreKey;
	
	proc RegSaveKeyA(hKey: HKEY; lpFile: PtrSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): integer 
	// END RegSaveKeyA;
	
	proc RegSaveKeyW(hKey: HKEY; lpFile: PtrWSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): integer 
	// END RegSaveKeyW;
	
	proc RegSaveKey(hKey: HKEY; lpFile: PtrSTR; var lpSecurityAttributes: SECURITY_ATTRIBUTES): integer 
	// END RegSaveKey;
	
	proc RegSetKeySecurity(hKey: HKEY; SecurityInformation: SECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR): integer 
	// END RegSetKeySecurity;
	
	proc RegSetValueA(hKey: HKEY; lpSubKey: PtrSTR; dwType: integer; lpData: PtrSTR; cbData: integer): integer 
	// END RegSetValueA;
	
	proc RegSetValueW(hKey: HKEY; lpSubKey: PtrWSTR; dwType: integer; lpData: PtrWSTR; cbData: integer): integer 
	// END RegSetValueW;
	
	proc RegSetValue(hKey: HKEY; lpSubKey: PtrSTR; dwType: integer; lpData: PtrSTR; cbData: integer): integer 
	// END RegSetValue;
	
	proc RegSetValueExA(hKey: HKEY; lpValueName: PtrSTR; Reserved: integer; dwType: integer; lpData: PtrVoid; cbData: integer): integer 
	// END RegSetValueExA;
	
	proc RegSetValueExW(hKey: HKEY; lpValueName: PtrWSTR; Reserved: integer; dwType: integer; lpData: PtrVoid; cbData: integer): integer 
	// END RegSetValueExW;
	
	proc RegSetValueEx(hKey: HKEY; lpValueName: PtrSTR; Reserved: integer; dwType: integer; lpData: PtrVoid; cbData: integer): integer 
	// END RegSetValueEx;
	
	proc RegUnLoadKeyA(hKey: HKEY; lpSubKey: PtrSTR): integer 
	// END RegUnLoadKeyA;
	
	proc RegUnLoadKeyW(hKey: HKEY; lpSubKey: PtrWSTR): integer 
	// END RegUnLoadKeyW;
	
	proc RegUnLoadKey(hKey: HKEY; lpSubKey: PtrSTR): integer 
	// END RegUnLoadKey;
	
	proc InitiateSystemShutdownA(lpMachineName: PtrSTR; lpMessage: PtrSTR; dwTimeout: integer; bForceAppsClosed: BOOL; bRebootAfterShutdown: BOOL): BOOL 
	// END InitiateSystemShutdownA;
	
	proc InitiateSystemShutdownW(lpMachineName: PtrWSTR; lpMessage: PtrWSTR; dwTimeout: integer; bForceAppsClosed: BOOL; bRebootAfterShutdown: BOOL): BOOL 
	// END InitiateSystemShutdownW;
	
	proc InitiateSystemShutdown(lpMachineName: PtrSTR; lpMessage: PtrSTR; dwTimeout: integer; bForceAppsClosed: BOOL; bRebootAfterShutdown: BOOL): BOOL 
	// END InitiateSystemShutdown;
	
	proc AbortSystemShutdownA(lpMachineName: PtrSTR): BOOL 
	// END AbortSystemShutdownA;
	
	proc AbortSystemShutdownW(lpMachineName: PtrWSTR): BOOL 
	// END AbortSystemShutdownW;
	
	proc AbortSystemShutdown(lpMachineName: PtrSTR): BOOL 
	// END AbortSystemShutdown;
	
	proc DdeSetQualityOfService(hwndClient: HWND; var pqosNew: SECURITY_QUALITY_OF_SERVICE; var pqosPrev: SECURITY_QUALITY_OF_SERVICE): BOOL 
	// END DdeSetQualityOfService;
	
	proc ImpersonateDdeClientWindow(hWndClient: HWND; hWndServer: HWND): BOOL 
	// END ImpersonateDdeClientWindow;
	
	proc PackDDElParam(msg: integer; uiLo: integer; uiHi: integer): integer 
	// END PackDDElParam;
	
	proc UnpackDDElParam(msg: integer; lParam: integer; var puiLo: integer; var puiHi: integer): BOOL 
	// END UnpackDDElParam;
	
	proc FreeDDElParam(msg: integer; lParam: integer): BOOL 
	// END FreeDDElParam;
	
	proc ReuseDDElParam(lParam: integer; msgIn: integer; msgOut: integer; uiLo: integer; uiHi: integer): integer 
	// END ReuseDDElParam;
	
	proc DdeInitializeA(var pidInst: integer; pfnCallback: FNCALLBACK; afCmd: integer; ulRes: integer): integer 
	// END DdeInitializeA;
	
	proc DdeInitializeW(var pidInst: integer; pfnCallback: FNCALLBACK; afCmd: integer; ulRes: integer): integer 
	// END DdeInitializeW;
	
	proc DdeInitialize(var pidInst: integer; pfnCallback: FNCALLBACK; afCmd: integer; ulRes: integer): integer 
	// END DdeInitialize;
	
	proc DdeUninitialize(idInst: integer): BOOL 
	// END DdeUninitialize;
	
	proc DdeConnectList(idInst: integer; hszService: HSZ; hszTopic: HSZ; hConvList: HCONVLIST; var pCC: CONVCONTEXT): HCONVLIST 
	// END DdeConnectList;
	
	proc DdeQueryNextServer(hConvList: HCONVLIST; hConvPrev: HCONV): HCONV 
	// END DdeQueryNextServer;
	
	proc DdeDisconnectList(hConvList: HCONVLIST): BOOL 
	// END DdeDisconnectList;
	
	proc DdeConnect(idInst: integer; hszService: HSZ; hszTopic: HSZ; var pCC: CONVCONTEXT): HCONV 
	// END DdeConnect;
	
	proc DdeDisconnect(hConv: HCONV): BOOL 
	// END DdeDisconnect;
	
	proc DdeReconnect(hConv: HCONV): HCONV 
	// END DdeReconnect;
	
	proc DdeQueryConvInfo(hConv: HCONV; idTransaction: integer; var pConvInfo: CONVINFO): integer 
	// END DdeQueryConvInfo;
	
	proc DdeSetUserHandle(hConv: HCONV; id: integer; hUser: integer): BOOL 
	// END DdeSetUserHandle;
	
	proc DdeAbandonTransaction(idInst: integer; hConv: HCONV; idTransaction: integer): BOOL 
	// END DdeAbandonTransaction;
	
	proc DdePostAdvise(idInst: integer; hszTopic: HSZ; hszItem: HSZ): BOOL 
	// END DdePostAdvise;
	
	proc DdeEnableCallback(idInst: integer; hConv: HCONV; wCmd: integer): BOOL 
	// END DdeEnableCallback;
	
	proc DdeImpersonateClient(hConv: HCONV): BOOL 
	// END DdeImpersonateClient;
	
	proc DdeNameService(idInst: integer; hsz1: HSZ; hsz2: HSZ; afCmd: integer): HDDEDATA 
	// END DdeNameService;
	
	proc DdeClientTransaction(var pData: char; cbData: integer; hConv: HCONV; hszItem: HSZ; wFmt: integer; wType: integer; dwTimeout: integer; var pdwResult: integer): HDDEDATA 
	// END DdeClientTransaction;
	
	proc DdeCreateDataHandle(idInst: integer; var pSrc: char; cb: integer; cbOff: integer; hszItem: HSZ; wFmt: integer; afCmd: integer): HDDEDATA 
	// END DdeCreateDataHandle;
	
	proc DdeAddData(hData: HDDEDATA; var pSrc: char; cb: integer; cbOff: integer): HDDEDATA 
	// END DdeAddData;
	
	proc DdeGetData(hData: HDDEDATA; var pDst: char; cbMax: integer; cbOff: integer): integer 
	// END DdeGetData;
	
	proc DdeAccessData(hData: HDDEDATA; var pcbDataSize: integer): RetDdeAccessData 
	// END DdeAccessData;
	
	proc DdeUnaccessData(hData: HDDEDATA): BOOL 
	// END DdeUnaccessData;
	
	proc DdeFreeDataHandle(hData: HDDEDATA): BOOL 
	// END DdeFreeDataHandle;
	
	proc DdeGetLastError(idInst: integer): integer 
	// END DdeGetLastError;
	
	proc DdeCreateStringHandleA(idInst: integer; psz: PtrSTR; iCodePage: integer): HSZ 
	// END DdeCreateStringHandleA;
	
	proc DdeCreateStringHandleW(idInst: integer; psz: PtrWSTR; iCodePage: integer): HSZ 
	// END DdeCreateStringHandleW;
	
	proc DdeCreateStringHandle(idInst: integer; psz: PtrSTR; iCodePage: integer): HSZ 
	// END DdeCreateStringHandle;
	
	proc DdeQueryStringA(idInst: integer; hsz: HSZ; psz: PtrSTR; cchMax: integer; iCodePage: integer): integer 
	// END DdeQueryStringA;
	
	proc DdeQueryStringW(idInst: integer; hsz: HSZ; psz: PtrWSTR; cchMax: integer; iCodePage: integer): integer 
	// END DdeQueryStringW;
	
	proc DdeQueryString(idInst: integer; hsz: HSZ; psz: PtrSTR; cchMax: integer; iCodePage: integer): integer 
	// END DdeQueryString;
	
	proc DdeFreeStringHandle(idInst: integer; hsz: HSZ): BOOL 
	// END DdeFreeStringHandle;
	
	proc DdeKeepStringHandle(idInst: integer; hsz: HSZ): BOOL 
	// END DdeKeepStringHandle;
	
	proc DdeCmpStringHandles(hsz1: HSZ; hsz2: HSZ): integer 
	// END DdeCmpStringHandles;
	
	proc SendInput(nInputs: integer; pInputs: unsafe pointer to carray of INPUT; cbSize: integer): integer 
	// END SendInput;
	
	proc LZStart(): integer 
	// END LZStart;
	
	proc LZDone() 
	// END LZDone;
	
	proc CopyLZFile(p0: integer; p1: integer): integer 
	// END CopyLZFile;
	
	proc LZCopy(p0: integer; p1: integer): integer 
	// END LZCopy;
	
	proc LZInit(p0: integer): integer 
	// END LZInit;
	
	proc GetExpandedNameA(p0: PtrSTR; p1: PtrSTR): integer 
	// END GetExpandedNameA;
	
	proc GetExpandedNameW(p0: PtrWSTR; p1: PtrWSTR): integer 
	// END GetExpandedNameW;
	
	proc GetExpandedName(p0: PtrSTR; p1: PtrSTR): integer 
	// END GetExpandedName;
	
	proc LZOpenFileA(p0: PtrSTR; var p1: OFSTRUCT; p2: shortint): integer 
	// END LZOpenFileA;
	
	proc LZOpenFileW(p0: PtrWSTR; var p1: OFSTRUCT; p2: shortint): integer 
	// END LZOpenFileW;
	
	proc LZOpenFile(p0: PtrSTR; var p1: OFSTRUCT; p2: shortint): integer 
	// END LZOpenFile;
	
	proc LZSeek(p0: integer; p1: integer; p2: integer): integer 
	// END LZSeek;
	
	proc LZRead(p0: integer; p1: PtrSTR; p2: integer): integer 
	// END LZRead;
	
	proc LZClose(p0: integer) 
	// END LZClose;
	
	proc DragQueryFileA(p0: HDROP; p1: integer; p2: PtrSTR; p3: integer): integer 
	// END DragQueryFileA;
	
	proc DragQueryFileW(p0: HDROP; p1: integer; p2: PtrWSTR; p3: integer): integer 
	// END DragQueryFileW;
	
	proc DragQueryFile(p0: HDROP; p1: integer; p2: PtrSTR; p3: integer): integer 
	// END DragQueryFile;
	
	proc DragQueryPoint(p0: HDROP; var p1: POINT): BOOL 
	// END DragQueryPoint;
	
	proc DragFinish(p0: HDROP) 
	// END DragFinish;
	
	proc DragAcceptFiles(p0: HWND; p1: BOOL) 
	// END DragAcceptFiles;
	
	proc ShellExecuteA(hwnd: HWND; lpOperation: PtrSTR; lpFile: PtrSTR; lpParameters: PtrSTR; lpDirectory: PtrSTR; nShowCmd: integer): HINSTANCE 
	// END ShellExecuteA;
	
	proc ShellExecuteW(hwnd: HWND; lpOperation: PtrWSTR; lpFile: PtrWSTR; lpParameters: PtrWSTR; lpDirectory: PtrWSTR; nShowCmd: integer): HINSTANCE 
	// END ShellExecuteW;
	
	proc ShellExecute(hwnd: HWND; lpOperation: PtrSTR; lpFile: PtrSTR; lpParameters: PtrSTR; lpDirectory: PtrSTR; nShowCmd: integer): HINSTANCE 
	// END ShellExecute;
	
	proc FindExecutableA(lpFile: PtrSTR; lpDirectory: PtrSTR; lpResult: PtrSTR): HINSTANCE 
	// END FindExecutableA;
	
	proc FindExecutableW(lpFile: PtrWSTR; lpDirectory: PtrWSTR; lpResult: PtrWSTR): HINSTANCE 
	// END FindExecutableW;
	
	proc FindExecutable(lpFile: PtrSTR; lpDirectory: PtrSTR; lpResult: PtrSTR): HINSTANCE 
	// END FindExecutable;
	
	proc CommandLineToArgvW(lpCmdLine: PtrWSTR; var pNumArgs: integer): RetCommandLineToArgvW 
	// END CommandLineToArgvW;
	
	proc ShellAboutA(hWnd: HWND; szApp: PtrSTR; szOtherStuff: PtrSTR; hIcon: HICON): integer 
	// END ShellAboutA;
	
	proc ShellAboutW(hWnd: HWND; szApp: PtrWSTR; szOtherStuff: PtrWSTR; hIcon: HICON): integer 
	// END ShellAboutW;
	
	proc ShellAbout(hWnd: HWND; szApp: PtrSTR; szOtherStuff: PtrSTR; hIcon: HICON): integer 
	// END ShellAbout;
	
	proc DuplicateIcon(hInst: HINSTANCE; hIcon: HICON): HICON 
	// END DuplicateIcon;
	
	proc ExtractAssociatedIconA(hInst: HINSTANCE; lpIconPath: PtrSTR; var lpiIcon: shortint): HICON 
	// END ExtractAssociatedIconA;
	
	proc ExtractAssociatedIconW(hInst: HINSTANCE; lpIconPath: PtrWSTR; var lpiIcon: shortint): HICON 
	// END ExtractAssociatedIconW;
	
	proc ExtractAssociatedIcon(hInst: HINSTANCE; lpIconPath: PtrSTR; var lpiIcon: shortint): HICON 
	// END ExtractAssociatedIcon;
	
	proc ExtractIconA(hInst: HINSTANCE; lpszExeFileName: PtrSTR; nIconIndex: integer): HICON 
	// END ExtractIconA;
	
	proc ExtractIconW(hInst: HINSTANCE; lpszExeFileName: PtrWSTR; nIconIndex: integer): HICON 
	// END ExtractIconW;
	
	proc ExtractIcon(hInst: HINSTANCE; lpszExeFileName: PtrSTR; nIconIndex: integer): HICON 
	// END ExtractIcon;
	
	proc SHAppBarMessage(dwMessage: integer; var pData: APPBARDATA): integer 
	// END SHAppBarMessage;
	
	proc DoEnvironmentSubstA(szString: PtrSTR; cbString: integer): integer 
	// END DoEnvironmentSubstA;
	
	proc DoEnvironmentSubstW(szString: PtrWSTR; cbString: integer): integer 
	// END DoEnvironmentSubstW;
	
	proc DoEnvironmentSubst(szString: PtrSTR; cbString: integer): integer 
	// END DoEnvironmentSubst;
	
	proc ExtractIconExA(lpszFile: PtrSTR; nIconIndex: integer; var phiconLarge: HICON; var phiconSmall: HICON; nIcons: integer): integer 
	// END ExtractIconExA;
	
	proc ExtractIconExW(lpszFile: PtrWSTR; nIconIndex: integer; var phiconLarge: HICON; var phiconSmall: HICON; nIcons: integer): integer 
	// END ExtractIconExW;
	
	proc ExtractIconEx(lpszFile: PtrSTR; nIconIndex: integer; var phiconLarge: HICON; var phiconSmall: HICON; nIcons: integer): integer 
	// END ExtractIconEx;
	
	proc SHFileOperationA(var lpFileOp: SHFILEOPSTRUCTA): integer 
	// END SHFileOperationA;
	
	proc SHFileOperationW(var lpFileOp: SHFILEOPSTRUCTW): integer 
	// END SHFileOperationW;
	
	proc SHFileOperation(var lpFileOp: SHFILEOPSTRUCTA): integer 
	// END SHFileOperation;
	
	proc SHFreeNameMappings(hNameMappings: HANDLE) 
	// END SHFreeNameMappings;
	
	proc ShellExecuteExA(var lpExecInfo: SHELLEXECUTEINFOA): BOOL 
	// END ShellExecuteExA;
	
	proc ShellExecuteExW(var lpExecInfo: SHELLEXECUTEINFOW): BOOL 
	// END ShellExecuteExW;
	
	proc ShellExecuteEx(var lpExecInfo: SHELLEXECUTEINFOA): BOOL 
	// END ShellExecuteEx;
	
	proc Shell_NotifyIconA(dwMessage: integer; var lpData: NOTIFYICONDATAA): BOOL 
	// END Shell_NotifyIconA;
	
	proc Shell_NotifyIconW(dwMessage: integer; var lpData: NOTIFYICONDATAW): BOOL 
	// END Shell_NotifyIconW;
	
	proc Shell_NotifyIcon(dwMessage: integer; var lpData: NOTIFYICONDATAA): BOOL 
	// END Shell_NotifyIcon;
	
	proc SHGetFileInfoA(pszPath: PtrSTR; dwFileAttributes: set; var psfi: SHFILEINFOA; cbFileInfo: integer; uFlags: set): integer 
	// END SHGetFileInfoA;
	
	proc SHGetFileInfoW(pszPath: PtrWSTR; dwFileAttributes: set; var psfi: SHFILEINFOW; cbFileInfo: integer; uFlags: set): integer 
	// END SHGetFileInfoW;
	
	proc SHGetFileInfo(pszPath: PtrSTR; dwFileAttributes: set; var psfi: SHFILEINFOA; cbFileInfo: integer; uFlags: set): integer 
	// END SHGetFileInfo;
	
	proc SHGetNewLinkInfoA(pszLinkTo: PtrSTR; pszDir: PtrSTR; pszName: PtrSTR; var pfMustCopy: BOOL; uFlags: set): BOOL 
	// END SHGetNewLinkInfoA;
	
	proc SHGetNewLinkInfoW(pszLinkTo: PtrWSTR; pszDir: PtrWSTR; pszName: PtrWSTR; var pfMustCopy: BOOL; uFlags: set): BOOL 
	// END SHGetNewLinkInfoW;
	
	proc SHGetNewLinkInfo(pszLinkTo: PtrSTR; pszDir: PtrSTR; pszName: PtrSTR; var pfMustCopy: BOOL; uFlags: set): BOOL 
	// END SHGetNewLinkInfo;
	
	proc CreatePropertySheetPageA(var p0: PROPSHEETPAGEA): Ptr_PSP 
	// END CreatePropertySheetPageA;
	
	proc CreatePropertySheetPageW(var p0: PROPSHEETPAGEW): Ptr_PSP 
	// END CreatePropertySheetPageW;
	
	proc DestroyPropertySheetPage(p0: Ptr_PSP): BOOL 
	// END DestroyPropertySheetPage;
	
	proc PropertySheetA(var p0: PROPSHEETHEADERA): integer 
	// END PropertySheetA;
	
	proc PropertySheetW(var p0: PROPSHEETHEADERW): integer 
	// END PropertySheetW;
	
	proc CreatePropertySheetPage(var p0: PROPSHEETPAGEA): Ptr_PSP 
	// END CreatePropertySheetPage;
	
	proc PropertySheet(var p0: PROPSHEETHEADERA): integer 
	// END PropertySheet;
	
	proc EnumPrintersA(Flags: set; Name: PtrSTR; Level: integer; var pPrinterEnum: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintersA;
	
	proc EnumPrintersW(Flags: set; Name: PtrWSTR; Level: integer; var pPrinterEnum: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintersW;
	
	proc EnumPrinters(Flags: set; Name: PtrSTR; Level: integer; var pPrinterEnum: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrinters;
	
	proc OpenPrinterA(pPrinterName: PtrSTR; var phPrinter: HANDLE; var pDefault: PRINTER_DEFAULTSA): BOOL 
	// END OpenPrinterA;
	
	proc OpenPrinterW(pPrinterName: PtrWSTR; var phPrinter: HANDLE; var pDefault: PRINTER_DEFAULTSW): BOOL 
	// END OpenPrinterW;
	
	proc OpenPrinter(pPrinterName: PtrSTR; var phPrinter: HANDLE; var pDefault: PRINTER_DEFAULTSA): BOOL 
	// END OpenPrinter;
	
	proc ResetPrinterA(hPrinter: HANDLE; var pDefault: PRINTER_DEFAULTSA): BOOL 
	// END ResetPrinterA;
	
	proc ResetPrinterW(hPrinter: HANDLE; var pDefault: PRINTER_DEFAULTSW): BOOL 
	// END ResetPrinterW;
	
	proc ResetPrinter(hPrinter: HANDLE; var pDefault: PRINTER_DEFAULTSA): BOOL 
	// END ResetPrinter;
	
	proc SetJobA(hPrinter: HANDLE; JobId: integer; Level: integer; var pJob: char; Command: integer): BOOL 
	// END SetJobA;
	
	proc SetJobW(hPrinter: HANDLE; JobId: integer; Level: integer; var pJob: char; Command: integer): BOOL 
	// END SetJobW;
	
	proc SetJob(hPrinter: HANDLE; JobId: integer; Level: integer; var pJob: char; Command: integer): BOOL 
	// END SetJob;
	
	proc GetJobA(hPrinter: HANDLE; JobId: integer; Level: integer; var pJob: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetJobA;
	
	proc GetJobW(hPrinter: HANDLE; JobId: integer; Level: integer; var pJob: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetJobW;
	
	proc GetJob(hPrinter: HANDLE; JobId: integer; Level: integer; var pJob: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetJob;
	
	proc EnumJobsA(hPrinter: HANDLE; FirstJob: integer; NoJobs: integer; Level: integer; var pJob: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumJobsA;
	
	proc EnumJobsW(hPrinter: HANDLE; FirstJob: integer; NoJobs: integer; Level: integer; var pJob: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumJobsW;
	
	proc EnumJobs(hPrinter: HANDLE; FirstJob: integer; NoJobs: integer; Level: integer; var pJob: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumJobs;
	
	proc AddPrinterA(pName: PtrSTR; Level: integer; var pPrinter: char): HANDLE 
	// END AddPrinterA;
	
	proc AddPrinterW(pName: PtrWSTR; Level: integer; var pPrinter: char): HANDLE 
	// END AddPrinterW;
	
	proc AddPrinter(pName: PtrSTR; Level: integer; var pPrinter: char): HANDLE 
	// END AddPrinter;
	
	proc DeletePrinter(hPrinter: HANDLE): BOOL 
	// END DeletePrinter;
	
	proc SetPrinterA(hPrinter: HANDLE; Level: integer; var pPrinter: char; Command: integer): BOOL 
	// END SetPrinterA;
	
	proc SetPrinterW(hPrinter: HANDLE; Level: integer; var pPrinter: char; Command: integer): BOOL 
	// END SetPrinterW;
	
	proc SetPrinter(hPrinter: HANDLE; Level: integer; var pPrinter: char; Command: integer): BOOL 
	// END SetPrinter;
	
	proc GetPrinterA(hPrinter: HANDLE; Level: integer; var pPrinter: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterA;
	
	proc GetPrinterW(hPrinter: HANDLE; Level: integer; var pPrinter: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterW;
	
	proc GetPrinter(hPrinter: HANDLE; Level: integer; var pPrinter: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinter;
	
	proc AddPrinterDriverA(pName: PtrSTR; Level: integer; var pDriverInfo: char): BOOL 
	// END AddPrinterDriverA;
	
	proc AddPrinterDriverW(pName: PtrWSTR; Level: integer; var pDriverInfo: char): BOOL 
	// END AddPrinterDriverW;
	
	proc AddPrinterDriver(pName: PtrSTR; Level: integer; var pDriverInfo: char): BOOL 
	// END AddPrinterDriver;
	
	proc EnumPrinterDriversA(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pDriverInfo: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrinterDriversA;
	
	proc EnumPrinterDriversW(pName: PtrWSTR; pEnvironment: PtrWSTR; Level: integer; var pDriverInfo: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrinterDriversW;
	
	proc EnumPrinterDrivers(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pDriverInfo: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrinterDrivers;
	
	proc GetPrinterDriverA(hPrinter: HANDLE; pEnvironment: PtrSTR; Level: integer; var pDriverInfo: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterDriverA;
	
	proc GetPrinterDriverW(hPrinter: HANDLE; pEnvironment: PtrWSTR; Level: integer; var pDriverInfo: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterDriverW;
	
	proc GetPrinterDriver(hPrinter: HANDLE; pEnvironment: PtrSTR; Level: integer; var pDriverInfo: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterDriver;
	
	proc GetPrinterDriverDirectoryA(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pDriverDirectory: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterDriverDirectoryA;
	
	proc GetPrinterDriverDirectoryW(pName: PtrWSTR; pEnvironment: PtrWSTR; Level: integer; var pDriverDirectory: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterDriverDirectoryW;
	
	proc GetPrinterDriverDirectory(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pDriverDirectory: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrinterDriverDirectory;
	
	proc DeletePrinterDriverA(pName: PtrSTR; pEnvironment: PtrSTR; pDriverName: PtrSTR): BOOL 
	// END DeletePrinterDriverA;
	
	proc DeletePrinterDriverW(pName: PtrWSTR; pEnvironment: PtrWSTR; pDriverName: PtrWSTR): BOOL 
	// END DeletePrinterDriverW;
	
	proc DeletePrinterDriver(pName: PtrSTR; pEnvironment: PtrSTR; pDriverName: PtrSTR): BOOL 
	// END DeletePrinterDriver;
	
	proc AddPrintProcessorA(pName: PtrSTR; pEnvironment: PtrSTR; pPathName: PtrSTR; pPrintProcessorName: PtrSTR): BOOL 
	// END AddPrintProcessorA;
	
	proc AddPrintProcessorW(pName: PtrWSTR; pEnvironment: PtrWSTR; pPathName: PtrWSTR; pPrintProcessorName: PtrWSTR): BOOL 
	// END AddPrintProcessorW;
	
	proc AddPrintProcessor(pName: PtrSTR; pEnvironment: PtrSTR; pPathName: PtrSTR; pPrintProcessorName: PtrSTR): BOOL 
	// END AddPrintProcessor;
	
	proc EnumPrintProcessorsA(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pPrintProcessorInfo: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintProcessorsA;
	
	proc EnumPrintProcessorsW(pName: PtrWSTR; pEnvironment: PtrWSTR; Level: integer; var pPrintProcessorInfo: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintProcessorsW;
	
	proc EnumPrintProcessors(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pPrintProcessorInfo: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintProcessors;
	
	proc GetPrintProcessorDirectoryA(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pPrintProcessorInfo: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrintProcessorDirectoryA;
	
	proc GetPrintProcessorDirectoryW(pName: PtrWSTR; pEnvironment: PtrWSTR; Level: integer; var pPrintProcessorInfo: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrintProcessorDirectoryW;
	
	proc GetPrintProcessorDirectory(pName: PtrSTR; pEnvironment: PtrSTR; Level: integer; var pPrintProcessorInfo: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetPrintProcessorDirectory;
	
	proc EnumPrintProcessorDatatypesA(pName: PtrSTR; pPrintProcessorName: PtrSTR; Level: integer; var pDatatypes: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintProcessorDatatypesA;
	
	proc EnumPrintProcessorDatatypesW(pName: PtrWSTR; pPrintProcessorName: PtrWSTR; Level: integer; var pDatatypes: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintProcessorDatatypesW;
	
	proc EnumPrintProcessorDatatypes(pName: PtrSTR; pPrintProcessorName: PtrSTR; Level: integer; var pDatatypes: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPrintProcessorDatatypes;
	
	proc DeletePrintProcessorA(pName: PtrSTR; pEnvironment: PtrSTR; pPrintProcessorName: PtrSTR): BOOL 
	// END DeletePrintProcessorA;
	
	proc DeletePrintProcessorW(pName: PtrWSTR; pEnvironment: PtrWSTR; pPrintProcessorName: PtrWSTR): BOOL 
	// END DeletePrintProcessorW;
	
	proc DeletePrintProcessor(pName: PtrSTR; pEnvironment: PtrSTR; pPrintProcessorName: PtrSTR): BOOL 
	// END DeletePrintProcessor;
	
	proc StartDocPrinterA(hPrinter: HANDLE; Level: integer; var pDocInfo: char): integer 
	// END StartDocPrinterA;
	
	proc StartDocPrinterW(hPrinter: HANDLE; Level: integer; var pDocInfo: char): integer 
	// END StartDocPrinterW;
	
	proc StartDocPrinter(hPrinter: HANDLE; Level: integer; var pDocInfo: char): integer 
	// END StartDocPrinter;
	
	proc StartPagePrinter(hPrinter: HANDLE): BOOL 
	// END StartPagePrinter;
	
	proc WritePrinter(hPrinter: HANDLE; pBuf: PtrVoid; cbBuf: integer; var pcWritten: integer): BOOL 
	// END WritePrinter;
	
	proc EndPagePrinter(hPrinter: HANDLE): BOOL 
	// END EndPagePrinter;
	
	proc AbortPrinter(hPrinter: HANDLE): BOOL 
	// END AbortPrinter;
	
	proc ReadPrinter(hPrinter: HANDLE; pBuf: PtrVoid; cbBuf: integer; var pNoBytesRead: integer): BOOL 
	// END ReadPrinter;
	
	proc EndDocPrinter(hPrinter: HANDLE): BOOL 
	// END EndDocPrinter;
	
	proc AddJobA(hPrinter: HANDLE; Level: integer; var pData: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END AddJobA;
	
	proc AddJobW(hPrinter: HANDLE; Level: integer; var pData: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END AddJobW;
	
	proc AddJob(hPrinter: HANDLE; Level: integer; var pData: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END AddJob;
	
	proc ScheduleJob(hPrinter: HANDLE; JobId: integer): BOOL 
	// END ScheduleJob;
	
	proc PrinterProperties(hWnd: HWND; hPrinter: HANDLE): BOOL 
	// END PrinterProperties;
	
	proc DocumentPropertiesA(hWnd: HWND; hPrinter: HANDLE; pDeviceName: PtrSTR; var pDevModeOutput: DEVMODEA; var pDevModeInput: DEVMODEA; fMode: set): integer 
	// END DocumentPropertiesA;
	
	proc DocumentPropertiesW(hWnd: HWND; hPrinter: HANDLE; pDeviceName: PtrWSTR; var pDevModeOutput: DEVMODEW; var pDevModeInput: DEVMODEW; fMode: set): integer 
	// END DocumentPropertiesW;
	
	proc DocumentProperties(hWnd: HWND; hPrinter: HANDLE; pDeviceName: PtrSTR; var pDevModeOutput: DEVMODEA; var pDevModeInput: DEVMODEA; fMode: set): integer 
	// END DocumentProperties;
	
	proc AdvancedDocumentPropertiesA(hWnd: HWND; hPrinter: HANDLE; pDeviceName: PtrSTR; var pDevModeOutput: DEVMODEA; var pDevModeInput: DEVMODEA): integer 
	// END AdvancedDocumentPropertiesA;
	
	proc AdvancedDocumentPropertiesW(hWnd: HWND; hPrinter: HANDLE; pDeviceName: PtrWSTR; var pDevModeOutput: DEVMODEW; var pDevModeInput: DEVMODEW): integer 
	// END AdvancedDocumentPropertiesW;
	
	proc AdvancedDocumentProperties(hWnd: HWND; hPrinter: HANDLE; pDeviceName: PtrSTR; var pDevModeOutput: DEVMODEA; var pDevModeInput: DEVMODEA): integer 
	// END AdvancedDocumentProperties;
	
	proc GetPrinterDataA(hPrinter: HANDLE; pValueName: PtrSTR; var pType: integer; var pData: char; nSize: integer; var pcbNeeded: integer): integer 
	// END GetPrinterDataA;
	
	proc GetPrinterDataW(hPrinter: HANDLE; pValueName: PtrWSTR; var pType: integer; var pData: char; nSize: integer; var pcbNeeded: integer): integer 
	// END GetPrinterDataW;
	
	proc GetPrinterData(hPrinter: HANDLE; pValueName: PtrSTR; var pType: integer; var pData: char; nSize: integer; var pcbNeeded: integer): integer 
	// END GetPrinterData;
	
	proc SetPrinterDataA(hPrinter: HANDLE; pValueName: PtrSTR; Type: integer; var pData: char; cbData: integer): integer 
	// END SetPrinterDataA;
	
	proc SetPrinterDataW(hPrinter: HANDLE; pValueName: PtrWSTR; Type: integer; var pData: char; cbData: integer): integer 
	// END SetPrinterDataW;
	
	proc SetPrinterData(hPrinter: HANDLE; pValueName: PtrSTR; Type: integer; var pData: char; cbData: integer): integer 
	// END SetPrinterData;
	
	proc WaitForPrinterChange(hPrinter: HANDLE; Flags: set): integer 
	// END WaitForPrinterChange;
	
	proc FindFirstPrinterChangeNotification(hPrinter: HANDLE; fdwFlags: set; fdwOptions: integer; pPrinterNotifyOptions: PtrVoid): HANDLE 
	// END FindFirstPrinterChangeNotification;
	
	proc FindNextPrinterChangeNotification(hChange: HANDLE; var pdwChange: integer; pvReserved: PtrVoid; ppPrinterNotifyInfo: unsafe pointer to (* ? *)carray of PtrVoid): BOOL 
	// END FindNextPrinterChangeNotification;
	
	proc FreePrinterNotifyInfo(var pPrinterNotifyInfo: PRINTER_NOTIFY_INFO): BOOL 
	// END FreePrinterNotifyInfo;
	
	proc FindClosePrinterChangeNotification(hChange: HANDLE): BOOL 
	// END FindClosePrinterChangeNotification;
	
	proc PrinterMessageBoxA(hPrinter: HANDLE; Error: integer; hWnd: HWND; pText: PtrSTR; pCaption: PtrSTR; dwType: integer): integer 
	// END PrinterMessageBoxA;
	
	proc PrinterMessageBoxW(hPrinter: HANDLE; Error: integer; hWnd: HWND; pText: PtrWSTR; pCaption: PtrWSTR; dwType: integer): integer 
	// END PrinterMessageBoxW;
	
	proc PrinterMessageBox(hPrinter: HANDLE; Error: integer; hWnd: HWND; pText: PtrSTR; pCaption: PtrSTR; dwType: integer): integer 
	// END PrinterMessageBox;
	
	proc ClosePrinter(hPrinter: HANDLE): BOOL 
	// END ClosePrinter;
	
	proc AddFormA(hPrinter: HANDLE; Level: integer; var pForm: char): BOOL 
	// END AddFormA;
	
	proc AddFormW(hPrinter: HANDLE; Level: integer; var pForm: char): BOOL 
	// END AddFormW;
	
	proc AddForm(hPrinter: HANDLE; Level: integer; var pForm: char): BOOL 
	// END AddForm;
	
	proc DeleteFormA(hPrinter: HANDLE; pFormName: PtrSTR): BOOL 
	// END DeleteFormA;
	
	proc DeleteFormW(hPrinter: HANDLE; pFormName: PtrWSTR): BOOL 
	// END DeleteFormW;
	
	proc DeleteForm(hPrinter: HANDLE; pFormName: PtrSTR): BOOL 
	// END DeleteForm;
	
	proc GetFormA(hPrinter: HANDLE; pFormName: PtrSTR; Level: integer; var pForm: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetFormA;
	
	proc GetFormW(hPrinter: HANDLE; pFormName: PtrWSTR; Level: integer; var pForm: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetFormW;
	
	proc GetForm(hPrinter: HANDLE; pFormName: PtrSTR; Level: integer; var pForm: char; cbBuf: integer; var pcbNeeded: integer): BOOL 
	// END GetForm;
	
	proc SetFormA(hPrinter: HANDLE; pFormName: PtrSTR; Level: integer; var pForm: char): BOOL 
	// END SetFormA;
	
	proc SetFormW(hPrinter: HANDLE; pFormName: PtrWSTR; Level: integer; var pForm: char): BOOL 
	// END SetFormW;
	
	proc SetForm(hPrinter: HANDLE; pFormName: PtrSTR; Level: integer; var pForm: char): BOOL 
	// END SetForm;
	
	proc EnumFormsA(hPrinter: HANDLE; Level: integer; var pForm: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumFormsA;
	
	proc EnumFormsW(hPrinter: HANDLE; Level: integer; var pForm: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumFormsW;
	
	proc EnumForms(hPrinter: HANDLE; Level: integer; var pForm: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumForms;
	
	proc EnumMonitorsA(pName: PtrSTR; Level: integer; var pMonitors: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumMonitorsA;
	
	proc EnumMonitorsW(pName: PtrWSTR; Level: integer; var pMonitors: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumMonitorsW;
	
	proc EnumMonitors(pName: PtrSTR; Level: integer; var pMonitors: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumMonitors;
	
	proc AddMonitorA(pName: PtrSTR; Level: integer; var pMonitors: char): BOOL 
	// END AddMonitorA;
	
	proc AddMonitorW(pName: PtrWSTR; Level: integer; var pMonitors: char): BOOL 
	// END AddMonitorW;
	
	proc AddMonitor(pName: PtrSTR; Level: integer; var pMonitors: char): BOOL 
	// END AddMonitor;
	
	proc DeleteMonitorA(pName: PtrSTR; pEnvironment: PtrSTR; pMonitorName: PtrSTR): BOOL 
	// END DeleteMonitorA;
	
	proc DeleteMonitorW(pName: PtrWSTR; pEnvironment: PtrWSTR; pMonitorName: PtrWSTR): BOOL 
	// END DeleteMonitorW;
	
	proc DeleteMonitor(pName: PtrSTR; pEnvironment: PtrSTR; pMonitorName: PtrSTR): BOOL 
	// END DeleteMonitor;
	
	proc EnumPortsA(pName: PtrSTR; Level: integer; var pPorts: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPortsA;
	
	proc EnumPortsW(pName: PtrWSTR; Level: integer; var pPorts: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPortsW;
	
	proc EnumPorts(pName: PtrSTR; Level: integer; var pPorts: char; cbBuf: integer; var pcbNeeded: integer; var pcReturned: integer): BOOL 
	// END EnumPorts;
	
	proc AddPortA(pName: PtrSTR; hWnd: HWND; pMonitorName: PtrSTR): BOOL 
	// END AddPortA;
	
	proc AddPortW(pName: PtrWSTR; hWnd: HWND; pMonitorName: PtrWSTR): BOOL 
	// END AddPortW;
	
	proc AddPort(pName: PtrSTR; hWnd: HWND; pMonitorName: PtrSTR): BOOL 
	// END AddPort;
	
	proc ConfigurePortA(pName: PtrSTR; hWnd: HWND; pPortName: PtrSTR): BOOL 
	// END ConfigurePortA;
	
	proc ConfigurePortW(pName: PtrWSTR; hWnd: HWND; pPortName: PtrWSTR): BOOL 
	// END ConfigurePortW;
	
	proc ConfigurePort(pName: PtrSTR; hWnd: HWND; pPortName: PtrSTR): BOOL 
	// END ConfigurePort;
	
	proc DeletePortA(pName: PtrSTR; hWnd: HWND; pPortName: PtrSTR): BOOL 
	// END DeletePortA;
	
	proc DeletePortW(pName: PtrWSTR; hWnd: HWND; pPortName: PtrWSTR): BOOL 
	// END DeletePortW;
	
	proc DeletePort(pName: PtrSTR; hWnd: HWND; pPortName: PtrSTR): BOOL 
	// END DeletePort;
	
	proc AddPrinterConnectionA(pName: PtrSTR): BOOL 
	// END AddPrinterConnectionA;
	
	proc AddPrinterConnectionW(pName: PtrWSTR): BOOL 
	// END AddPrinterConnectionW;
	
	proc AddPrinterConnection(pName: PtrSTR): BOOL 
	// END AddPrinterConnection;
	
	proc DeletePrinterConnectionA(pName: PtrSTR): BOOL 
	// END DeletePrinterConnectionA;
	
	proc DeletePrinterConnectionW(pName: PtrWSTR): BOOL 
	// END DeletePrinterConnectionW;
	
	proc DeletePrinterConnection(pName: PtrSTR): BOOL 
	// END DeletePrinterConnection;
	
	proc ConnectToPrinterDlg(hwnd: HWND; Flags: set): HANDLE 
	// END ConnectToPrinterDlg;
	
	proc AddPrintProvidorA(pName: PtrSTR; level: integer; var pProvidorInfo: char): BOOL 
	// END AddPrintProvidorA;
	
	proc AddPrintProvidorW(pName: PtrWSTR; level: integer; var pProvidorInfo: char): BOOL 
	// END AddPrintProvidorW;
	
	proc AddPrintProvidor(pName: PtrSTR; level: integer; var pProvidorInfo: char): BOOL 
	// END AddPrintProvidor;
	
	proc DeletePrintProvidorA(pName: PtrSTR; pEnvironment: PtrSTR; pPrintProvidorName: PtrSTR): BOOL 
	// END DeletePrintProvidorA;
	
	proc DeletePrintProvidorW(pName: PtrWSTR; pEnvironment: PtrWSTR; pPrintProvidorName: PtrWSTR): BOOL 
	// END DeletePrintProvidorW;
	
	proc DeletePrintProvidor(pName: PtrSTR; pEnvironment: PtrSTR; pPrintProvidorName: PtrSTR): BOOL 
	// END DeletePrintProvidor;
	
	proc ChangeServiceConfigA(hService: SC_HANDLE; dwServiceType: set; dwStartType: integer; dwErrorControl: integer; lpBinaryPathName: PtrSTR; lpLoadOrderGroup: PtrSTR; var lpdwTagId: integer; lpDependencies: PtrSTR; lpServiceStartName: PtrSTR; lpPassword: PtrSTR; lpDisplayName: PtrSTR): BOOL 
	// END ChangeServiceConfigA;
	
	proc ChangeServiceConfigW(hService: SC_HANDLE; dwServiceType: set; dwStartType: integer; dwErrorControl: integer; lpBinaryPathName: PtrWSTR; lpLoadOrderGroup: PtrWSTR; var lpdwTagId: integer; lpDependencies: PtrWSTR; lpServiceStartName: PtrWSTR; lpPassword: PtrWSTR; lpDisplayName: PtrWSTR): BOOL 
	// END ChangeServiceConfigW;
	
	proc ChangeServiceConfig(hService: SC_HANDLE; dwServiceType: set; dwStartType: integer; dwErrorControl: integer; lpBinaryPathName: PtrSTR; lpLoadOrderGroup: PtrSTR; var lpdwTagId: integer; lpDependencies: PtrSTR; lpServiceStartName: PtrSTR; lpPassword: PtrSTR; lpDisplayName: PtrSTR): BOOL 
	// END ChangeServiceConfig;
	
	proc CloseServiceHandle(hSCObject: SC_HANDLE): BOOL 
	// END CloseServiceHandle;
	
	proc ControlService(hService: SC_HANDLE; dwControl: integer; var lpServiceStatus: SERVICE_STATUS): BOOL 
	// END ControlService;
	
	proc CreateServiceA(hSCManager: SC_HANDLE; lpServiceName: PtrSTR; lpDisplayName: PtrSTR; dwDesiredAccess: set; dwServiceType: set; dwStartType: integer; dwErrorControl: integer; lpBinaryPathName: PtrSTR; lpLoadOrderGroup: PtrSTR; var lpdwTagId: integer; lpDependencies: PtrSTR; lpServiceStartName: PtrSTR; lpPassword: PtrSTR): SC_HANDLE 
	// END CreateServiceA;
	
	proc CreateServiceW(hSCManager: SC_HANDLE; lpServiceName: PtrWSTR; lpDisplayName: PtrWSTR; dwDesiredAccess: set; dwServiceType: set; dwStartType: integer; dwErrorControl: integer; lpBinaryPathName: PtrWSTR; lpLoadOrderGroup: PtrWSTR; var lpdwTagId: integer; lpDependencies: PtrWSTR; lpServiceStartName: PtrWSTR; lpPassword: PtrWSTR): SC_HANDLE 
	// END CreateServiceW;
	
	proc CreateService(hSCManager: SC_HANDLE; lpServiceName: PtrSTR; lpDisplayName: PtrSTR; dwDesiredAccess: set; dwServiceType: set; dwStartType: integer; dwErrorControl: integer; lpBinaryPathName: PtrSTR; lpLoadOrderGroup: PtrSTR; var lpdwTagId: integer; lpDependencies: PtrSTR; lpServiceStartName: PtrSTR; lpPassword: PtrSTR): SC_HANDLE 
	// END CreateService;
	
	proc DeleteService(hService: SC_HANDLE): BOOL 
	// END DeleteService;
	
	proc EnumDependentServicesA(hService: SC_HANDLE; dwServiceState: integer; var lpServices: ENUM_SERVICE_STATUSA; cbBufSize: integer; var pcbBytesNeeded: integer; var lpServicesReturned: integer): BOOL 
	// END EnumDependentServicesA;
	
	proc EnumDependentServicesW(hService: SC_HANDLE; dwServiceState: integer; var lpServices: ENUM_SERVICE_STATUSW; cbBufSize: integer; var pcbBytesNeeded: integer; var lpServicesReturned: integer): BOOL 
	// END EnumDependentServicesW;
	
	proc EnumDependentServices(hService: SC_HANDLE; dwServiceState: integer; var lpServices: ENUM_SERVICE_STATUSA; cbBufSize: integer; var pcbBytesNeeded: integer; var lpServicesReturned: integer): BOOL 
	// END EnumDependentServices;
	
	proc EnumServicesStatusA(hSCManager: SC_HANDLE; dwServiceType: set; dwServiceState: integer; var lpServices: ENUM_SERVICE_STATUSA; cbBufSize: integer; var pcbBytesNeeded: integer; var lpServicesReturned: integer; var lpResumeHandle: integer): BOOL 
	// END EnumServicesStatusA;
	
	proc EnumServicesStatusW(hSCManager: SC_HANDLE; dwServiceType: set; dwServiceState: integer; var lpServices: ENUM_SERVICE_STATUSW; cbBufSize: integer; var pcbBytesNeeded: integer; var lpServicesReturned: integer; var lpResumeHandle: integer): BOOL 
	// END EnumServicesStatusW;
	
	proc EnumServicesStatus(hSCManager: SC_HANDLE; dwServiceType: set; dwServiceState: integer; var lpServices: ENUM_SERVICE_STATUSA; cbBufSize: integer; var pcbBytesNeeded: integer; var lpServicesReturned: integer; var lpResumeHandle: integer): BOOL 
	// END EnumServicesStatus;
	
	proc GetServiceKeyNameA(hSCManager: SC_HANDLE; lpDisplayName: PtrSTR; lpServiceName: PtrSTR; var lpcchBuffer: integer): BOOL 
	// END GetServiceKeyNameA;
	
	proc GetServiceKeyNameW(hSCManager: SC_HANDLE; lpDisplayName: PtrWSTR; lpServiceName: PtrWSTR; var lpcchBuffer: integer): BOOL 
	// END GetServiceKeyNameW;
	
	proc GetServiceKeyName(hSCManager: SC_HANDLE; lpDisplayName: PtrSTR; lpServiceName: PtrSTR; var lpcchBuffer: integer): BOOL 
	// END GetServiceKeyName;
	
	proc GetServiceDisplayNameA(hSCManager: SC_HANDLE; lpServiceName: PtrSTR; lpDisplayName: PtrSTR; var lpcchBuffer: integer): BOOL 
	// END GetServiceDisplayNameA;
	
	proc GetServiceDisplayNameW(hSCManager: SC_HANDLE; lpServiceName: PtrWSTR; lpDisplayName: PtrWSTR; var lpcchBuffer: integer): BOOL 
	// END GetServiceDisplayNameW;
	
	proc GetServiceDisplayName(hSCManager: SC_HANDLE; lpServiceName: PtrSTR; lpDisplayName: PtrSTR; var lpcchBuffer: integer): BOOL 
	// END GetServiceDisplayName;
	
	proc LockServiceDatabase(hSCManager: SC_HANDLE): SC_LOCK 
	// END LockServiceDatabase;
	
	proc NotifyBootConfigStatus(BootAcceptable: BOOL): BOOL 
	// END NotifyBootConfigStatus;
	
	proc OpenSCManagerA(lpMachineName: PtrSTR; lpDatabaseName: PtrSTR; dwDesiredAccess: set): SC_HANDLE 
	// END OpenSCManagerA;
	
	proc OpenSCManagerW(lpMachineName: PtrWSTR; lpDatabaseName: PtrWSTR; dwDesiredAccess: set): SC_HANDLE 
	// END OpenSCManagerW;
	
	proc OpenSCManager(lpMachineName: PtrSTR; lpDatabaseName: PtrSTR; dwDesiredAccess: set): SC_HANDLE 
	// END OpenSCManager;
	
	proc OpenServiceA(hSCManager: SC_HANDLE; lpServiceName: PtrSTR; dwDesiredAccess: set): SC_HANDLE 
	// END OpenServiceA;
	
	proc OpenServiceW(hSCManager: SC_HANDLE; lpServiceName: PtrWSTR; dwDesiredAccess: set): SC_HANDLE 
	// END OpenServiceW;
	
	proc OpenService(hSCManager: SC_HANDLE; lpServiceName: PtrSTR; dwDesiredAccess: set): SC_HANDLE 
	// END OpenService;
	
	proc QueryServiceConfigA(hService: SC_HANDLE; var lpServiceConfig: QUERY_SERVICE_CONFIGA; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceConfigA;
	
	proc QueryServiceConfigW(hService: SC_HANDLE; var lpServiceConfig: QUERY_SERVICE_CONFIGW; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceConfigW;
	
	proc QueryServiceConfig(hService: SC_HANDLE; var lpServiceConfig: QUERY_SERVICE_CONFIGA; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceConfig;
	
	proc QueryServiceLockStatusA(hSCManager: SC_HANDLE; var lpLockStatus: QUERY_SERVICE_LOCK_STATUSA; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceLockStatusA;
	
	proc QueryServiceLockStatusW(hSCManager: SC_HANDLE; var lpLockStatus: QUERY_SERVICE_LOCK_STATUSW; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceLockStatusW;
	
	proc QueryServiceLockStatus(hSCManager: SC_HANDLE; var lpLockStatus: QUERY_SERVICE_LOCK_STATUSA; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceLockStatus;
	
	proc QueryServiceObjectSecurity(hService: SC_HANDLE; dwSecurityInformation: SECURITY_INFORMATION; lpSecurityDescriptor: PSECURITY_DESCRIPTOR; cbBufSize: integer; var pcbBytesNeeded: integer): BOOL 
	// END QueryServiceObjectSecurity;
	
	proc QueryServiceStatus(hService: SC_HANDLE; var lpServiceStatus: SERVICE_STATUS): BOOL 
	// END QueryServiceStatus;
	
	proc RegisterServiceCtrlHandlerA(lpServiceName: PtrSTR; lpHandlerProc: HANDLER_FUNCTION): SERVICE_STATUS_HANDLE 
	// END RegisterServiceCtrlHandlerA;
	
	proc RegisterServiceCtrlHandlerW(lpServiceName: PtrWSTR; lpHandlerProc: HANDLER_FUNCTION): SERVICE_STATUS_HANDLE 
	// END RegisterServiceCtrlHandlerW;
	
	proc RegisterServiceCtrlHandler(lpServiceName: PtrSTR; lpHandlerProc: HANDLER_FUNCTION): SERVICE_STATUS_HANDLE 
	// END RegisterServiceCtrlHandler;
	
	proc SetServiceObjectSecurity(hService: SC_HANDLE; dwSecurityInformation: SECURITY_INFORMATION; lpSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL 
	// END SetServiceObjectSecurity;
	
	proc SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE; var lpServiceStatus: SERVICE_STATUS): BOOL 
	// END SetServiceStatus;
	
	proc StartServiceCtrlDispatcherA(var lpServiceStartTable: SERVICE_TABLE_ENTRYA): BOOL 
	// END StartServiceCtrlDispatcherA;
	
	proc StartServiceCtrlDispatcherW(var lpServiceStartTable: SERVICE_TABLE_ENTRYW): BOOL 
	// END StartServiceCtrlDispatcherW;
	
	proc StartServiceCtrlDispatcher(var lpServiceStartTable: SERVICE_TABLE_ENTRYA): BOOL 
	// END StartServiceCtrlDispatcher;
	
	proc StartServiceA(hService: SC_HANDLE; dwNumServiceArgs: integer; var lpServiceArgVectors: PtrSTR): BOOL 
	// END StartServiceA;
	
	proc StartServiceW(hService: SC_HANDLE; dwNumServiceArgs: integer; lpServiceArgVectors: unsafe pointer to (* ? *)carray of PtrWSTR): BOOL 
	// END StartServiceW;
	
	proc StartService(hService: SC_HANDLE; dwNumServiceArgs: integer; var lpServiceArgVectors: PtrSTR): BOOL 
	// END StartService;
	
	proc UnlockServiceDatabase(ScLock: SC_LOCK): BOOL 
	// END UnlockServiceDatabase;
	
	proc RtlUnwind(targetFrame: PtrVoid; targetIp: integer; excpRec: PtrEXCEPTION_RECORD; retVal: integer) 
// END RtlUnwind;

end WinApi
