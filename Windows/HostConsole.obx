module HostConsole
	
	(* project	= "BlackBox"
	   organization	= "blackboxframework.org/"
	   contributors	= "A. V. Shiryaev"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20170418, center #158, adding low-level logging to console
	   - 20170524, center #153, adding basic console I/O
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import WinApi, SYSTEM
	
	var 
		open: boolean
		stdIn, stdOut: integer
		
		// for logging
		on, showPrefix, lineStarted: boolean
		lineNr, indent, offAtLineNr: integer
	
	
	// ------ interface to console I/O ------
	
	proc Open*
		var 
			res: integer
	begin 
		if ~open then
			res := WinApi.AllocConsole()
			stdIn := WinApi.GetStdHandle(WinApi.STD_INPUT_HANDLE)
			assert(stdIn # WinApi.INVALID_HANDLE_VALUE)
			stdOut := WinApi.GetStdHandle(WinApi.STD_OUTPUT_HANDLE)
			assert(stdOut # WinApi.INVALID_HANDLE_VALUE)
			open := true 
		end 
	end Open
	
	proc ReadLn*(var line: array of wchar) 
		var 
			buf: array 256 of char
			res, read: integer
	begin 
		Open
		line := ""
		res := WinApi.ReadFile(stdIn, SYSTEM.ADR(buf), len(buf), read, nil)
		if (res # 0) & (read >= 2) then // removes CRLF
			buf[read - 2] := 0x
			if buf # "" then
				res := WinApi.MultiByteToWideChar(WinApi.CP_OEMCP, {}, buf, len(buf), line, len(line) - 1)
				if (res > 0) & (res < len(line)) then
					line[res] := 0x 
				else 
					line := "" 
				end  
			end  
		end 
	end ReadLn
	
	proc WriteStr*(in str: array of wchar) 
		var 
			res, remaining, i, n: integer
			si: WinApi.PtrWSTR
			buf: array 256 of char
	begin 
		Open
		remaining := len(str)
		i := 0
		while remaining > 0 do 
			n := min(remaining, len(buf) div 2)
			si := SYSTEM.VAL(WinApi.PtrWSTR, SYSTEM.ADR(str[i]))
			res := WinApi.WideCharToMultiByte(WinApi.CP_OEMCP, {}, si, n, buf, len(buf), nil, nil)
			if ~((res > 0) & (res <= len(buf))) then
				buf := "*** WideCharToMultiByte error in HostConsole.WriteStr ***"
				res := len(buf) 
			end 
			res := WinApi.WriteFile(stdOut, SYSTEM.ADR(buf), res, nil, nil)
			res := WinApi.FlushFileBuffers(stdOut)
			inc(i, n)
			dec(remaining, n) 
		end 
	end WriteStr
	
	proc WriteSStr*(in str: array of char) 
		var 
			res: integer
	begin 
		Open
		res := WinApi.WriteFile(stdOut, SYSTEM.ADR(str), len(str), nil, nil)
		res := WinApi.FlushFileBuffers(stdOut)
	end WriteSStr
	
	proc WriteLn*
		var 
			crlf: array 2 of char
			res: integer
	begin 
		Open
		crlf[0] := 0dx
		crlf[1] := 0ax
		res := WinApi.WriteFile(stdOut, SYSTEM.ADR(crlf), len(crlf), nil, nil)
	end WriteLn
	
	
	// ------ logging support ------
	
	proc OpenLog*
	begin 
		Open
		showPrefix := true
	end OpenLog
	
	proc On*
	begin 
		offAtLineNr := -1
		on := true
	end On
	
	proc OnFor*(nofLines: integer) 
	begin 
		offAtLineNr := lineNr + nofLines
		on := true
	end OnFor
	
	proc Off*
	begin 
		on := false
	end Off
	
	proc Indent*
	begin 
		inc(indent)
	end Indent
	
	proc Undent*
	begin 
		dec(indent)
	end Undent
	
	proc String*(in str: array of wchar) 
	begin 
		if on & (str # "") then
			LinePrefix
			WriteStr(str) 
		end 
	end String
	
	proc Char*(ch: wchar) 
		var 
			s: array 2 of wchar
	begin 
		s[0] := ch
		s[1] := 0x
		String(s)
	end Char
	
	proc Bool*(x: boolean) 
	begin 
		if x then
			String(" $TRUE") 
		else 
			String(" $FALSE") 
		end 
	end Bool
	
	proc IntToString(x: longint; var s: array of wchar)  // copied from Strings
		const 
			minLongIntRev = "8085774586302733229"
		var 
			j, k: integer
			ch: wchar
			a: array 32 of wchar
	begin 
		if x # min(longint) then
			if x < 0 then
				s[0] := "-"
				k := 1
				x := -x 
			else 
				k := 0 
			end 
			j := 0
			repeat 
				a[j] := wchr(short(x mod 10 + ord("0")))
				x := x div 10
				inc(j) 
			until x = 0  
		else 
			a := minLongIntRev
			s[0] := "-"
			k := 1
			j := len(minLongIntRev) 
		end 
		assert(k + j < len(s), 23)
		repeat 
			dec(j)
			ch := a[j]
			s[k] := ch
			inc(k) 
		until j = 0 
		s[k] := 0x
	end IntToString
	
	proc Int*(x: longint) 
		var 
			str: array 24 of wchar
	begin 
		IntToString(x, str)
		String(" " + str)
	end Int
	
	// outputs the line number and indentation level followed by repeated "  " according to indentation level
	proc LinePrefix
		var 
			i: integer
			lStr, iStr: array 12 of wchar
	begin 
		if ~lineStarted then
			lineStarted := true
			if showPrefix then
				IntToString(lineNr, lStr)
				IntToString(indent, iStr)
				String(lStr + ":" + iStr + " ") 
			end 
			for i:= 1 to indent do 
				String("  ") 
			end  
		end 
	end LinePrefix
	
	proc Ln*
	begin 
		if on then
			LinePrefix
			WriteLn
			inc(lineNr)
			lineStarted := false
			if (offAtLineNr # -1) & (lineNr >= offAtLineNr) then
				on := false 
			end  
		end 
	end Ln
	
	proc Pause*
		var 
			line: array 256 of wchar
	begin 
		WriteSStr("Press RETURN to continue . . .")
		WriteLn
		ReadLn(line)
		if line = "HALT" then
			halt(0) 
		end 
	end Pause
	
	proc Reset*
	begin 
		On
		if lineStarted then
			Ln 
		end 
		lineNr := 1
		indent := 0
	end Reset

begin
	Reset
end HostConsole
