module HostMechanisms
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20070131, bh, Unicode support
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	// TODO: Add drag'n drop support
	
	import 
		Services, Ports, (* Stores, *)Views, Controllers, Properties, (* Dialog, *)
		Mechanisms, Containers, Documents,  // Windows,
		HostPorts
	
	
	const 
		handleSize = Ports.point * 11 div 2
		clipMiddleHandle = handleSize div 2 + 2 * Ports.point
		
		escape = -2
		
		fixed = 31 // controller option
	
	
	type 
		Hook = pointer to record (Mechanisms.Hook) end 
	
	
	// focus borders
	
	proc Fixed(host: Views.Frame; v: Views.View): boolean 
		var 
			sp: Properties.ResizePref
			c: Containers.Controller
	begin 
		c := host.view(Containers.View).ThisController()
		if c.opts * {Containers.noCaret, Documents.pageWidth..Documents.winHeight, fixed} # {} then
			return true 
		end 
		sp.fixed := false
		Views.HandlePropMsg(v, sp)
		return sp.fixed
	end Fixed
	
	proc PaintFocusBorder(f: Views.Frame; focus: Views.View; l, t, r, b: integer) 
		var 
			u, s, w, h, mx, my, l0, t0, r0, b0: integer
		
		proc PaintHandle(x, y: integer; l, t, r, b: boolean) 
		begin 
			if l then
				f.DrawRect(x - u, y, x, y + s, Ports.fill, Ports.background) 
			end 
			if t then
				f.DrawRect(x, y - u, x + s, y, Ports.fill, Ports.background) 
			end 
			if r then
				f.DrawRect(x + s, y, x + s + u, y + s, Ports.fill, Ports.background) 
			end 
			if b then
				f.DrawRect(x, y + s, x + s, y + s + u, Ports.fill, Ports.background) 
			end 
			f.DrawRect(x, y, x + s, y + s, Ports.fill, Ports.defaultColor)
		end PaintHandle
	
	begin 
		f.rider.GetRect(l0, t0, r0, b0)
		s := (handleSize - f.dot) div f.unit
		f.rider.SetRect(l0 - s, t0 - s, r0 + s, b0 + s)
		u := f.dot
		s := s * f.unit
		w := r - l
		h := b - t
		f.DrawRect(l, t - s, r, t, Ports.fill, Ports.background)
		f.DrawRect(l, b, r, b + s, Ports.fill, Ports.background)
		f.DrawRect(l - s, t - s, l, b + s, Ports.fill, Ports.background)
		f.DrawRect(r, t - s, r + s, b + s, Ports.fill, Ports.background)
		dec(s, u)
		f.MarkRect(l, t - s, r, t, Ports.fill, HostPorts.focusPat, Ports.show)
		f.MarkRect(l, b, r, b + s, Ports.fill, HostPorts.focusPat, Ports.show)
		f.MarkRect(l - s, t - s, l, b + s, Ports.fill, HostPorts.focusPat, Ports.show)
		f.MarkRect(r, t - s, r + s, b + s, Ports.fill, HostPorts.focusPat, Ports.show)
		if ~Fixed(f, focus) then
			PaintHandle(l - s, t - s, false, false, true, true)
			PaintHandle(r, t - s, true, false, false, true)
			PaintHandle(l - s, b, false, true, true, false)
			PaintHandle(r, b, true, true, false, false)
			if w > 2 * clipMiddleHandle then
				mx := (l + r - s) div 2
				PaintHandle(mx, t - s, true, false, true, false)
				PaintHandle(mx, b, true, false, true, false) 
			end 
			if h > 2 * clipMiddleHandle then
				my := (t + b - s) div 2
				PaintHandle(l - s, my, false, true, false, true)
				PaintHandle(r, my, false, true, false, true) 
			end  
		end 
		f.DrawRect(l - u, t - u, r + u, b + u, u, Ports.defaultColor)
		f.rider.SetRect(l0, t0, r0, b0)
	end PaintFocusBorder
	
	proc (hook: Hook) FocusBorderCursor*(f: Views.Frame; view: Views.View
		l, t, r, b: integer; x, y: integer): integer 
		
		var 
			s, u, w, h, mx, my, cursor: integer
		
		proc CheckHandle(x0, y0: integer; c: integer) 
		begin 
			if (x >= x0 - u) & (x <= x0 + s) & (y >= y0 - u) & (y <= y0 + s) then
				cursor := c 
			end 
		end CheckHandle
	
	begin 
		u := f.dot
		s := handleSize - 2 * u
		if (x < l - s) or (x > r + s) or (y < t - s) or (y > b + s) then
			cursor := Mechanisms.outside 
		else 
			cursor := Mechanisms.inside 
		end 
		w := r - l
		h := b - t
		if ~Fixed(f, view) then
			CheckHandle(l - s, t - s, HostPorts.resizeLCursor)
			CheckHandle(r, t - s, HostPorts.resizeRCursor)
			CheckHandle(l - s, b, HostPorts.resizeRCursor)
			CheckHandle(r, b, HostPorts.resizeLCursor)
			if w > 2 * clipMiddleHandle then
				mx := (l + r - s) div 2
				CheckHandle(mx, t - s, HostPorts.resizeVCursor)
				CheckHandle(mx, b, HostPorts.resizeVCursor) 
			end 
			if h > 2 * clipMiddleHandle then
				my := (t + b - s) div 2
				CheckHandle(l - s, my, HostPorts.resizeHCursor)
				CheckHandle(r, my, HostPorts.resizeHCursor) 
			end  
		end 
		return cursor
	end FocusBorderCursor
	
	proc RestoreBorderArea(f: Views.Frame; l, t, r, b: integer) 
		// restore area under destructive border mark
		var 
			g: Views.RootFrame
			s, dx, dy: integer
	begin 
		g := Views.RootOf(f)
		dx := f.gx - g.gx
		dy := f.gy - g.gy
		s := (handleSize - f.dot) div f.unit * f.unit
		inc(l, dx)
		inc(t, dy)
		inc(r, dx)
		inc(b, dy)
		// Views.UpdateRoot(g, l - s, t - s, r + s, b + s, FALSE);
		
		
		Views.ValidateRoot(g)
		Views.RestoreRoot(g, l - s, t - s, r + s, b + s)
	(* Views.RestoreRoot(g, l - s, t - s, r + s, t);
	   Views.RestoreRoot(g, l - s, t, l, b);
	   Views.RestoreRoot(g, r, t, r + s, b);
	   Views.RestoreRoot(g, l - s, b, r + s, b + s) *)
	
	
	end RestoreBorderArea
	
	proc (hook: Hook) MarkFocusBorder*(
		host: Views.Frame; focus: Views.View; l, t, r, b: integer; show: boolean
		) 
	begin 
		if focus # nil then
			if show then
				PaintFocusBorder(host, focus, l, t, r, b) 
			else 
				RestoreBorderArea(host, l, t, r, b) 
			end  
		end 
	end MarkFocusBorder
	
	
	// selection borders
	
	proc PaintSelBorder(f: Views.Frame; view: Views.View; l, t, r, b: integer) 
		var 
			u, d, w, h, mx, my, l0, t0, r0, b0: integer
			sizeable: boolean
		
		proc PaintHandle(x, y: integer) 
			var 
				s: integer
				ci, co: Ports.Color
		begin 
			dec(x, d)
			dec(y, d)
			s := d * 2 + u
			if sizeable then
				ci := HostPorts.selBackground
				co := HostPorts.selTextCol 
			else 
				ci := HostPorts.selTextCol
				co := HostPorts.selBackground 
			end 
			f.DrawRect(x, y, x + s, y + s, Ports.fill, co)
			inc(x, u)
			inc(y, u)
			dec(s, 2 * u)
			f.DrawRect(x, y, x + s, y + s, Ports.fill, ci)
		(* f.DrawRect(x, y, x + s, y + s, Ports.fill, ci);
		   f.DrawRect(x, y, x + s, y + s, 0, co) *)
		
		
		end PaintHandle
	
	begin 
		
		d := (handleSize - f.dot) div f.unit div 2
		f.rider.GetRect(l0, t0, r0, b0)
		f.rider.SetRect(l0 - d - 1, t0 - d - 1, r0 + d + 1, b0 + d + 1)
		d := d * f.unit
		u := f.dot
		w := r - l
		h := b - t
		sizeable := ~Fixed(f, view)
		dec(l, u)
		dec(t, u)
		// f.SaveRect(l - d, t - d, r + u + d, b + u + d, res);
		
		
		f.DrawRect(l, t, r + u, b + u, u, HostPorts.selBackground)
		if f.front then
			if (w > clipMiddleHandle) & (h > clipMiddleHandle) then
				PaintHandle(l, t)
				PaintHandle(r, t)
				PaintHandle(l, b)
				PaintHandle(r, b)
				if w > 2 * clipMiddleHandle then
					mx := (l + r) div 2
					PaintHandle(mx, t)
					PaintHandle(mx, b) 
				end 
				if h > 2 * clipMiddleHandle then
					my := (t + b) div 2
					PaintHandle(l, my)
					PaintHandle(r, my) 
				end  
			elsif sizeable then 
				PaintHandle(r, b) 
			end  
		end 
		f.rider.SetRect(l0, t0, r0, b0)
	
	end PaintSelBorder
	
	proc (hook: Hook) SelBorderCursor*(f: Views.Frame; view: Views.View; l, t, r, b: integer
		x, y: integer): integer 
		var 
			d, u, w, h, mx, my, cursor: integer
		
		proc CheckHandle(x0, y0: integer; c: integer) 
		begin 
			if (x >= x0 - d) & (x <= x0 + d) & (y >= y0 - d) & (y <= y0 + d) then
				cursor := c 
			end 
		end CheckHandle
	
	begin 
		if (x < l) or (x > r) or (y < t) or (y > b) then
			cursor := Mechanisms.outside 
		else 
			cursor := Mechanisms.inside 
		end 
		if (view # nil) & ~Fixed(f, view) then
			d := (handleSize - f.dot) div f.unit div 2 * f.unit
			w := r - l
			h := b - t
			u := f.dot
			dec(l, u)
			dec(t, u)
			if (w > clipMiddleHandle) & (h > clipMiddleHandle) then
				CheckHandle(l, t, HostPorts.resizeLCursor)
				CheckHandle(r, t, HostPorts.resizeRCursor)
				CheckHandle(l, b, HostPorts.resizeRCursor)
				CheckHandle(r, b, HostPorts.resizeLCursor)
				if w > 2 * clipMiddleHandle then
					mx := (l + r) div 2
					CheckHandle(mx, t, HostPorts.resizeVCursor)
					CheckHandle(mx, b, HostPorts.resizeVCursor) 
				end 
				if h > 2 * clipMiddleHandle then
					my := (t + b) div 2
					CheckHandle(l, my, HostPorts.resizeHCursor)
					CheckHandle(r, my, HostPorts.resizeHCursor) 
				end  
			else 
				CheckHandle(r, b, HostPorts.resizeLCursor) 
			end  
		end 
		return cursor
	end SelBorderCursor
	
	proc RestoreViewArea(f: Views.Frame; l, t, r, b: integer) 
		// restore area under destructive selection mark
		var 
			g: Views.RootFrame
			d, dx, dy: integer
	begin 
		(* d := (handleSize - f.dot) DIV f.unit DIV 2 * f.unit + f.dot;
		   f.RestoreRect(l - d, t - d, r + d, b + d, TRUE) *)
		
		
		g := Views.RootOf(f)
		dx := f.gx - g.gx
		dy := f.gy - g.gy
		
		d := (handleSize - f.dot) div f.unit div 2 * f.unit + f.dot
		inc(l, dx)
		inc(t, dy)
		inc(r, dx)
		inc(b, dy)
		Views.ValidateRoot(g)
		Views.RestoreRoot(g, l - d, t - d, r + d, b + d)
	end RestoreViewArea
	
	proc (hook: Hook) MarkSingletonBorder*(
		host: Views.Frame; view: Views.View; l, t, r, b: integer; show: boolean
		) 
	begin 
		if view # nil then
			if show then
				PaintSelBorder(host, view, l, t, r, b) 
			else 
				RestoreViewArea(host, l, t, r, b) 
			end  
		end 
	end MarkSingletonBorder
	
	
	(* PROCEDURE MarkBorder* (host: Ports.Frame; view: Stores.Store; l, t, r, b: INTEGER);
	   VAR s: INTEGER;
	   BEGIN
	   IF view # NIL THEN
	   s := markBorderSize * host.dot;
	   host.MarkRect(l - s, t - s, r + s, b + s, s, Ports.dim50, Ports.show)
	   END
	   END MarkBorder; *)
	
	
	
	proc (hook: Hook) TrackToResize*(host: Views.Frame; view: Views.View
		minW, maxW, minH, maxH: integer
		var l, t, r, b: integer; var op: integer
		var x, y: integer; var buttons: set) 
		var 
			isDown: boolean
			m: set
			p: Properties.SizePref
			x1, y1, dx, dy, dl, dt, dr, db, l0, t0, r0, b0, l1, t1, r1, b1, w, h, dw, dh: integer
	begin 
		l0 := l
		t0 := t
		r0 := r
		b0 := b
		dl := 0
		dt := 0
		dr := 0
		db := 0
		x1 := (l + r) div 2
		y1 := (t + b) div 2
		if (r - l <= 2 * clipMiddleHandle) or (abs(x - x1) > handleSize div 2) then
			if x < x1 then
				dl := 1 
			else 
				dr := 1 
			end  
		end 
		if (b - t <= 2 * clipMiddleHandle) or (abs(y - y1) > handleSize div 2) then
			if y < y1 then
				dt := 1 
			else 
				db := 1 
			end  
		end 
		if (Controllers.extend in buttons) & (dl # dr) then
			dl := 1
			dr := 1 
		end 
		if (Controllers.extend in buttons) & (dt # db) then
			dt := 1
			db := 1 
		end 
		host.MarkRect(l, t, r, b, 0, Ports.dim50, Ports.show)
		repeat 
			host.Input(x1, y1, m, isDown)
			if x1 < host.l then
				x1 := host.l 
			elsif x1 > host.r then 
				x1 := host.r 
			end 
			if y1 < host.t then
				y1 := host.t 
			elsif y1 > host.b then 
				y1 := host.b 
			end 
			dx := x1 - x
			dy := y1 - y
			l1 := l0 + dl * dx
			t1 := t0 + dt * dy
			r1 := r0 + dr * dx
			b1 := b0 + db * dy
			w := r1 - l1
			h := b1 - t1
			if (w > 0) & (h > 0) then
				p.fixedH := (dl = 0) & (dr = 0)
				p.fixedW := (dt = 0) & (db = 0)
				p.w := w
				p.h := h
				Views.HandlePropMsg(view, p)
				w := p.w
				h := p.h
				if w < minW then
					w := minW 
				elsif w > maxW then 
					w := maxW 
				end 
				if h < minH then
					h := minH 
				elsif h > maxH then 
					h := maxH 
				end 
				dw := w - (r1 - l1)
				dh := h - (b1 - t1)
				dec(l1, dl * dw)
				dec(t1, dt * dh)
				if (dl + dr = 0) & (dw # 0) then
					inc(r1, dw) 
				else 
					inc(r1, dr * dw) 
				end 
				if (dt + db = 0) & (dh # 0) then
					inc(b1, dh) 
				else 
					inc(b1, db * dh) 
				end 
				if (l1 # l) or (t1 # t) or (r1 # r) or (b1 # b) then
					host.MarkRect(l, t, r, b, 0, Ports.dim50, Ports.hide)
					l := l1
					t := t1
					r := r1
					b := b1
					host.MarkRect(l, t, r, b, 0, Ports.dim50, Ports.show) 
				end  
			end  
		until ~isDown 
		host.MarkRect(l, t, r, b, 0, Ports.dim50, Ports.hide)
		x := x1
		y := y1
		buttons := {}
		if (l # l0) or (t # t0) or (r # r0) or (b # b0) then
			op := Mechanisms.resize 
		else 
			op := Mechanisms.cancelResize 
		end 
	end TrackToResize
	
	
	(* PROCEDURE AppendMenu (menu: WinApi.HANDLE; id: INTEGER; name: Dialog.String);
	   VAR res: INTEGER;
	   BEGIN
	   Dialog.MapString(name, name);
	   res := WinApi.AppendMenuW(menu, {}, id, name)
	   END AppendMenu; *)
	
	
	
	
	// drag & drop
	
	proc (hook: Hook) TrackToDrop*(host: Views.Frame; view: Views.View
		isSingle: boolean; w, h, rx, ry: integer
		var dest: Views.Frame; var destX, destY: integer; var op: integer
		var x, y: integer; var buttons: set) 
		var 
			m: set
			x1, y1: integer
			isDown: boolean
	begin 
		repeat 
			host.Input(x1, y1, m, isDown)
			host.MarkRect(x1 - rx, y1 - ry, x1 - rx + w, y1 - ry + h, 0, Ports.dim50, Ports.show)
			host.MarkRect(x1 - rx, y1 - ry, x1 - rx + w, y1 - ry + h, 0, Ports.dim50, Ports.hide) 
		until ~isDown 
		if Controllers.modify in m then
			op := Mechanisms.copy_ 
		else 
			op := Mechanisms.move 
		end 
		if x1 < 0 then
			x1 := 0 
		end 
		if y1 < 0 then
			y1 := 0 
		end 
		x := x1
		y := y1
		destX := x
		destY := y
		dest := host
	end TrackToDrop
	
	
	proc PickMode(f, dest: Views.Frame; x, y: integer): integer 
		var 
			mode, cursor: integer
	begin 
		// TODO
		// IF WinApi.GetAsyncKeyState(1BH) < 0 THEN mode := escape; cursor := Ports.arrowCursor
		
		
		// ELSIF Home(f, x, y) THEN mode := Mechanisms.cancelPick; cursor := Ports.arrowCursor
		
		
		// ELS
		
		
		if dest = nil then
			mode := Mechanisms.cancelPick
			cursor := HostPorts.stopCursor 
		else 
			cursor := HostPorts.pickCursor
			if Services.SameType(dest.view, f.view) then
				mode := Mechanisms.pick 
			else 
				mode := Mechanisms.pickForeign 
			end  
		end 
		f.SetCursor(cursor)
		return mode
	end PickMode
	
	proc (hook: Hook) TrackToPick*(f: Views.Frame
		var dest: Views.Frame; var destX, destY: integer; var op: integer
		var x, y: integer; var buttons: set) 
		var 
			d, d0: Views.Frame
			dx, dy, x0, y0, x1, y1: integer
			isDown: boolean
			m: set
	begin 
		x0 := x
		y0 := y
		Properties.PollPick(x, y, f, x0, y0, Properties.mark, Properties.show, dest, destX, destY)
		// MarkTarget(dest, dest # f);
		op := PickMode(f, dest, x, y)
		repeat 
			// CheckWindow(TRUE);
			f.Input(x1, y1, m, isDown)
			if (x1 # x) or (y1 # y) then
				Properties.PollPick(x1, y1, f, x0, y0, Properties.noMark, Properties.show, d, dx, dy)
				if (d # dest) or (dx # destX) or (dy # destY) then
					d0 := dest
					// MarkTarget(dest, (dest # f) & (d # d0));
					Properties.PollPick(x, y, f, x0, y0, Properties.mark, Properties.hide, dest, destX, destY)
					x := x1
					y := y1
					Properties.PollPick(x, y, f, x0, y0, Properties.mark, Properties.show, d, dx, dy)
					dest := d
					destX := dx
					destY := dy 
				// MarkTarget(dest, (dest # f) (* ~home *) & (d # d0));
				else 
					Properties.PollPick(x, y, f, x0, y0, Properties.mark, Properties.hide, d, dx, dy)
					x := x1
					y := y1
					Properties.PollPick(x, y, f, x0, y0, Properties.mark, Properties.show, d, dx, dy) 
				end  
			end 
			op := PickMode(f, dest, x, y) 
		until ~isDown or (op = escape) 
		Properties.PollPick(x, y, f, x0, y0, Properties.mark, Properties.hide, d, dx, dy)
		if op = escape then
			repeat 
				f.Input(x, y, m, isDown) 
			until ~isDown 
			op := Mechanisms.cancelPick 
		end 
		// MarkTarget(dest, dest # f);
		// CheckWindow(FALSE)
		buttons := {}
	end TrackToPick
	
	
	(* PROCEDURE (hook: Hook) PopUpAndSelect* (f: Views.Frame;
	   n, this: INTEGER;
	   string: ARRAY OF ARRAY OF CHAR;
	   enabled, checked: ARRAY OF BOOLEAN;
	   VAR i: INTEGER;
	   VAR x, y: INTEGER; VAR buttons: SET);
	   VAR res, j: INTEGER; menu, wnd: WinApi.HANDLE; pt: WinApi.POINT;
	   t: ARRAY 256 OF CHAR; s: SET;
	   BEGIN
	   ASSERT(0 < n, 20); ASSERT(n <= LEN(string), 21);
	   ASSERT(LEN(enabled) = LEN(string), 22);
	   ASSERT(LEN(checked) = LEN(string), 23);
	   wnd := f.rider(HostPorts.Rider).port.wnd;
	   ASSERT(wnd # 0, 100);
	   menu := WinApi.CreatePopupMenu(); j := 0;
	   WHILE j < n DO
	   IF string[j] = "-" THEN
	   res := WinApi.AppendMenuW(menu, WinApi.MF_SEPARATOR, 0, NIL)
	   ELSE
	   Dialog.MapString(string[j], t);
	   res := WinApi.AppendMenuW(menu, {}, 32000 + j, t);
	   IF ~enabled[j] THEN
	   res := WinApi.EnableMenuItem(menu, 32000 + j, WinApi.MF_GRAYED)
	   ELSIF checked[j] THEN
	   res := WinApi.CheckMenuItem(menu, 32000 + j, WinApi.MF_GRAYED)
	   END
	   END;
	   INC(j)
	   END;
	   pt.x := (x + f.gx) DIV f.unit; pt.y := (y + f.gy) DIV f.unit;
	   res := WinApi.ClientToScreen(wnd, pt);
	   s := {1, 2};	(* track right, center align *)
	   res := WinApi.TrackPopupMenu(menu, s, pt.x, pt.y + 2, 0, wnd, NIL);
	   res := WinApi.DestroyMenu(menu)
	   END PopUpAndSelect; *)
	
	
	
	proc (hook: Hook) PopUpAndSelect*(f: Views.Frame
		n, this: integer
		string: array of array of char
		enabled, checked: array of boolean
		var i: integer
		var x, y: integer; var buttons: set) 
	begin 
		assert(0 < n, 20)
		assert(n <= len(string), 21)
		assert(len(enabled) = len(string), 22)
		assert(len(checked) = len(string), 23)
	// TODO
	end PopUpAndSelect
	
	
	proc Init*
		var 
			h: Hook
	begin 
		new(h)
		Mechanisms.SetHook(h)
	end Init

begin
	Init
end HostMechanisms
