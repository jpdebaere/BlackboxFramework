module CommTCP
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   references	= "see the CommStreams documentation for details on the semantics of this driver module"
	   changes	= "##=>
	   
	   - 20070130, bh, Winsock replaced by WinNet
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	(* A. V. Shiryaev, 2012.11, 2016.11:
	   Linux CommTCP
	   Based on 1.6 Windows CommTCP *)
	
	
	
	import SYSTEM, Libc:= LinLibc, Net:= LinNet, Ioctl:= LinIoctl, Strings, Dialog, CommStreams
	
	const 
		hostSpecificError = -1 // host-specific error codes
		INVALID_SOCKET = Net.INVALID_SOCKET
		SOCKET_ERROR = Net.SOCKET_ERROR
	
	type 
		Stream = pointer to record (CommStreams.Stream) 
				sock: Net.SOCKET // socket must be in non-blocking mode, otherwise recv() or send() could block
				remoteAdr: CommStreams.Adr  // remoteAdr # NIL
			end 
		
		Listener = pointer to record (CommStreams.Listener) 
				sock: Net.SOCKET
				localAdr: CommStreams.Adr  // localAdr # NIL
			end 
	
	var 
		debug*: boolean
	
	
	proc Errno(): integer 
		var 
			errno: integer
	begin 
		SYSTEM.GET(Libc.__errno_location(), errno)
		return errno
	end Errno
	
	// auxiliary procedures
	
	proc CopyOfAdrString(a: CommStreams.Adr): CommStreams.Adr 
		var 
			b: CommStreams.Adr
	begin 
		new(b, len(a))
		b := a
		return b
	end CopyOfAdrString
	
	proc Error(msg: array of char; errno: integer) 
		var 
			s: array 128 of char
			errnostr: array 8 of char
	begin 
		if debug then
			case errno of 
				Libc.EINTR: 
					s := "EINTR, interrupted system call" 
				| Libc.EBADF: 
					s := "EBADF, bad file descriptor" 
				| Libc.EACCES: 
					s := "EACCES, permission denied" 
				| Libc.EFAULT: 
					s := "EFAULT, bad address" 
				| Libc.EINVAL: 
					s := "EINVAL, invalid argument" 
				| Libc.ENFILE: 
					s := "ENFILE, too many open files in system" 
				| Libc.EMFILE: 
					s := "EMFILE, too many open files" 
				| Libc.EPIPE: 
					s := "EPIPE, broken pipe" 
				| Libc.EAGAIN: 
					s := "EAGAIN, resource temporarily unavailable" 
				| Libc.EINPROGRESS: 
					s := "EINPROGRESS, operation now in progress" 
				| Libc.EALREADY: 
					s := "EALREADY, operation already in progress" 
				| Libc.ENOTSOCK: 
					s := "ENOTSOCK, socket operation on non-socket" 
				| Libc.EDESTADDRREQ: 
					s := "EDESTADDRREQ, destination address required" 
				| Libc.EMSGSIZE: 
					s := "EMSGSIZE, message too long" 
				| Libc.ENOPROTOOPT: 
					s := "ENOPROTOOPT, protocol not available" 
				| Libc.EPROTONOSUPPORT: 
					s := "EPROTONOSUPPORT, protocol not supported" 
				| Libc.EAFNOSUPPORT: 
					s := "EAFNOSUPPORT, address family not supported by protocol family" 
				| Libc.EADDRINUSE: 
					s := "EADDRINUSE, address already in use" 
				| Libc.EADDRNOTAVAIL: 
					s := "EADDRNOTAVAIL, can't assign requested address" 
				| Libc.ENETDOWN: 
					s := "ENETDOWN, network is down" 
				| Libc.ENETUNREACH: 
					s := "ENETUNREACH, network is unreachable" 
				| Libc.ENOBUFS: 
					s := "ENOBUFS, no buffer space available" 
				| Libc.EISCONN: 
					s := "EISCONN, socket is already connected" 
				| Libc.ENOTCONN: 
					s := "ENOTCONN, socket is not connected" 
				| Libc.ETIMEDOUT: 
					s := "ETIMEDOUT, operation timed out" 
				| Libc.ECONNREFUSED: 
					s := "ECONNREFUSED, connection refused" 
				| Libc.EHOSTDOWN: 
					s := "EHOSTDOWN, host is down" 
				| Libc.EHOSTUNREACH: 
					s := "EHOSTUNREACH, no route to host" 
			else 
				s := "(please look up the error number in the LinLibc symbol file and in the Linux documentation)" 
			end 
			Strings.IntToString(errno, errnostr)
			Dialog.ShowParamMsg("^0: error ^1 (^2)", msg, errnostr, s) 
		end 
	end Error
	
	proc GAIError(msg: array of char; errno: integer) 
		var 
			s: array 128 of char
			errnostr: array 12 of char
	begin 
		if debug then
			case errno of 
				Net.EAI_ADDRFAMILY: 
					s := "EAI_ADDRFAMILY, address family for hostname not supported" 
				| Net.EAI_AGAIN: 
					s := "EAI_AGAIN, temporary failure in name resolution" 
				| Net.EAI_BADFLAGS: 
					s := "EAI_BADFLAGS, invalid value for ai_flags" 
				| Net.EAI_FAIL: 
					s := "EAI_FAIL, non-recoverable failure in name resolution" 
				| Net.EAI_FAMILY: 
					s := "EAI_FAMILY, ai_family not supported" 
				| Net.EAI_MEMORY: 
					s := "EAI_MEMORY, memory allocation failure" 
				| Net.EAI_NODATA: 
					s := "EAI_NODATA, no address associated with hostname" 
				| Net.EAI_NONAME: 
					s := "EAI_NONAME, hostname or servname not provided, or not known" 
				| Net.EAI_OVERFLOW: 
					s := "EAI_OVERFLOW, argument buffer overflow" 
				| Net.EAI_SERVICE: 
					s := "EAI_SERVICE, servname not supported for ai_socktype" 
				| Net.EAI_SOCKTYPE: 
					s := "EAI_SOCKTYPE, ai_socktype not supported" 
				| Net.EAI_SYSTEM: 
					s := "EAI_SYSTEM, system error returned in errno" 
			else 
				s := "(please look up the error number in the LinNet symbol file and in the Linux documentation)" 
			end 
			Strings.IntToString(errno, errnostr)
			Dialog.ShowParamMsg("^0: error ^1 (^2)", msg, errnostr, s) 
		end 
	end GAIError
	
	proc IsIPAddress(name: array of char): boolean 
		// returns TRUE iff name only contains decimal digits and "." characters
		var 
			i: integer
	begin 
		i := 0
		while ("0" <= name[i]) & (name[i] <= "9") or (name[i] = ".") do 
			inc(i) 
		end 
		return name[i] = 0x
	end IsIPAddress
	
	proc ParseAdr(adr: array of char; var addr: array of char; var port: integer; var ok: boolean) 
		// parse address specification with syntax addr [ ":" portnumber ]
		var 
			i, j, res: integer
			portstr: array 16 of char
	begin 
		i := 0
		j := 0
		port := 0
		ok := true
		while (adr[i] # 0x) & (adr[i] # ":") do 
			if j < len(addr) - 1 then
				addr[j] := adr[i]
				inc(j) 
			end 
			inc(i) 
		end 
		ok := i = j
		addr[j] := 0x
		if ok & (adr[i] = ":") then
			inc(i)
			j := 0
			while adr[i] # 0x do 
				portstr[j] := adr[i]
				inc(i)
				if j < len(portstr) - 1 then
					inc(j) 
				end  
			end 
			portstr[j] := 0x
			Strings.StringToInt(portstr, port, res)
			ok := res = 0 
		end 
	end ParseAdr
	
	proc ParseLocalAdr(in adr: array of char
		var peername: array of char; var port: integer; var ok: boolean
		) 
		var 
			i, res: integer
	begin 
		if adr = "" then
			port := 0 // default port number 0 means 'don't care which port is used'
			peername := ""
			ok := true 
		else 
			i := 0
			while (adr[i] # 0x) & ((adr[i] >= "0") & (adr[i] <= "9")) or (adr[i] = " ") do 
				inc(i) 
			end 
			if adr[i] # 0x then
				ParseAdr(adr, peername, port, ok) 
			else 
				Strings.StringToInt(adr, port, res)
				peername := ""
				ok := res = 0 
			end  
		end 
	end ParseLocalAdr
	
	proc NameToAdr(in peername: array of char; var inaddr: Net.in_addr; var ok: boolean) 
		var 
			shortPName: array 64 of char
			res: Net.int_
			result: Net.Ptraddrinfo
			hints: Net.addrinfo
			addr: Net.Ptrsockaddr_in
	begin 
		shortPName := (peername)
		if IsIPAddress(peername) then
			if shortPName = "" then
				inaddr.S_un.S_addr := Net.INADDR_ANY 
			else 
				inaddr.S_un.S_addr := Net.inet_addr(shortPName) 
			end 
			ok := inaddr.S_un.S_addr # Net.INADDR_NONE 
		else 
			hints.ai_flags := {}
			hints.ai_family := Net.PF_INET
			hints.ai_socktype := Net.SOCK_STREAM
			hints.ai_protocol := Net.IPPROTO_TCP
			hints.ai_addrlen := 0
			hints.ai_addr := nil
			hints.ai_canonname := nil
			hints.ai_next := nil
			res := Net.getaddrinfo(shortPName, nil, hints, result)
			ok := res = 0
			if ok then
				assert(result # nil)
				if (result.ai_family = Net.PF_INET) 
					& (result.ai_socktype = Net.SOCK_STREAM) 
					& (result.ai_protocol = Net.IPPROTO_TCP) 
					& (result.ai_addr # nil) then
					addr := SYSTEM.VAL(Net.Ptrsockaddr_in, result.ai_addr)
					inaddr := addr.sin_addr 
				else 
					ok := false 
				end 
				Net.freeaddrinfo(result)
				assert(ok) 
			else 
				GAIError("getaddrinfo()", res) 
			end  
		end 
	end NameToAdr
	
	proc MakeAdr(adr: Net.sockaddr_in; var s: CommStreams.Adr) 
		var 
			ipadr, n: integer
			temp, buf: array 64 of char
	begin 
		ipadr := adr.sin_addr.S_un.S_addr
		temp := ""
		if ipadr # 0 then
			n := ipadr mod 256
			Strings.IntToString(n, temp)
			n := SYSTEM.LSH(ipadr, -8)
			n := n mod 256
			Strings.IntToString(n, buf)
			temp := temp + "." + buf
			n := SYSTEM.LSH(ipadr, -16)
			n := n mod 256
			Strings.IntToString(n, buf)
			temp := temp + "." + buf
			n := SYSTEM.LSH(ipadr, -24)
			n := n mod 256
			Strings.IntToString(n, buf)
			temp := temp + "." + buf + ":" 
		end 
		n := (adr.sin_port mod 256) * 256 + (adr.sin_port div 256) mod 256
		Strings.IntToString(n, buf)
		temp := temp + buf
		new(s, len(temp) + 1)
		s^ := temp
	end MakeAdr
	
	// Linux, FreeBSD, OpenBSD, 32-bit
	proc FD_ZERO(var set_: Net.fd_set) 
		var 
			i: integer
	begin 
		i := len(set_)
		repeat 
			dec(i)
			set_[i] := {} 
		until i = 0 
	end FD_ZERO
	
	proc FD_SET(fd: Net.SOCKET; var set_: Net.fd_set) 
	begin 
		incl(set_[fd div 32], fd mod 32)
	end FD_SET
	
	proc MakeFdSet(socket: Net.SOCKET; var set_: Net.fd_set) 
	begin 
		FD_ZERO(set_)
		FD_SET(socket, set_)
	end MakeFdSet
	
	// Listener
	
	proc (l: Listener) LocalAdr(): CommStreams.Adr 
	begin 
		return CopyOfAdrString(l.localAdr)
	end LocalAdr
	
	proc (l: Listener) Accept(var s: CommStreams.Stream) 
		var 
			timeout: Net.timeval
			set_: Net.fd_set
			res, namelen: integer
			sock: Net.SOCKET
			tcpstream: Stream
			adr: Net.sockaddr_storage
	begin 
		timeout.tv_sec := 0
		timeout.tv_usec := 0
		MakeFdSet(l.sock, set_)
		res := Net.select(l.sock + 1, set_, nil, nil, timeout)
		assert(res # SOCKET_ERROR, 100)
		if res > 0 then
			namelen := size(Net.sockaddr_storage)
			sock := Net.accept(l.sock, SYSTEM.VAL(Net.sockaddr, adr), namelen)
			assert(sock # INVALID_SOCKET, 101)
			namelen := 1 // = 'true'
			res := Ioctl.ioctl1(sock, Ioctl.FIONBIO, namelen) // set to non-blocking mode
			assert(res = 0, 102)
			new(tcpstream)
			tcpstream.sock := sock
			MakeAdr(SYSTEM.VAL(Net.sockaddr_in, adr), tcpstream.remoteAdr)
			s := tcpstream 
		end 
	end Accept
	
	proc (l: Listener) Close
		var 
			res: integer
	begin 
		if l.sock # INVALID_SOCKET then
			res := Libc.close(l.sock)
			l.sock := INVALID_SOCKET 
		end 
	end Close
	
	proc (l: Listener) FINALIZE-
	begin 
		with l: Listener do 
			if l.sock # INVALID_SOCKET then
				l.Close 
			end  
		end 
	end FINALIZE
	
	proc NewListener*(localAdr: array of char; var l: CommStreams.Listener; var res: integer) 
		// localAdr must contain a port number
		const  // use default length of listener backlog queue
			SOMAXCONN = 5
		var 
			portnr, namelen, optval: integer
			ok: boolean
			tcplistener: Listener
			adr: Net.sockaddr_in
			sock: Net.SOCKET
			peername: array 64 of char
	begin 
		l := nil
		ParseLocalAdr(localAdr, peername, portnr, ok)
		if ok & (portnr >= 0) then // only non-negative port numbers are legal
			sock := Net.socket(Net.PF_INET, Net.SOCK_STREAM, Net.IPPROTO_TCP)
			assert(sock # INVALID_SOCKET, 100)
			optval := 1
			res := Net.setsockopt(sock, Net.SOL_SOCKET, Net.SO_REUSEADDR, 
				SYSTEM.ADR(optval), size(integer))
			assert(res = 0, 101)
			adr.sin_family := Net.PF_INET
			adr.sin_port := Net.htons(short(portnr))
			NameToAdr(peername, adr.sin_addr, ok)
			if ok then
				res := Net.bind(sock, SYSTEM.VAL(Net.sockaddr, adr), size(Net.sockaddr_in))
				if res = 0 then
					res := Net.listen(sock, SOMAXCONN)
					assert(res = 0, 102)
					new(tcplistener)
					tcplistener.sock := sock
					namelen := size(Net.sockaddr_in)
					res := Net.getsockname(sock, SYSTEM.VAL(Net.sockaddr, adr), namelen)
					assert(res = 0, 103)
					MakeAdr(adr, tcplistener.localAdr)
					l := tcplistener
					res := CommStreams.done 
				else 
					res := CommStreams.localAdrInUse 
				end  
			else 
				res := Libc.close(sock)
				res := CommStreams.invalidLocalAdr 
			end  
		else 
			res := CommStreams.invalidLocalAdr 
		end 
	end NewListener
	
	
	// Stream
	
	proc (s: Stream) RemoteAdr(): CommStreams.Adr 
	begin 
		return CopyOfAdrString(s.remoteAdr)
	end RemoteAdr
	
	proc (s: Stream) IsConnected(): boolean 
		// Give an educated guess on whether the peer has closed the connection.
		// This is not a guarantee that data sent on s will arrive at the peer.
		var 
			timeout: Net.timeval
			set_: Net.fd_set
			n, res, avail: integer
	begin 
		if s.sock = INVALID_SOCKET then
			return false 
		else 
			timeout.tv_sec := 0
			timeout.tv_usec := 0
			MakeFdSet(s.sock, set_)
			n := Net.select(s.sock + 1, set_, nil, nil, timeout)
			assert(n # SOCKET_ERROR, 100)
			if n = 1 then // a recv on s.sock would not block; find out whether there is data queued
				res := Ioctl.ioctl1(s.sock, Ioctl.FIONREAD, avail)
				assert(res = 0, 101)
				(* if there is data queued, we assume the socket is still open.
				   if no data is queued, then we know that a recv can only return with zero bytes
				   read, telling us that the socket has been closed. *)
				return avail > 0 
			else  // a recv on s.sock would block, so the peer has not closed the socket yet or the connect failed entirely
				timeout.tv_sec := 0
				timeout.tv_usec := 0
				MakeFdSet(s.sock, set_)
				n := Net.select(s.sock + 1, nil, nil, set_, timeout)
				assert(n # SOCKET_ERROR, 102)
				if n = 1 then
					s.Close 
				end 
				return n = 0 
			end  
		end 
	end IsConnected
	
	proc (s: Stream) WriteBytes(in x: array of byte; beg, len_: integer; var written: integer) 
		var 
			res: integer
	begin 
		assert(beg >= 0, 20)
		assert(len_ > 0, 21)
		assert(len(x) >= beg + len_, 22)
		written := Net.send(s.sock, SYSTEM.VAL(Libc.PtrVoid, SYSTEM.ADR(x) + beg), len_, Net.MSG_NOSIGNAL)
		if written = SOCKET_ERROR then
			res := Errno()
			if (res # Libc.EAGAIN) & (res # Libc.ENOTCONN) then
				Error("send()", res) 
			end 
			written := 0 
		end 
	end WriteBytes
	
	proc (s: Stream) ReadBytes(var x: array of byte; beg, len_: integer; var read: integer) 
		var 
			res: integer
	begin 
		assert(beg >= 0, 20)
		assert(len_ > 0, 21)
		assert(len(x) >= beg + len_, 22)
		read := Net.recv(s.sock, SYSTEM.VAL(Libc.PtrVoid, SYSTEM.ADR(x) + beg), len_, {})
		if read = SOCKET_ERROR then
			res := Errno()
			if (res = Libc.EAGAIN) or (res = Libc.ENOTCONN) then
				read := 0  // there is nothing to be read
			elsif res = Libc.ECONNRESET then 
				read := 0
				s.Close  // prevent trap
			else 
				Error("recv()", res)
				read := 0
				s.Close 
			end  
		end 
	end ReadBytes
	
	proc (s: Stream) Close
		var 
			res: integer
	begin 
		res := Libc.close(s.sock)
		s.sock := INVALID_SOCKET
	end Close
	
	proc (s: Stream) FINALIZE-
	begin 
		if s.sock # INVALID_SOCKET then
			s.Close 
		end 
	end FINALIZE
	
	proc CreateStream(
		var s: CommStreams.Stream; sock: Net.SOCKET; in remoteAdr: array of char
		) 
		var 
			stream: Stream
	begin 
		new(stream)
		stream.sock := sock
		new(stream.remoteAdr, len(remoteAdr) + 1)
		stream.remoteAdr^ := remoteAdr
		s := stream
	end CreateStream
	
	proc NewStream*(
		localAdr, remoteAdr: array of char; var s: CommStreams.Stream; var res: integer
		) 
		// localAdr may contain a port number
		// remoteAdr must contain an address in the format  ( ip-address | hostname ) [ ":" portnumber ]
		var 
			adr: Net.sockaddr_in
			rpeername, lpeername: array 64 of char
			inaddr: Net.in_addr
			lport, rport: integer
			ok: boolean
			sock: Net.SOCKET
	begin 
		s := nil
		ParseAdr(remoteAdr, rpeername, rport, ok)
		if ok then
			sock := Net.socket(Net.PF_INET, Net.SOCK_STREAM, Net.IPPROTO_TCP)
			if sock # INVALID_SOCKET then
				ParseLocalAdr(localAdr, lpeername, lport, ok)
				if ok & (lport >= 0) then // only non-negative port numbers are legal
					adr.sin_family := Net.PF_INET
					adr.sin_port := Net.htons(short(lport))
					NameToAdr(lpeername, adr.sin_addr, ok)
					res := Net.bind(sock, SYSTEM.VAL(Net.sockaddr, adr), size(Net.sockaddr_in))
					if res = 0 then
						NameToAdr(rpeername, inaddr, ok)
						if ok then
							adr.sin_family := Net.PF_INET
							adr.sin_port := Net.htons(short(rport))
							adr.sin_addr := inaddr
							res := 1 // = 'true'
							res := Ioctl.ioctl1(sock, Ioctl.FIONBIO, res) // set to non-blocking mode
							assert(res = 0, 101)
							res := Net.connect(sock, SYSTEM.VAL(Net.sockaddr, adr), size(Net.sockaddr_in))
							if res = 0 then
								CreateStream(s, sock, remoteAdr)
								res := CommStreams.done 
							else 
								res := Errno()
								if res = Libc.EINPROGRESS then
									CreateStream(s, sock, remoteAdr)
									res := CommStreams.done 
								else 
									Error("connect()", res)
									res := Libc.close(sock)
									res := hostSpecificError 
								end  
							end  
						else 
							res := Libc.close(sock)
							res := CommStreams.invalidRemoteAdr 
						end  
					else 
						res := Libc.close(sock)
						res := CommStreams.invalidLocalAdr 
					end  
				else 
					res := CommStreams.invalidLocalAdr 
				end  
			else 
				Error("socket()", Errno())
				res := hostSpecificError 
			end  
		else 
			res := CommStreams.invalidRemoteAdr 
		end 
	end NewStream

begin
	debug := true
end CommTCP
